using System;
using Microsoft.Xrm.Sdk;

namespace Xrm.Example.CustomEarlyBound
{
    [System.Runtime.Serialization.DataContractAttribute]
    public abstract class EntityBase : Entity
    {
        protected EntityBase(string entityName) : base(entityName)
        {
        }

		public DateTime? CreatedOn = null;
        public DateTime? ModifiedOn = null;
        public int? VersionNumber = null;

        public EntityReference CreatedBy = null;
        public EntityReference CreatedOnBehalfBy = null;
        public int? ImportSequenceNumber = null;
        public EntityReference ModifiedBy = null;
        public EntityReference ModifiedOnBehalfBy = null;
        public DateTime? OverriddenCreatedOn = null;
        public OptionSetValue statecode = null;
        public OptionSetValue statuscode = null;
        public int? TimeZoneRuleVersionNumber = null;
        public int? UTCConversionTimeZoneCode = null;
    }

	[System.Runtime.Serialization.DataContractAttribute]
    public abstract class UserOrTeamEntity : EntityBase
    {
        protected UserOrTeamEntity(string entityName) : base(entityName)
        {
        }

        public EntityReference OwningBusinessUnit = null;
        public EntityReference OwningTeam = null;
        public EntityReference OwningUser = null;
        public EntityReference OwnerId = null;
    }

    [System.Runtime.Serialization.DataContractAttribute]
    public abstract class OrganizationEntity : EntityBase
    {
        protected OrganizationEntity(string entityName) : base(entityName)
        {
        }
    }

    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("principalattributeaccessmap")]
	public class PrincipalAttributeAccessMap : Entity
    {
        public const string EntityLogicalName = "principalattributeaccessmap";
        public PrincipalAttributeAccessMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("principalattributeaccessmapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["principalattributeaccessmapid"] = value;
            }
        }
		
		public readonly Guid? PrincipalAttributeAccessMapId = null;
		
		public readonly Guid? PrincipalId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? AttributeId = null;
		
		public readonly OptionSetValue CreateAccess = null;
		
		public readonly OptionSetValue ReadAccess = null;
		
		public readonly OptionSetValue UpdateAccess = null;

        public new static class Options
        {
            public enum CreateAccess
            {
                NotAllowed = 0,
                Allowed = 4
            }
            public enum ReadAccess
            {
                NotAllowed = 0,
                Allowed = 4
            }
            public enum UpdateAccess
            {
                NotAllowed = 0,
                Allowed = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("exchangesyncidmapping")]
	public class ExchangeSyncIdMapping : Entity
    {
        public const string EntityLogicalName = "exchangesyncidmapping";
        public ExchangeSyncIdMapping() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("exchangesyncidmappingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["exchangesyncidmappingid"] = value;
            }
        }
		
		public readonly int? ObjectTypeCode = null;
		
		public readonly string ExchangeEntryId = null;
		
		public readonly bool? IsDeletedInExchange = null;
		
		public readonly bool? IsUnlinkedInCRM = null;
		
		public readonly Guid? ExchangeSyncIdmappingId = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly DateTime? LastSyncErrorOccurredOn = null;
		
		public readonly Guid? ObjectId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? LastSyncErrorCode = null;
		
		public readonly int? UserDecision = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly string LastSyncError = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? ToCrmChangeType = null;
		
		public readonly int? FromCrmChangeType = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly int? Retries = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("theme")]
	public class Theme : Entity
    {
        public const string EntityLogicalName = "theme";
        public Theme() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("themeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["themeid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly OptionSetValue statecode = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly Guid? ThemeId = null;
		
		public readonly string ControlBorder = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string GlobalLinkColor = null;
		
		public readonly OptionSetValue statuscode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string HoverLinkEffect = null;
		
		public readonly string SelectedLinkEffect = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string DefaultCustomEntityColor = null;
		
		public readonly string ControlShade = null;
		
		public readonly string NavBarShelfColor = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string DefaultEntityColor = null;
		
		public readonly string BackgroundColor = null;
		
		public readonly EntityReference LogoId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string HeaderColor = null;
		
		public readonly string ProcessControlColor = null;
		
		public readonly string LogoToolTip = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string NavBarBackgroundColor = null;
		
		public readonly bool? IsDefaultTheme = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly bool? Type = null;

        public new static class Options
        {
            public enum statecode
            {
                Custom = 0,
                System = 1
            }
            public enum statuscode
            {
                Custom = 1,
                System = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("usermapping")]
	public class UserMapping : Entity
    {
        public const string EntityLogicalName = "usermapping";
        public UserMapping() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("usermappingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["usermappingid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string ClaimType = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? UserMappingId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string SystemUserAttributeName = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly OptionSetValue PartnerApplicationType = null;

        public new static class Options
        {
            public enum PartnerApplicationType
            {
                SharePoint = 0,
                Exchange = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("interactionforemail")]
	public class InteractionForEmail : Entity
    {
        public const string EntityLogicalName = "interactionforemail";
        public InteractionForEmail() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("interactionforemailid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["interactionforemailid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string name = null;
		
		public readonly string InteractionRepliedBy = null;
		
		public readonly OptionSetValue InteractionType = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue statecode = null;
		
		public readonly DateTime? EmailInteractionTime = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? InteractionForEmailId = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly string InteractionReplyId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly OptionSetValue statuscode = null;
		
		public readonly Guid? EmailActivityId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string InteractionUserAgent = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string InteractionLocation = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string InteractedComponentText = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly Guid? EmailInteractionReplyId = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedBy = null;

        public new static class Options
        {
            public enum InteractionType
            {
                EmailOpen = 0,
                LinkOpen = 1,
                AttachmentOpen = 2,
                EmailReply = 3
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("knowledgearticle")]
	public class KnowledgeArticle : Entity
    {
        public const string EntityLogicalName = "knowledgearticle";
        public KnowledgeArticle() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("knowledgearticleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["knowledgearticleid"] = value;
            }
        }
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly bool? UpdateContent = null;
		
		public readonly DateTime? KnowledgeArticleViews_Date = null;
		
		public readonly int? PublishStatusId = null;
		
		public readonly EntityReference SubjectId = null;
		
		public readonly bool? IsInternal = null;
		
		public readonly string Keywords = null;
		
		public readonly bool? SetCategoryAssociations = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference PreviousArticleContentId = null;
		
		public readonly DateTime? PublishOn = null;
		
		public readonly EntityReference ParentArticleContentId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? ScheduledStatusId = null;
		
		public readonly EntityReference RootArticleId = null;
		
		public readonly string Content = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly bool? IsRootArticle = null;
		
		public readonly int? KnowledgeArticleViews_State = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference primaryauthorid = null;
		
		public readonly Guid? stageid = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? knowledgearticleId = null;
		
		public readonly int? KnowledgeArticleViews = null;
		
		public readonly string Description = null;
		
		public readonly int? Rating_State = null;
		
		public readonly decimal? Rating = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? ExpirationStatusId = null;
		
		public readonly int? Rating_Count = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly OptionSetValue Review = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? ReadyForReview = null;
		
		public readonly string traversedpath = null;
		
		public readonly OptionSetValue ExpiredReviewOptions = null;
		
		public readonly bool? SetProductAssociations = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly int? MinorVersionNumber = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly int? MajorVersionNumber = null;
		
		public readonly Guid? processid = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly decimal? Rating_Sum = null;
		
		public readonly string ArticlePublicNumber = null;
		
		public readonly DateTime? Rating_Date = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference LanguageLocaleId = null;
		
		public readonly DateTime? ExpirationDate = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Title = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly bool? IsLatestVersion = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly bool? IsPrimary = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly int? ExpirationStateId = null;

        public new static class Options
        {
            public enum StateCode
            {
                Draft = 0,
                Approved = 1,
                Scheduled = 2,
                Published = 3,
                Expired = 4,
                Archived = 5,
                Discarded = 6
            }
            public enum Review
            {
                Approved = 0,
                Rejected = 1
            }
            public enum ExpiredReviewOptions
            {
                NeedsUpdating = 0,
                Republish = 1,
                Archive = 2
            }
            public enum StatusCode
            {
                Proposed = 1,
                Draft = 2,
                NeedsReview = 3,
                InReview = 4,
                Approved = 5,
                Scheduled = 6,
                Published = 7,
                NeedsReview1 = 8,
                Updating = 9,
                Expired = 10,
                Rejected = 11,
                Archived = 12,
                Discarded = 13,
                Rejected1 = 14
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("socialprofile")]
	public class SocialProfile : Entity
    {
        public const string EntityLogicalName = "socialprofile";
        public SocialProfile() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("socialprofileid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["socialprofileid"] = value;
            }
        }
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string ProfileName = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CustomerId = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly string ProfileLink = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly double? InfluenceScore = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly OptionSetValue Community = null;
		
		public readonly string UniqueProfileID = null;
		
		public readonly bool? Blocked = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly string ProfileFullName = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? SocialProfileId = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum Community
            {
                Facebook = 1,
                Twitter = 2,
                Other = 0
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("topicmodelexecutionhistory")]
	public class TopicModelExecutionHistory : Entity
    {
        public const string EntityLogicalName = "topicmodelexecutionhistory";
        public TopicModelExecutionHistory() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("topicmodelexecutionhistoryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["topicmodelexecutionhistoryid"] = value;
            }
        }
		
		public readonly int? RecordsProcessed = null;
		
		public readonly int? TotalTime = null;
		
		public readonly int? NumberOfTopicsFound = null;
		
		public readonly DateTime? StartTime = null;
		
		public readonly EntityReference TopicModelConfigurationId = null;
		
		public readonly OptionSetValue StatusReason = null;
		
		public readonly EntityReference TopicModelId = null;
		
		public readonly bool? IsTestExecution = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string RecordCorrelationId = null;
		
		public readonly string FetchXmlList = null;
		
		public readonly Guid? TopicModelExecutionHistoryId = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("azuresyncerrormessage")]
		public readonly string ErrorDetails = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly OptionSetValue Status = null;
		
		public readonly int? MaxTopics = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;

        public new static class Options
        {
            public enum StatusReason
            {
                TopicAnalysisExecutionIsQueued = 1,
                TopicAnalysisExecutionIsSynchronizing = 2,
                AnalyzingTopicAnalysisExecution = 3,
                TopicAnalysisHasBuilt = 4,
                SynchronizationFailed = 5,
                AnalysisFailed = 6,
                ConnectionFailed = 7
            }
            public enum Status
            {
                Queued = 1,
                InProgress = 2,
                Success = 3,
                Failed = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("textanalyticsentitymapping")]
	public class TextAnalyticsEntityMapping : Entity
    {
        public const string EntityLogicalName = "textanalyticsentitymapping";
        public TextAnalyticsEntityMapping() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("textanalyticsentitymappingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["textanalyticsentitymappingid"] = value;
            }
        }
		
		public readonly string Entity = null;
		
		public readonly string Field = null;
		
		public readonly string RelationshipName = null;
		
		public readonly string EntityDisplayName = null;
		
		public readonly Guid? TextAnalyticsEntityMappingId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string FieldDisplayName = null;
		
		public readonly EntityReference AdvancedSimilarityRuleId = null;
		
		public readonly EntityReference KnowledgeSearchModelId = null;
		
		public readonly string EntityPickList = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly OptionSetValue FieldPickList = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly Guid? TextAnalyticsEntityMappingIdUnique = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference TopicModelConfigurationId = null;
		
		public readonly bool? IsTextMatchMapping = null;
		
		public readonly int? ModelType = null;
		
		public readonly EntityReference SimilarityRuleId = null;
		
		public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum EntityPickList
            {
                No = 1,
                Yes = 2
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum FieldPickList
            {
                No = 1,
                Yes = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("recommendationmodelversionhistory")]
	public class RecommendationModelVersionHistory : Entity
    {
        public const string EntityLogicalName = "recommendationmodelversionhistory";
        public RecommendationModelVersionHistory() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("recommendationmodelversionhistoryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["recommendationmodelversionhistoryid"] = value;
            }
        }
		
		public readonly OptionSetValue WorkflowStep = null;
		
		public readonly OptionSetValue WorkflowStepStatus = null;
		
		public readonly DateTime? StartTime = null;
		
		public readonly DateTime? EndTime = null;
		
		public readonly int? NumberRecordsSynchronized = null;
		
		public readonly Guid? RecommendationModelVersionHistoryId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly int? ErrorCount = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("azuresyncerrormessage")]
		public readonly string ErrorDetails = null;
		
		public readonly EntityReference RecommendationModelVersionId = null;
		
		public readonly int? Duration = null;

        public new static class Options
        {
            public enum WorkflowStep
            {
                SynchronizeCatalog = 1,
                SynchronizeBasketData = 2,
                BuildAzureModel = 3
            }
            public enum WorkflowStepStatus
            {
                NotStarted = 1,
                InProgress = 2,
                Success = 3,
                Failure = 4,
                Cancelled = 5,
                Skipped = 6
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("topic")]
	public class Topic : Entity
    {
        public const string EntityLogicalName = "topic";
        public Topic() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("topicid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["topicid"] = value;
            }
        }
		
		public readonly string KeyPhrase = null;
		
		public readonly int? Score = null;
		
		public readonly EntityReference IncidentId = null;
		
		public readonly Guid? TopicId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("goal")]
	public class Goal : Entity
    {
        public const string EntityLogicalName = "goal";
        public Goal() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("goalid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["goalid"] = value;
            }
        }
		
		public readonly Money StretchTargetMoney = null;
		
		public readonly decimal? StretchTargetDecimal = null;
		
		public readonly int? StretchTargetInteger = null;
		
		public readonly Money TargetMoney = null;
		
		public readonly decimal? TargetDecimal = null;
		
		public readonly int? TargetInteger = null;
		
		public readonly Money ActualMoney = null;
		
		public readonly Money CustomRollupFieldMoney = null;
		
		public readonly Money InProgressMoney = null;
		
		public readonly decimal? ActualDecimal = null;
		
		public readonly decimal? CustomRollupFieldDecimal = null;
		
		public readonly decimal? InProgressDecimal = null;
		
		public readonly int? ActualInteger = null;
		
		public readonly int? CustomRollupFieldInteger = null;
		
		public readonly int? InProgressInteger = null;
		
		public readonly decimal? Percentage = null;
		
		public readonly bool? IsFiscalPeriodGoal = null;
		
		public readonly bool? ConsiderOnlyGoalOwnersRecords = null;
		
		public readonly DateTime? LastRolledupDate = null;
		
		public readonly string TargetString = null;
		
		public readonly string StretchTargetString = null;
		
		public readonly string ActualString = null;
		
		public readonly string CustomRollupFieldString = null;
		
		public readonly string InProgressString = null;
		
		public readonly bool? RollupOnlyFromChildGoals = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Title = null;
		
		public readonly OptionSetValue FiscalPeriod = null;
		
		public readonly OptionSetValue FiscalYear = null;
		
		public readonly DateTime? GoalStartDate = null;
		
		public readonly DateTime? GoalEndDate = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference RollUpQueryCustomIntegerId = null;
		
		public readonly EntityReference GoalOwnerId = null;
		
		public readonly Money ActualMoney_Base = null;
		
		public readonly Money StretchTargetMoney_Base = null;
		
		public readonly EntityReference RollUpQueryCustomDecimalId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly bool? IsAmount = null;
		
		public readonly EntityReference RollUpQueryInprogressIntegerId = null;
		
		public readonly Money ComputedTargetAsOfTodayMoney_Base = null;
		
		public readonly int? ComputedTargetAsOfTodayInteger = null;
		
		public readonly decimal? ComputedTargetAsOfTodayPercentageAchieved = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly decimal? ComputedTargetAsOfTodayDecimal = null;
		
		public readonly EntityReference MetricId = null;
		
		public readonly int? RollupErrorCode = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference RollUpQueryActualMoneyId = null;
		
		public readonly EntityReference RollUpQueryInprogressDecimalId = null;
		
		public readonly bool? IsOverridden = null;
		
		public readonly EntityReference GoalWithErrorId = null;
		
		public readonly EntityReference RollUpQueryInprogressMoneyId = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly Guid? TreeId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference RollupQueryActualIntegerId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly Money TargetMoney_Base = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly bool? IsOverride = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly int? Depth = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference ParentGoalId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? GoalId = null;
		
		public readonly EntityReference RollUpQueryCustomMoneyId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly OptionSetValue AmountDataType = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly Money CustomRollupFieldMoney_Base = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly EntityReference RollUpQueryActualDecimalId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Money ComputedTargetAsOfTodayMoney = null;
		
		public readonly Money InProgressMoney_Base = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;

        public new static class Options
        {
            public enum FiscalPeriod
            {
                Quarter1 = 1,
                Quarter2 = 2,
                Quarter3 = 3,
                Quarter4 = 4,
                January = 101,
                February = 102,
                March = 103,
                April = 104,
                May = 105,
                June = 106,
                July = 107,
                August = 108,
                September = 109,
                October = 110,
                November = 111,
                December = 112,
                Semester1 = 201,
                Semester2 = 202,
                Annual = 301,
                P1 = 401,
                P2 = 402,
                P3 = 403,
                P4 = 404,
                P5 = 405,
                P6 = 406,
                P7 = 407,
                P8 = 408,
                P9 = 409,
                P10 = 410,
                P11 = 411,
                P12 = 412,
                P13 = 413
            }
            public enum FiscalYear
            {
                FY2038 = 2038,
                FY2037 = 2037,
                FY2036 = 2036,
                FY2035 = 2035,
                FY2034 = 2034,
                FY2033 = 2033,
                FY2032 = 2032,
                FY2031 = 2031,
                FY2030 = 2030,
                FY2029 = 2029,
                FY2028 = 2028,
                FY2027 = 2027,
                FY2026 = 2026,
                FY2025 = 2025,
                FY2024 = 2024,
                FY2023 = 2023,
                FY2022 = 2022,
                FY2021 = 2021,
                FY2020 = 2020,
                FY2019 = 2019,
                FY2018 = 2018,
                FY2017 = 2017,
                FY2016 = 2016,
                FY2015 = 2015,
                FY2014 = 2014,
                FY2013 = 2013,
                FY2012 = 2012,
                FY2011 = 2011,
                FY2010 = 2010,
                FY2009 = 2009,
                FY2008 = 2008,
                FY2007 = 2007,
                FY2006 = 2006,
                FY2005 = 2005,
                FY2004 = 2004,
                FY2003 = 2003,
                FY2002 = 2002,
                FY2001 = 2001,
                FY2000 = 2000,
                FY1999 = 1999,
                FY1998 = 1998,
                FY1997 = 1997,
                FY1996 = 1996,
                FY1995 = 1995,
                FY1994 = 1994,
                FY1993 = 1993,
                FY1992 = 1992,
                FY1991 = 1991,
                FY1990 = 1990,
                FY1989 = 1989,
                FY1988 = 1988,
                FY1987 = 1987,
                FY1986 = 1986,
                FY1985 = 1985,
                FY1984 = 1984,
                FY1983 = 1983,
                FY1982 = 1982,
                FY1981 = 1981,
                FY1980 = 1980,
                FY1979 = 1979,
                FY1978 = 1978,
                FY1977 = 1977,
                FY1976 = 1976,
                FY1975 = 1975,
                FY1974 = 1974,
                FY1973 = 1973,
                FY1972 = 1972,
                FY1971 = 1971,
                FY1970 = 1970
            }
            public enum StatusCode
            {
                Open = 0,
                Closed = 1,
                Discarded = 2
            }
            public enum AmountDataType
            {
                Money = 0,
                Decimal = 1,
                Integer = 2
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("metric")]
	public class Metric : Entity
    {
        public const string EntityLogicalName = "metric";
        public Metric() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("metricid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["metricid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly OptionSetValue AmountDataType = null;
		
		public readonly bool? IsStretchTracked = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? ImportSequenceNumber = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly bool? IsAmount = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Guid? MetricId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string Description = null;

        public new static class Options
        {
            public enum AmountDataType
            {
                Money = 0,
                Decimal = 1,
                Integer = 2
            }
            public enum StatusCode
            {
                Open = 0,
                Closed = 1
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("rollupfield")]
	public class RollupField : Entity
    {
        public const string EntityLogicalName = "rollupfield";
        public RollupField() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("rollupfieldid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["rollupfieldid"] = value;
            }
        }
		
		public readonly string SourceAttribute = null;
		
		public readonly string DateAttribute = null;
		
		public readonly string GoalAttribute = null;
		
		public readonly int? SourceStatus = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string SourceEntity = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string EntityForDateAttribute = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference MetricId = null;
		
		public readonly bool? IsStateParentEntityAttribute = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? SourceState = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? RollupFieldId = null;

        public new static class Options
        {
            public enum SourceEntity
            {

            }
            public enum EntityForDateAttribute
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("goalrollupquery")]
	public class GoalRollupQuery : Entity
    {
        public const string EntityLogicalName = "goalrollupquery";
        public GoalRollupQuery() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("goalrollupqueryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["goalrollupqueryid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly string FetchXml = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly Guid? GoalRollupQueryId = null;
		
		public readonly string QueryEntityType = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? CreatedOn = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Open = 0,
                Closed = 1
            }
            public enum QueryEntityType
            {

            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("mailbox")]
	public class Mailbox : Entity
    {
        public const string EntityLogicalName = "mailbox";
        public Mailbox() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("mailboxid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["mailboxid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly string EmailAddress = null;
		
		public readonly OptionSetValue IncomingEmailDeliveryMethod = null;
		
		public readonly OptionSetValue OutgoingEmailDeliveryMethod = null;
		
		public readonly bool? ProcessAndDeleteEmails = null;
		
		public readonly bool? AllowEmailConnectorToUseCredentials = null;
		
		public readonly string Username = null;
		
		public readonly string Password = null;
		
		public readonly bool? IsForwardMailbox = null;
		
		public readonly int? ForcedUnlockCount = null;
		
		public readonly int? TransientFailureCount = null;
		
		public readonly string FolderHierarchy = null;
		
		public readonly bool? EnabledForIncomingEmail = null;
		
		public readonly EntityReference EmailServerProfile = null;
		
		public readonly DateTime? TestMailboxAccessCompletedOn = null;
		
		public readonly DateTime? OfficeAppsDeploymentCompleteOn = null;
		
		public readonly string LastMessageId = null;
		
		public readonly int? NoACTCount = null;
		
		public readonly DateTime? PostponeTestEmailConfigurationUntil = null;
		
		public readonly DateTime? LastSyncErrorOccurredOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly OptionSetValue EmailRouterAccessApproval = null;
		
		public readonly OptionSetValue IncomingEmailStatus = null;
		
		public readonly int? LastSyncErrorCount = null;
		
		public readonly Guid? MailboxId = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly int? LastDuration = null;
		
		public readonly DateTime? LastMailboxForcedUnlockOccurredOn = null;
		
		public readonly DateTime? LastSyncStartedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly OptionSetValue ACTStatus = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly DateTime? PostponeSendingUntil = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? ProcessedTimes = null;
		
		public readonly bool? TestEmailConfigurationScheduled = null;
		
		public readonly OptionSetValue OfficeAppsDeploymentStatus = null;
		
		public readonly bool? OfficeAppsDeploymentScheduled = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly DateTime? ProcessingLastAttemptedOn = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly string LastSyncErrorMachineName = null;
		
		public readonly bool? EnabledForACT = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly int? NoEmailCount = null;
		
		public readonly OptionSetValue OutgoingEmailStatus = null;
		
		public readonly int? MailboxProcessingContext = null;
		
		public readonly DateTime? ReceivingPostponedUntilForACT = null;
		
		public readonly int? ItemsFailedForLastSync = null;
		
		public readonly DateTime? PostponeMailboxProcessingUntil = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly bool? IsServiceAccount = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly bool? IsEmailAddressApprovedByO365Admin = null;
		
		public readonly bool? EnabledForOutgoingEmail = null;
		
		public readonly bool? IsACTSyncOrgFlagSet = null;
		
		public readonly DateTime? ProcessEmailReceivedAfter = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly string ExchangeSyncStateXml = null;
		
		public readonly OptionSetValue ACTDeliveryMethod = null;
		
		public readonly string UndeliverableFolder = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string HostId = null;
		
		public readonly int? ItemsProcessedForLastSync = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? LastActiveOn = null;
		
		public readonly int? VerboseLoggingEnabled = null;
		
		public readonly DateTime? PostponeOfficeAppsDeploymentUntil = null;
		
		public readonly DateTime? LastAutoDiscoveredOn = null;
		
		public readonly DateTime? ReceivingPostponedUntil = null;
		
		public readonly int? TestEmailConfigurationRetryCount = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? LastSuccessfulSyncCompletedOn = null;
		
		public readonly bool? OrgMarkedAsPrimaryForExchangeSync = null;
		
		public readonly int? ProcessingStateCode = null;
		
		public readonly OptionSetValue MailboxStatus = null;
		
		public readonly string EWSURL = null;
		
		public readonly bool? IsPasswordSet = null;
		
		public readonly int? LastSyncErrorCode = null;
		
		public readonly string LastSyncError = null;
		
		public readonly string OfficeAppsDeploymentError = null;
		
		public readonly int? AverageTotalDuration = null;

        public new static class Options
        {
            public enum IncomingEmailDeliveryMethod
            {
                None = 0,
                MicrosoftDynamics365ForOutlook = 1,
                ServerSideSynchronizationOrEmailRouter = 2,
                ForwardMailbox = 3
            }
            public enum OutgoingEmailDeliveryMethod
            {
                None = 0,
                MicrosoftDynamics365ForOutlook = 1,
                ServerSideSynchronizationOrEmailRouter = 2
            }
            public enum EmailRouterAccessApproval
            {
                Empty = 0,
                Approved = 1,
                PendingApproval = 2,
                Rejected = 3
            }
            public enum IncomingEmailStatus
            {
                NotRun = 0,
                Success = 1,
                Failure = 2
            }
            public enum ACTStatus
            {
                NotRun = 0,
                Success = 1,
                Failure = 2
            }
            public enum OfficeAppsDeploymentStatus
            {
                NotInstalled = 0,
                Installed = 1,
                InstallFailed = 2,
                UninstallFailed = 3,
                UpgradeRequired = 4
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum OutgoingEmailStatus
            {
                NotRun = 0,
                Success = 1,
                Failure = 2
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ACTDeliveryMethod
            {
                MicrosoftDynamics365ForOutlook = 0,
                ServerSideSynchronization = 1,
                None = 2
            }
            public enum MailboxStatus
            {
                NotRun = 0,
                Success = 1,
                Failure = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("principalobjectattributeaccess")]
	public class PrincipalObjectAttributeAccess : Entity
    {
        public const string EntityLogicalName = "principalobjectattributeaccess";
        public PrincipalObjectAttributeAccess() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("principalobjectattributeaccessid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["principalobjectattributeaccessid"] = value;
            }
        }
		
		public readonly Guid? PrincipalObjectAttributeAccessId = null;
		
		public readonly EntityReference PrincipalId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? AttributeId = null;
		
		public readonly bool? ReadAccess = null;
		
		public readonly bool? UpdateAccess = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference ObjectId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("position")]
	public class Position : Entity
    {
        public const string EntityLogicalName = "position";
        public Position() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("positionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["positionid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly Guid? PositionId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string Description = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly DateTime? ModifiedOn = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue statecode = null;
		
		public readonly EntityReference ParentPositionId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly DateTime? CreatedOn = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("systemapplicationmetadata")]
	public class SystemApplicationMetadata : Entity
    {
        public const string EntityLogicalName = "systemapplicationmetadata";
        public SystemApplicationMetadata() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("systemapplicationmetadataid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["systemapplicationmetadataid"] = value;
            }
        }
		
		public readonly string AssociatedEntityLogicalName = null;
		
		public readonly string Data = null;
		
		public readonly string DisplayName = null;
		
		public readonly int? FormFactor = null;
		
		public readonly bool? IsDefault = null;
		
		public readonly int? MetadataType = null;
		
		public readonly string SourceId = null;
		
		public readonly string Dependency = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? State = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? Lcid = null;
		
		public readonly string Version = null;
		
		public readonly Guid? SystemApplicationMetadataId = null;
		
		public readonly int? MetadataSubtype = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("userapplicationmetadata")]
	public class UserApplicationMetadata : Entity
    {
        public const string EntityLogicalName = "userapplicationmetadata";
        public UserApplicationMetadata() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("userapplicationmetadataid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["userapplicationmetadataid"] = value;
            }
        }
		
		public readonly string AssociatedEntityLogicalName = null;
		
		public readonly string Data = null;
		
		public readonly string DisplayName = null;
		
		public readonly int? FormFactor = null;
		
		public readonly bool? IsDefault = null;
		
		public readonly int? MetadataType = null;
		
		public readonly string SourceId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? Lcid = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string Dependency = null;
		
		public readonly Guid? UserApplicationMetadataId = null;
		
		public readonly int? State = null;
		
		public readonly int? MetadataSubtype = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("teamtemplate")]
	public class TeamTemplate : Entity
    {
        public const string EntityLogicalName = "teamtemplate";
        public TeamTemplate() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("teamtemplateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["teamtemplateid"] = value;
            }
        }
		
		public readonly int? ObjectTypeCode = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string TeamTemplateName = null;
		
		public readonly int? DefaultAccessRightsMask = null;
		
		public readonly Guid? TeamTemplateId = null;
		
		public readonly bool? IsSystem = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? ModifiedOn = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("topicmodelconfiguration")]
	public class TopicModelConfiguration : Entity
    {
        public const string EntityLogicalName = "topicmodelconfiguration";
        public TopicModelConfiguration() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("topicmodelconfigurationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["topicmodelconfigurationid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly string Description = null;
		
		public readonly int? NgramSize = null;
		
		public readonly decimal? MinRelevanceScore = null;
		
		public readonly string StopWords = null;
		
		public readonly Guid? TopicModelConfigurationIdUnique = null;
		
		public readonly string FetchXmlList = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly EntityReference TopicModelId = null;
		
		public readonly Guid? TopicModelConfigurationId = null;
		
		public readonly string SourceEntity = null;
		
		public readonly string DataFilter = null;
		
		public readonly OptionSetValue TimeFilter = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly int? TimeFilterDuration = null;
		
		public readonly Guid? SolutionId = null;

        public new static class Options
        {
            public enum SourceEntity
            {
                Incident = 112
            }
            public enum TimeFilter
            {
                LastNDays = 1,
                LastNWeeks = 2
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("cardtype")]
	public class CardType : Entity
    {
        public const string EntityLogicalName = "cardtype";
        public CardType() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("cardtypeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["cardtypeid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string CardName = null;
		
		public readonly DateTime? ScheduleTime = null;
		
		public readonly OptionSetValue ClientAvailability = null;
		
		public readonly DateTime? ModifiedOn = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("cardtype")]
		public readonly int? CardType1 = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string Actions = null;
		
		public readonly bool? IsLiveOnly = null;
		
		public readonly string GroupType = null;
		
		public readonly bool? IsPreviewCard = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? LastSyncTime = null;
		
		public readonly bool? IsEnabled = null;
		
		public readonly bool? BoolCardOption = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? HasSnoozeDismiss = null;
		
		public readonly string SummaryText = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string StringCardOption = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string SoftTitle = null;
		
		public readonly int? IntCardOption = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly bool? IsBaseCard = null;
		
		public readonly string CardTypeIcon = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? CardTypeId = null;

        public new static class Options
        {
            public enum ClientAvailability
            {
                WebClientOnly = 1,
                MocaOnly = 2,
                MocaAndWeb = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("channelaccessprofile")]
	public class ChannelAccessProfile : Entity
    {
        public const string EntityLogicalName = "channelaccessprofile";
        public ChannelAccessProfile() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("channelaccessprofileid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["channelaccessprofileid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly bool? EmailAccess = null;
		
		public readonly bool? PhoneAccess = null;
		
		public readonly bool? WebAccess = null;
		
		public readonly bool? TwitterAccess = null;
		
		public readonly bool? FacebookAccess = null;
		
		public readonly bool? ViewKnowledgeArticles = null;
		
		public readonly bool? ViewArticleRating = null;
		
		public readonly bool? RateKnowledgeArticles = null;
		
		public readonly bool? SubmitFeedback = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly bool? HavePrivilegesChanged = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly int? ImportSequenceNumber = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly bool? IsGuestProfile = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? ChannelAccessProfileIdUnique = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? ChannelAccessProfileId = null;
		
		public readonly Guid? SolutionId = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("externalparty")]
	public class ExternalParty : Entity
    {
        public const string EntityLogicalName = "externalparty";
        public ExternalParty() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("externalpartyid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["externalpartyid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string FullName = null;
		
		public readonly DateTime? LastEnabledOn = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? ExternalPartyIdUnique = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly string YomiLastName = null;
		
		public readonly string CorrelationKey = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string MiddleName = null;
		
		public readonly string EmailAddress = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly string YomiFullName = null;
		
		public readonly DateTime? LastDisabledOn = null;
		
		public readonly Guid? ExternalPartyId = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly string YomiFirstName = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string FirstName = null;
		
		public readonly string LastName = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly string Type = null;
		
		public readonly string YomiMiddleName = null;

        public new static class Options
        {
            public enum StateCode
            {
                Enabled = 0,
                Disabled = 1
            }
            public enum StatusCode
            {
                Enabled = 1,
                Disabled = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("topicmodel")]
	public class TopicModel : Entity
    {
        public const string EntityLogicalName = "topicmodel";
        public TopicModel() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("topicmodelid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["topicmodelid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly EntityReference AzureServiceConnectionId = null;
		
		public readonly DateTime? StartTime = null;
		
		public readonly string BuildRecurrence = null;
		
		public readonly int? MaxNumberofTopics = null;
		
		public readonly EntityReference ConfigurationUsed = null;
		
		public readonly DateTime? EndTime = null;
		
		public readonly int? AvgNumberofTopics = null;
		
		public readonly int? TotalTopicsFound = null;
		
		public readonly EntityReference ModifiedBy = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string SourceEntity = null;
		
		public readonly DateTime? TopicsLastCreatedOn = null;
		
		public readonly Guid? TopicModelId = null;
		
		public readonly int? MaxTopics = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string AzureSchedulerJobName = null;
		
		public readonly string AzureSchedulerTestJobName = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly string AzureSchedulerOnDemandJobName = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum SourceEntity
            {
                Case = 112
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("recommendationmodelversion")]
	public class RecommendationModelVersion : Entity
    {
        public const string EntityLogicalName = "recommendationmodelversion";
        public RecommendationModelVersion() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("recommendationmodelversionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["recommendationmodelversionid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly string Description = null;
		
		public readonly DateTime? BuildStartedOn = null;
		
		public readonly DateTime? BuildEndedOn = null;
		
		public readonly OptionSetValue BasketDataSynchronizationStatus = null;
		
		public readonly OptionSetValue CatalogSynchronizationStatus = null;
		
		public readonly int? CatalogCoverage = null;
		
		public readonly int? PercentileRank = null;
		
		public readonly string AzureBuildId = null;
		
		public readonly OptionSetValue AzureModelBuildStatus = null;
		
		public readonly string LogicAppRunId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? Duration = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly Guid? RecommendationModelVersionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly EntityReference RecommendationModelId = null;

        public new static class Options
        {
            public enum BasketDataSynchronizationStatus
            {
                NotStarted = 1,
                InProgress = 2,
                Completed = 3,
                Failed = 4
            }
            public enum CatalogSynchronizationStatus
            {
                NotStarted = 1,
                InProgress = 2,
                Completed = 3,
                Failed = 4
            }
            public enum AzureModelBuildStatus
            {
                NotStarted = 0,
                Create = 1,
                InProgress = 2,
                Success = 3,
                Error = 4,
                Cancelling = 5,
                Cancelled = 6
            }
            public enum StatusCode
            {
                NotStarted = 1,
                InProgress = 2,
                Completed = 3,
                Failed = 4,
                Cancelled = 5
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("applicationfile")]
	public class ApplicationFile : Entity
    {
        public const string EntityLogicalName = "applicationfile";
        public ApplicationFile() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("fileid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["fileid"] = value;
            }
        }
		
		public readonly string Body = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? FileId = null;
		
		public readonly string Name = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference ModifiedBy = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("dependency")]
	public class Dependency : Entity
    {
        public const string EntityLogicalName = "dependency";
        public Dependency() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("dependencyid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["dependencyid"] = value;
            }
        }
		
		public readonly OptionSetValue DependentComponentType = null;
		
		public readonly Guid? DependentComponentBaseSolutionId = null;
		
		public readonly OptionSetValue RequiredComponentType = null;
		
		public readonly Guid? RequiredComponentBaseSolutionId = null;
		
		public readonly Guid? RequiredComponentParentId = null;
		
		public readonly EntityReference DependentComponentNodeId = null;
		
		public readonly OptionSetValue DependencyType = null;
		
		public readonly double? RequiredComponentIntroducedVersion = null;
		
		public readonly Guid? DependentComponentParentId = null;
		
		public readonly EntityReference RequiredComponentNodeId = null;
		
		public readonly Guid? RequiredComponentObjectId = null;
		
		public readonly Guid? DependentComponentObjectId = null;
		
		public readonly Guid? DependencyId = null;

        public new static class Options
        {
            public enum DependentComponentType
            {
                Entity = 1,
                Attribute = 2,
                Relationship = 3,
                AttributePicklistValue = 4,
                AttributeLookupValue = 5,
                ViewAttribute = 6,
                LocalizedLabel = 7,
                RelationshipExtraCondition = 8,
                OptionSet = 9,
                EntityRelationship = 10,
                EntityRelationshipRole = 11,
                EntityRelationshipRelationships = 12,
                ManagedProperty = 13,
                EntityKey = 14,
                Role = 20,
                RolePrivilege = 21,
                DisplayString = 22,
                DisplayStringMap = 23,
                Form = 24,
                Organization = 25,
                SavedQuery = 26,
                Workflow = 29,
                Report = 31,
                ReportEntity = 32,
                ReportCategory = 33,
                ReportVisibility = 34,
                Attachment = 35,
                EmailTemplate = 36,
                ContractTemplate = 37,
                KBArticleTemplate = 38,
                MailMergeTemplate = 39,
                DuplicateRule = 44,
                DuplicateRuleCondition = 45,
                EntityMap = 46,
                AttributeMap = 47,
                RibbonCommand = 48,
                RibbonContextGroup = 49,
                RibbonCustomization = 50,
                RibbonRule = 52,
                RibbonTabToCommandMap = 53,
                RibbonDiff = 55,
                SavedQueryVisualization = 59,
                SystemForm = 60,
                WebResource = 61,
                SiteMap = 62,
                ConnectionRole = 63,
                FieldSecurityProfile = 70,
                FieldPermission = 71,
                PluginType = 90,
                PluginAssembly = 91,
                SDKMessageProcessingStep = 92,
                SDKMessageProcessingStepImage = 93,
                ServiceEndpoint = 95,
                RoutingRule = 150,
                RoutingRuleItem = 151,
                SLA = 152,
                SLAItem = 153,
                ConvertRule = 154,
                ConvertRuleItem = 155,
                HierarchyRule = 65,
                MobileOfflineProfile = 161,
                MobileOfflineProfileItem = 162,
                SimilarityRule = 165,
                CustomControl = 66,
                CustomControlDefaultConfig = 68
            }
            public enum RequiredComponentType
            {
                Entity = 1,
                Attribute = 2,
                Relationship = 3,
                AttributePicklistValue = 4,
                AttributeLookupValue = 5,
                ViewAttribute = 6,
                LocalizedLabel = 7,
                RelationshipExtraCondition = 8,
                OptionSet = 9,
                EntityRelationship = 10,
                EntityRelationshipRole = 11,
                EntityRelationshipRelationships = 12,
                ManagedProperty = 13,
                EntityKey = 14,
                Role = 20,
                RolePrivilege = 21,
                DisplayString = 22,
                DisplayStringMap = 23,
                Form = 24,
                Organization = 25,
                SavedQuery = 26,
                Workflow = 29,
                Report = 31,
                ReportEntity = 32,
                ReportCategory = 33,
                ReportVisibility = 34,
                Attachment = 35,
                EmailTemplate = 36,
                ContractTemplate = 37,
                KBArticleTemplate = 38,
                MailMergeTemplate = 39,
                DuplicateRule = 44,
                DuplicateRuleCondition = 45,
                EntityMap = 46,
                AttributeMap = 47,
                RibbonCommand = 48,
                RibbonContextGroup = 49,
                RibbonCustomization = 50,
                RibbonRule = 52,
                RibbonTabToCommandMap = 53,
                RibbonDiff = 55,
                SavedQueryVisualization = 59,
                SystemForm = 60,
                WebResource = 61,
                SiteMap = 62,
                ConnectionRole = 63,
                FieldSecurityProfile = 70,
                FieldPermission = 71,
                PluginType = 90,
                PluginAssembly = 91,
                SDKMessageProcessingStep = 92,
                SDKMessageProcessingStepImage = 93,
                ServiceEndpoint = 95,
                RoutingRule = 150,
                RoutingRuleItem = 151,
                SLA = 152,
                SLAItem = 153,
                ConvertRule = 154,
                ConvertRuleItem = 155,
                HierarchyRule = 65,
                MobileOfflineProfile = 161,
                MobileOfflineProfileItem = 162,
                SimilarityRule = 165,
                CustomControl = 66,
                CustomControlDefaultConfig = 68
            }
            public enum DependencyType
            {
                None = 0,
                SolutionInternal = 1,
                Published = 2,
                Unpublished = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("dependencynode")]
	public class DependencyNode : Entity
    {
        public const string EntityLogicalName = "dependencynode";
        public DependencyNode() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("dependencynodeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["dependencynodeid"] = value;
            }
        }
		
		public readonly bool? IsSharedComponent = null;
		
		public readonly Guid? ParentId = null;
		
		public readonly OptionSetValue ComponentType = null;
		
		public readonly EntityReference TopSolutionId = null;
		
		public readonly Guid? DependencyNodeId = null;
		
		public readonly EntityReference BaseSolutionId = null;
		
		public readonly Guid? ObjectId = null;
		
		public readonly double? IntroducedVersion = null;

        public new static class Options
        {
            public enum ComponentType
            {
                Entity = 1,
                Attribute = 2,
                Relationship = 3,
                AttributePicklistValue = 4,
                AttributeLookupValue = 5,
                ViewAttribute = 6,
                LocalizedLabel = 7,
                RelationshipExtraCondition = 8,
                OptionSet = 9,
                EntityRelationship = 10,
                EntityRelationshipRole = 11,
                EntityRelationshipRelationships = 12,
                ManagedProperty = 13,
                EntityKey = 14,
                Role = 20,
                RolePrivilege = 21,
                DisplayString = 22,
                DisplayStringMap = 23,
                Form = 24,
                Organization = 25,
                SavedQuery = 26,
                Workflow = 29,
                Report = 31,
                ReportEntity = 32,
                ReportCategory = 33,
                ReportVisibility = 34,
                Attachment = 35,
                EmailTemplate = 36,
                ContractTemplate = 37,
                KBArticleTemplate = 38,
                MailMergeTemplate = 39,
                DuplicateRule = 44,
                DuplicateRuleCondition = 45,
                EntityMap = 46,
                AttributeMap = 47,
                RibbonCommand = 48,
                RibbonContextGroup = 49,
                RibbonCustomization = 50,
                RibbonRule = 52,
                RibbonTabToCommandMap = 53,
                RibbonDiff = 55,
                SavedQueryVisualization = 59,
                SystemForm = 60,
                WebResource = 61,
                SiteMap = 62,
                ConnectionRole = 63,
                FieldSecurityProfile = 70,
                FieldPermission = 71,
                PluginType = 90,
                PluginAssembly = 91,
                SDKMessageProcessingStep = 92,
                SDKMessageProcessingStepImage = 93,
                ServiceEndpoint = 95,
                RoutingRule = 150,
                RoutingRuleItem = 151,
                SLA = 152,
                SLAItem = 153,
                ConvertRule = 154,
                ConvertRuleItem = 155,
                HierarchyRule = 65,
                MobileOfflineProfile = 161,
                MobileOfflineProfileItem = 162,
                SimilarityRule = 165,
                CustomControl = 66,
                CustomControlDefaultConfig = 68
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("invaliddependency")]
	public class InvalidDependency : Entity
    {
        public const string EntityLogicalName = "invaliddependency";
        public InvalidDependency() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("invaliddependencyid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["invaliddependencyid"] = value;
            }
        }
		
		public readonly OptionSetValue ExistingComponentType = null;
		
		public readonly Guid? ExistingComponentId = null;
		
		public readonly Guid? MissingComponentId = null;
		
		public readonly OptionSetValue ExistingDependencyType = null;
		
		public readonly int? MissingComponentLookupType = null;
		
		public readonly OptionSetValue MissingComponentType = null;
		
		public readonly Guid? InvalidDependencyId = null;
		
		public readonly string MissingComponentInfo = null;
		
		public readonly bool? IsExistingNodeRequiredComponent = null;

        public new static class Options
        {
            public enum ExistingComponentType
            {
                Entity = 1,
                Attribute = 2,
                Relationship = 3,
                AttributePicklistValue = 4,
                AttributeLookupValue = 5,
                ViewAttribute = 6,
                LocalizedLabel = 7,
                RelationshipExtraCondition = 8,
                OptionSet = 9,
                EntityRelationship = 10,
                EntityRelationshipRole = 11,
                EntityRelationshipRelationships = 12,
                ManagedProperty = 13,
                EntityKey = 14,
                Role = 20,
                RolePrivilege = 21,
                DisplayString = 22,
                DisplayStringMap = 23,
                Form = 24,
                Organization = 25,
                SavedQuery = 26,
                Workflow = 29,
                Report = 31,
                ReportEntity = 32,
                ReportCategory = 33,
                ReportVisibility = 34,
                Attachment = 35,
                EmailTemplate = 36,
                ContractTemplate = 37,
                KBArticleTemplate = 38,
                MailMergeTemplate = 39,
                DuplicateRule = 44,
                DuplicateRuleCondition = 45,
                EntityMap = 46,
                AttributeMap = 47,
                RibbonCommand = 48,
                RibbonContextGroup = 49,
                RibbonCustomization = 50,
                RibbonRule = 52,
                RibbonTabToCommandMap = 53,
                RibbonDiff = 55,
                SavedQueryVisualization = 59,
                SystemForm = 60,
                WebResource = 61,
                SiteMap = 62,
                ConnectionRole = 63,
                FieldSecurityProfile = 70,
                FieldPermission = 71,
                PluginType = 90,
                PluginAssembly = 91,
                SDKMessageProcessingStep = 92,
                SDKMessageProcessingStepImage = 93,
                ServiceEndpoint = 95,
                RoutingRule = 150,
                RoutingRuleItem = 151,
                SLA = 152,
                SLAItem = 153,
                ConvertRule = 154,
                ConvertRuleItem = 155,
                HierarchyRule = 65,
                MobileOfflineProfile = 161,
                MobileOfflineProfileItem = 162,
                SimilarityRule = 165,
                CustomControl = 66,
                CustomControlDefaultConfig = 68
            }
            public enum ExistingDependencyType
            {
                None = 0,
                SolutionInternal = 1,
                Published = 2,
                Unpublished = 4
            }
            public enum MissingComponentType
            {
                Entity = 1,
                Attribute = 2,
                Relationship = 3,
                AttributePicklistValue = 4,
                AttributeLookupValue = 5,
                ViewAttribute = 6,
                LocalizedLabel = 7,
                RelationshipExtraCondition = 8,
                OptionSet = 9,
                EntityRelationship = 10,
                EntityRelationshipRole = 11,
                EntityRelationshipRelationships = 12,
                ManagedProperty = 13,
                EntityKey = 14,
                Role = 20,
                RolePrivilege = 21,
                DisplayString = 22,
                DisplayStringMap = 23,
                Form = 24,
                Organization = 25,
                SavedQuery = 26,
                Workflow = 29,
                Report = 31,
                ReportEntity = 32,
                ReportCategory = 33,
                ReportVisibility = 34,
                Attachment = 35,
                EmailTemplate = 36,
                ContractTemplate = 37,
                KBArticleTemplate = 38,
                MailMergeTemplate = 39,
                DuplicateRule = 44,
                DuplicateRuleCondition = 45,
                EntityMap = 46,
                AttributeMap = 47,
                RibbonCommand = 48,
                RibbonContextGroup = 49,
                RibbonCustomization = 50,
                RibbonRule = 52,
                RibbonTabToCommandMap = 53,
                RibbonDiff = 55,
                SavedQueryVisualization = 59,
                SystemForm = 60,
                WebResource = 61,
                SiteMap = 62,
                ConnectionRole = 63,
                FieldSecurityProfile = 70,
                FieldPermission = 71,
                PluginType = 90,
                PluginAssembly = 91,
                SDKMessageProcessingStep = 92,
                SDKMessageProcessingStepImage = 93,
                ServiceEndpoint = 95,
                RoutingRule = 150,
                RoutingRuleItem = 151,
                SLA = 152,
                SLAItem = 153,
                ConvertRule = 154,
                ConvertRuleItem = 155,
                HierarchyRule = 65,
                MobileOfflineProfile = 161,
                MobileOfflineProfileItem = 162,
                SimilarityRule = 165,
                CustomControl = 66,
                CustomControlDefaultConfig = 68
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("officegraphdocument")]
	public class OfficeGraphDocument : Entity
    {
        public const string EntityLogicalName = "officegraphdocument";
        public OfficeGraphDocument() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("officegraphdocumentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["officegraphdocumentid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Title = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string ReadUrl = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string SiteTitle = null;
		
		public readonly string SiteUrl = null;
		
		public readonly string ModifiedBy = null;
		
		public readonly string PreviewImageUrl = null;
		
		public readonly int? ViewCount = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string AuthorNames = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly string SecondaryFileExtension = null;
		
		public readonly string CreatedBy = null;
		
		public readonly Guid? OfficeGraphDocumentId = null;
		
		public readonly string WebLocationUrl = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? ModifiedTime = null;
		
		public readonly string DocumentId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string FileExtension = null;
		
		public readonly int? QueryType = null;
		
		public readonly DateTime? DocumentLastModifiedOn = null;
		
		public readonly DateTime? CreatedTime = null;
		
		public readonly string DocumentPreviewMetadata = null;
		
		public readonly string FileType = null;
		
		public readonly int? Rank = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly string DocumentLastModifiedBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("similarityrule")]
	public class SimilarityRule : Entity
    {
        public const string EntityLogicalName = "similarityrule";
        public SimilarityRule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("similarityruleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["similarityruleid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string name = null;
		
		public readonly string MatchingEntityName = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly Guid? SimilarityRuleIdUnique = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly string FetchXmlList = null;
		
		public readonly string BaseEntityName = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly OptionSetValue MatchingEntityTypeCode = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly OptionSetValue BaseEntityTypeCode = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string RuleConditionXml = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string ActiveRuleFetchXML = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly int? MaxKeyWords = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":1}")]
		public readonly OptionSetValue statecode = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly Guid? SimilarityRuleId = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly int? NgramSize = null;
		
		public readonly bool? ExcludeInactiveRecords = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly OptionSetValue statuscode = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum MatchingEntityTypeCode
            {
                DefaultValue = 0
            }
            public enum BaseEntityTypeCode
            {
                DefaultValue = 0
            }
            public enum statecode
            {
                Draft = 0,
                Active = 1
            }
            public enum statuscode
            {
                Draft = 0,
                Active = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("channelaccessprofilerule")]
	public class ChannelAccessProfileRule : Entity
    {
        public const string EntityLogicalName = "channelaccessprofilerule";
        public ChannelAccessProfileRule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("channelaccessprofileruleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["channelaccessprofileruleid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly Guid? ChannelAccessProfileRuleId = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference WorkflowId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly Guid? ChannelAccessProfileRuleIdUnique = null;
		
		public readonly EntityReference OwnerId = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":1}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? SolutionId = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Draft = 1,
                Active = 2
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum StateCode
            {
                Draft = 0,
                Active = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("channelaccessprofileruleitem")]
	public class ChannelAccessProfileRuleItem : Entity
    {
        public const string EntityLogicalName = "channelaccessprofileruleitem";
        public ChannelAccessProfileRuleItem() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("channelaccessprofileruleitemid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["channelaccessprofileruleitemid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly Guid? ChannelAccessProfileRuleItemId = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly EntityReference ChannelAccessProfileRuleId = null;
		
		public readonly string ConditionXml = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly string Description = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? SequenceNumber = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference AssociatedChannelAccessProfile = null;
		
		public readonly Guid? ChannelAccessProfileRuleItemIdUnique = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference OwningBusinessUnit = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("delveactionhub")]
	public class DelveActionHub : Entity
    {
        public const string EntityLogicalName = "delveactionhub";
        public DelveActionHub() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("delveactionhubid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["delveactionhubid"] = value;
            }
        }
		
		public readonly DateTime? ModifiedTime = null;
		
		public readonly DateTime? CreatedTime = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? SenderEntityObjectTypeCode = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string IconClassName = null;
		
		public readonly string MailWebLink = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue CardType = null;
		
		public readonly DateTime? MessageTime = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string RelatedMailIds = null;
		
		public readonly Guid? DelveActionHubId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly string Sender = null;
		
		public readonly string MessageId = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly string SenderImageUrl = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference RecordId = null;
		
		public readonly EntityReference CreatedBy = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Subject = null;
		
		public readonly Guid? SenderEntityId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference TransactionCurrencyId = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Pending = 1,
                Completed = 2,
                Dismiss = 3
            }
            public enum CardType
            {
                Default = 0,
                SendContentRequest = 1,
                YesNo = 2,
                MeetingRequest = 3
            }
            public enum StateCode
            {
                Pending = 0,
                Completed = 1,
                Dismiss = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("recommendeddocument")]
	public class RecommendedDocument : Entity
    {
        public const string EntityLogicalName = "recommendeddocument";
        public RecommendedDocument() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("recommendeddocumentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["recommendeddocumentid"] = value;
            }
        }
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string AbsoluteUrl = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly int? FileSize = null;
		
		public readonly string Source = null;
		
		public readonly string ReadUrl = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Title = null;
		
		public readonly string AssociatedRecordName = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string FileType = null;
		
		public readonly string Author = null;
		
		public readonly string Version = null;
		
		public readonly string IconClassName = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string Location = null;
		
		public readonly string ContentType = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly string EditUrl = null;
		
		public readonly string ExternalModifiedBy = null;
		
		public readonly string FullName = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly string ExternalDocumentId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? RecommendedDocumentId = null;
		
		public readonly DateTime? CreatedOn = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("routingrule")]
	public class RoutingRule : Entity
    {
        public const string EntityLogicalName = "routingrule";
        public RoutingRule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("routingruleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["routingruleid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly string Description = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference WorkflowId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly EntityReference OwnerId = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":1}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly Guid? RoutingRuleId = null;
		
		public readonly Guid? RoutingRuleIdUnique = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum StateCode
            {
                Draft = 0,
                Active = 1
            }
            public enum StatusCode
            {
                Draft = 1,
                Active = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("routingruleitem")]
	public class RoutingRuleItem : Entity
    {
        public const string EntityLogicalName = "routingruleitem";
        public RoutingRuleItem() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("routingruleitemid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["routingruleitemid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly Guid? RoutingRuleItemId = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference AssignObjectId = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly int? SequenceNumber = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly DateTime? AssignObjectIdModifiedOn = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference RoutingRuleId = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly string Description = null;
		
		public readonly string ConditionXml = null;
		
		public readonly Guid? RoutingRuleItemIdUnique = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference RoutedQueueId = null;
		
		public readonly EntityReference TransactionCurrencyId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("knowledgebaserecord")]
	public class KnowledgeBaseRecord : Entity
    {
        public const string EntityLogicalName = "knowledgebaserecord";
        public KnowledgeBaseRecord() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("knowledgebaserecordid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["knowledgebaserecordid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Title = null;
		
		public readonly string PrivateUrl = null;
		
		public readonly string PublicUrl = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly Guid? KnowledgeBaseRecordId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string UniqueId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference TransactionCurrencyId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("service")]
	public class Service : Entity
    {
        public const string EntityLogicalName = "service";
        public Service() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("serviceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["serviceid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? AnchorOffset = null;
		
		public readonly bool? IsSchedulable = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly Guid? CalendarId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly int? Duration = null;
		
		public readonly bool? IsVisible = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference ResourceSpecId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference StrategyId = null;
		
		public readonly Guid? ServiceId = null;
		
		public readonly string Granularity = null;
		
		public readonly OptionSetValue InitialStatusCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly bool? ShowResources = null;
		
		public readonly string Description = null;

        public new static class Options
        {
            public enum InitialStatusCode
            {
                Requested = 1,
                Tentative = 2,
                Pending = 3,
                Reserved = 4,
                InProgress = 6,
                Arrived = 7,
                Completed = 8,
                Canceled = 9,
                NoShow = 10
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("quoteclose")]
	public class QuoteClose : Entity
    {
        public const string EntityLogicalName = "quoteclose";
        public QuoteClose() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }
		
		public readonly DateTime? ActualStart = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly string QuoteNumber = null;
		
		public readonly bool? IsRegularActivity = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Subject = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly bool? IsWorkflowCreated = null;
		
		public readonly EntityReference ModifiedByExternalParty = null;
		
		public readonly EntityReference QuoteId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly EntityReference CreatedByExternalParty = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly DateTime? ActualEnd = null;
		
		public readonly int? ScheduledDurationMinutes = null;
		
		public readonly string ActivityTypeCode = null;
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly int? Revision = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly Guid? ActivityId = null;
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly string Subcategory = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string Category = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference ServiceId = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly bool? IsBilled = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? ActualDurationMinutes = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Open = 1,
                Completed = 2,
                Canceled = 3
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                ServiceActivity = 4214,
                OpportunityClose = 4208,
                OrderClose = 4209,
                QuoteClose = 4211,
                CaseResolution = 4206,
                Task = 4212,
                CampaignResponse = 4401,
                CampaignActivity = 4402,
                BulkOperation = 4406,
                RecurringAppointment = 4251
            }
            public enum StateCode
            {
                Open = 0,
                Completed = 1,
                Canceled = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("roletemplate")]
	public class RoleTemplate : Entity
    {
        public const string EntityLogicalName = "roletemplate";
        public RoleTemplate() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("roletemplateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["roletemplateid"] = value;
            }
        }
		
		public readonly Guid? RoleTemplateId = null;
		
		public readonly bool? Upgrading = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("entitlementtemplate")]
	public class EntitlementTemplate : Entity
    {
        public const string EntityLogicalName = "entitlementtemplate";
        public EntitlementTemplate() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("entitlementtemplateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["entitlementtemplateid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly OptionSetValue DecreaseRemainingOn = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? StartDate = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly OptionSetValue KbAccessLevel = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly OptionSetValue AllocationTypeCode = null;
		
		public readonly bool? RestrictCaseCreation = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly decimal? TotalTerms = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? EndDate = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? EntitlementTemplateId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string Description = null;
		
		public readonly int? VersionNumber = null;

        public new static class Options
        {
            public enum DecreaseRemainingOn
            {
                CaseResolution = 0,
                CaseCreation = 1
            }
            public enum KbAccessLevel
            {
                Standard = 0,
                Premium = 1,
                None = 2
            }
            public enum AllocationTypeCode
            {
                NumberOfCases = 0,
                NumberOfHours = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("dataperformance")]
	public class DataPerformance : Entity
    {
        public const string EntityLogicalName = "dataperformance";
        public DataPerformance() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("dataperformanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["dataperformanceid"] = value;
            }
        }
		
		public readonly string Operation = null;
		
		public readonly decimal? Weight = null;
		
		public readonly string LastActionResult = null;
		
		public readonly int? Count = null;
		
		public readonly Guid? DataPerformanceId = null;
		
		public readonly bool? AnyOptimizationApplied = null;
		
		public readonly DateTime? LastOptimizationDate = null;
		
		public readonly bool? AnyOptimizationAvailable = null;
		
		public readonly string ExecutionPeriod = null;
		
		public readonly string Entity = null;
		
		public readonly decimal? OptimizationStorage = null;
		
		public readonly string OptimizationStatus = null;
		
		public readonly decimal? MaxTime = null;
		
		public readonly string Component = null;
		
		public readonly decimal? MinTime = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly decimal? MedianTime = null;
		
		public readonly decimal? EstimatedOptimizationImpact = null;
		
		public readonly string Solution = null;
		
		public readonly string RealizedOptimizationImpact = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("opportunityproduct")]
	public class OpportunityProduct : Entity
    {
        public const string EntityLogicalName = "opportunityproduct";
        public OpportunityProduct() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("opportunityproductid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["opportunityproductid"] = value;
            }
        }
		
		public readonly Money PricePerUnit = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly OptionSetValue PropertyConfigurationStatus = null;
		
		public readonly Money Tax = null;
		
		public readonly bool? IsPriceOverridden = null;
		
		public readonly Money BaseAmount = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Money ExtendedAmount = null;
		
		public readonly decimal? Quantity = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue PricingErrorCode = null;
		
		public readonly EntityReference UoMId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly Money Tax_Base = null;
		
		public readonly EntityReference OpportunityId = null;
		
		public readonly Money PricePerUnit_Base = null;
		
		public readonly OptionSetValue OpportunityStateCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference ProductId = null;
		
		public readonly Money ExtendedAmount_Base = null;
		
		public readonly int? SequenceNumber = null;
		
		public readonly Guid? OwningBusinessUnit = null;
		
		public readonly string ProductDescription = null;
		
		public readonly Money ManualDiscountAmount_Base = null;
		
		public readonly Money VolumeDiscountAmount_Base = null;
		
		public readonly Guid? ProductAssociationId = null;
		
		public readonly Money ManualDiscountAmount = null;
		
		public readonly Guid? OpportunityProductId = null;
		
		public readonly OptionSetValue ProductTypeCode = null;
		
		public readonly bool? IsProductOverridden = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly int? LineItemNumber = null;
		
		public readonly string Description = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly Money BaseAmount_Base = null;
		
		public readonly Money VolumeDiscountAmount = null;
		
		public readonly Guid? ParentBundleId = null;
		
		public readonly Guid? OwningUser = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly byte[] EntityImage = null;

        public new static class Options
        {
            public enum PropertyConfigurationStatus
            {
                Edit = 0,
                Rectify = 1,
                NotConfigured = 2
            }
            public enum PricingErrorCode
            {
                None = 0,
                DetailError = 1,
                MissingPriceLevel = 2,
                InactivePriceLevel = 3,
                MissingQuantity = 4,
                MissingUnitPrice = 5,
                MissingProduct = 6,
                InvalidProduct = 7,
                MissingPricingCode = 8,
                InvalidPricingCode = 9,
                MissingUOM = 10,
                ProductNotInPriceLevel = 11,
                MissingPriceLevelAmount = 12,
                MissingPriceLevelPercentage = 13,
                MissingPrice = 14,
                MissingCurrentCost = 15,
                MissingStandardCost = 16,
                InvalidPriceLevelAmount = 17,
                InvalidPriceLevelPercentage = 18,
                InvalidPrice = 19,
                InvalidCurrentCost = 20,
                InvalidStandardCost = 21,
                InvalidRoundingPolicy = 22,
                InvalidRoundingOption = 23,
                InvalidRoundingAmount = 24,
                PriceCalculationError = 25,
                InvalidDiscountType = 26,
                DiscountTypeInvalidState = 27,
                InvalidDiscount = 28,
                InvalidQuantity = 29,
                InvalidPricingPrecision = 30,
                MissingProductDefaultUOM = 31,
                MissingProductUOMSchedule = 32,
                InactiveDiscountType = 33,
                InvalidPriceLevelCurrency = 34,
                PriceAttributeOutOfRange = 35,
                BaseCurrencyAttributeOverflow = 36,
                BaseCurrencyAttributeUnderflow = 37
            }
            public enum OpportunityStateCode
            {

            }
            public enum ProductTypeCode
            {
                Product = 1,
                Bundle = 2,
                RequiredBundleProduct = 3,
                OptionalBundleProduct = 4,
                ProjectBasedService = 5
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("appmodule")]
	public class AppModule : Entity
    {
        public const string EntityLogicalName = "appmodule";
        public AppModule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("appmoduleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["appmoduleid"] = value;
            }
        }
		
		public readonly string ConfigXML = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? AppModuleId = null;
		
		public readonly string AppModuleXmlManaged = null;
		
		public readonly bool? IsDefault = null;
		
		public readonly string UniqueName = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? FormFactor = null;
		
		public readonly Guid? AppModuleIdUnique = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly bool? IsFeatured = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly string AppModuleVersion = null;
		
		public readonly int? ClientType = null;
		
		public readonly Guid? WebResourceId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly DateTime? PublishedOn = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly string URL = null;
		
		public readonly EntityReference PublisherId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly string Description = null;
		
		public readonly int? ImportSequenceNumber = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("partnerapplication")]
	public class PartnerApplication : Entity
    {
        public const string EntityLogicalName = "partnerapplication";
        public PartnerApplication() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("partnerapplicationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["partnerapplicationid"] = value;
            }
        }
		
		public readonly string PrincipalId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? TenantId = null;
		
		public readonly OptionSetValue ApplicationRole = null;
		
		public readonly string Realm = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly Guid? PartnerApplicationId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string MetadataUrl = null;
		
		public readonly DateTime? CreatedOn = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly bool? UseAuthorizationServer = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;

        public new static class Options
        {
            public enum ApplicationRole
            {
                Client = 0,
                Server = 1
            }
            public enum StatusCode
            {
                Enabled = 1,
                Disabled = 2
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("systemuserlicenses")]
	public class SystemUserLicenses : Entity
    {
        public const string EntityLogicalName = "systemuserlicenses";
        public SystemUserLicenses() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("systemuserlicenseid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["systemuserlicenseid"] = value;
            }
        }
		
		public readonly Guid? SystemUserId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? SystemUserLicenseId = null;
		
		public readonly Guid? LicenseId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("monthlyfiscalcalendar")]
	public class MonthlyFiscalCalendar : Entity
    {
        public const string EntityLogicalName = "monthlyfiscalcalendar";
        public MonthlyFiscalCalendar() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("userfiscalcalendarid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["userfiscalcalendarid"] = value;
            }
        }
		
		public readonly EntityReference BusinessUnitId = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month3")]
		public readonly Money Period3 = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month12")]
		public readonly Money Period12 = null;
		
		public readonly EntityReference SalesPersonId = null;
		
		public readonly DateTime? ModifiedOn = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month8_base")]
		public readonly Money Period8_Base = null;
		
		public readonly Guid? UserFiscalCalendarId = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month8")]
		public readonly Money Period8 = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month11")]
		public readonly Money Period11 = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly decimal? ExchangeRate = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month7")]
		public readonly Money Period7 = null;
		
		public readonly DateTime? EffectiveOn = null;
		
		public readonly int? FiscalPeriodType = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month4_base")]
		public readonly Money Period4_Base = null;
		
		public readonly EntityReference ModifiedBy = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month1_base")]
		public readonly Money Period1_Base = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month9_base")]
		public readonly Money Period9_Base = null;
		
		public readonly EntityReference CreatedBy = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month11_base")]
		public readonly Money Period11_Base = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month6")]
		public readonly Money Period6 = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month5")]
		public readonly Money Period5 = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month2_base")]
		public readonly Money Period2_Base = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month5_base")]
		public readonly Money Period5_Base = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month6_base")]
		public readonly Money Period6_Base = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month4")]
		public readonly Money Period4 = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month10_base")]
		public readonly Money Period10_Base = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month3_base")]
		public readonly Money Period3_Base = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month1")]
		public readonly Money Period1 = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month2")]
		public readonly Money Period2 = null;
		
		public readonly DateTime? CreatedOn = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month12_base")]
		public readonly Money Period12_Base = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month7_base")]
		public readonly Money Period7_Base = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month10")]
		public readonly Money Period10 = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("month9")]
		public readonly Money Period9 = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("businessunitnewsarticle")]
	public class BusinessUnitNewsArticle : Entity
    {
        public const string EntityLogicalName = "businessunitnewsarticle";
        public BusinessUnitNewsArticle() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("businessunitnewsarticleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["businessunitnewsarticleid"] = value;
            }
        }
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? BusinessUnitNewsArticleId = null;
		
		public readonly DateTime? ActiveOn = null;
		
		public readonly bool? ShowOnHomepage = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string NewsArticle = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string ArticleUrl = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string ArticleTitle = null;
		
		public readonly DateTime? ActiveUntil = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue ArticleTypeCode = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;

        public new static class Options
        {
            public enum ArticleTypeCode
            {
                AllUsers = 1,
                SalesUsers = 2,
                ServiceUsers = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("contracttemplate")]
	public class ContractTemplate : Entity
    {
        public const string EntityLogicalName = "contracttemplate";
        public ContractTemplate() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("contracttemplateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["contracttemplateid"] = value;
            }
        }
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly bool? UseDiscountAsPercentage = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string EffectivityCalendar = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly OptionSetValue BillingFrequencyCode = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string Description = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly Guid? ContractTemplateId = null;
		
		public readonly Guid? ContractTemplateIdUnique = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly OptionSetValue ContractServiceLevelCode = null;
		
		public readonly string Abbreviation = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly OptionSetValue AllotmentTypeCode = null;
		
		public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum BillingFrequencyCode
            {
                Monthly = 1,
                Bimonthly = 2,
                Quarterly = 3,
                Semiannually = 4,
                Annually = 5
            }
            public enum ContractServiceLevelCode
            {
                Gold = 1,
                Silver = 2,
                Bronze = 3
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum AllotmentTypeCode
            {
                NumberOfCases = 1,
                Time = 2,
                CoverageDates = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sharepointdocument")]
	public class SharePointDocument : Entity
    {
        public const string EntityLogicalName = "sharepointdocument";
        public SharePointDocument() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sharepointdocumentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sharepointdocumentid"] = value;
            }
        }
		
		public readonly string Edit = null;
		
		public readonly string LocationId = null;
		
		public readonly bool? IsCheckedOut = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string ReadUrl = null;
		
		public readonly int? DocumentId = null;
		
		public readonly string CopySource = null;
		
		public readonly string AppCreatedBy = null;
		
		public readonly string EditUrl = null;
		
		public readonly DateTime? Modified = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string Title = null;
		
		public readonly bool? IsRecursiveFetch = null;
		
		public readonly DateTime? SharePointCreatedOn = null;
		
		public readonly string RelativeLocation = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string FullName = null;
		
		public readonly string SharePointModifiedBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly string CheckInComment = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string FileType = null;
		
		public readonly EntityReference BusinessUnitId = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly bool? IsFolder = null;
		
		public readonly string AbsoluteUrl = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly int? ContentTypeId = null;
		
		public readonly string IconClassName = null;
		
		public readonly int? ChildItemCount = null;
		
		public readonly int? FileSize = null;
		
		public readonly Guid? SharePointDocumentId = null;
		
		public readonly OptionSetValue DocumentLocationType = null;
		
		public readonly string ContentType = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string CheckedOutTo = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly int? ChildFolderCount = null;
		
		public readonly string Version = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly OptionSetValue ServiceType = null;
		
		public readonly string AppModifiedBy = null;
		
		public readonly string Author = null;

        public new static class Options
        {
            public enum DocumentLocationType
            {
                General = 0,
                DedicatedForOneNoteIntegration = 1
            }
            public enum ServiceType
            {
                SharePoint = 0,
                OneDrive = 1,
                SharedWithMe = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("complexcontrol")]
	public class ComplexControl : Entity
    {
        public const string EntityLogicalName = "complexcontrol";
        public ComplexControl() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("complexcontrolid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["complexcontrolid"] = value;
            }
        }
		
		public readonly Guid? ComplexControlId = null;
		
		public readonly string ComplexControlXml = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly Guid? ComplexControlIdUnique = null;
		
		public readonly int? Version = null;
		
		public readonly string Description = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly OptionSetValue Type = null;
		
		public readonly int? VersionNumber = null;

        public new static class Options
        {
            public enum Type
            {
                ProcessControl = 0,
                LinkControl = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("quotedetail")]
	public class QuoteDetail : Entity
    {
        public const string EntityLogicalName = "quotedetail";
        public QuoteDetail() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("quotedetailid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["quotedetailid"] = value;
            }
        }
		
		public readonly OptionSetValue ShipTo_FreightTermsCode = null;
		
		public readonly string ShipTo_PostalCode = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly string ShipTo_Line3 = null;
		
		public readonly Money PricePerUnit_Base = null;
		
		public readonly string ProductDescription = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string Description = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string ShipTo_Fax = null;
		
		public readonly Money ManualDiscountAmount_Base = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string ShipTo_Line2 = null;
		
		public readonly string ShipTo_StateOrProvince = null;
		
		public readonly string ShipTo_Country = null;
		
		public readonly decimal? Quantity = null;
		
		public readonly string ShipTo_Line1 = null;
		
		public readonly string ShipTo_Telephone = null;
		
		public readonly int? SequenceNumber = null;
		
		public readonly Money Tax_Base = null;
		
		public readonly Guid? ProductAssociationId = null;
		
		public readonly OptionSetValue ProductTypeCode = null;
		
		public readonly string ShipTo_City = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference SalesRepId = null;
		
		public readonly OptionSetValue QuoteStateCode = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly Money Tax = null;
		
		public readonly Money ExtendedAmount_Base = null;
		
		public readonly OptionSetValue PropertyConfigurationStatus = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly EntityReference UoMId = null;
		
		public readonly Money ManualDiscountAmount = null;
		
		public readonly Guid? OwningUser = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference ProductId = null;
		
		public readonly string ShipTo_ContactName = null;
		
		public readonly bool? IsProductOverridden = null;
		
		public readonly Money BaseAmount = null;
		
		public readonly bool? WillCall = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly Money VolumeDiscountAmount = null;
		
		public readonly OptionSetValue PricingErrorCode = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Guid? OwningBusinessUnit = null;
		
		public readonly EntityReference QuoteId = null;
		
		public readonly Guid? ShipTo_AddressId = null;
		
		public readonly Guid? QuoteDetailId = null;
		
		public readonly string ShipTo_Name = null;
		
		public readonly Guid? ParentBundleId = null;
		
		public readonly bool? IsPriceOverridden = null;
		
		public readonly Money ExtendedAmount = null;
		
		public readonly Money BaseAmount_Base = null;
		
		public readonly Money PricePerUnit = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? LineItemNumber = null;
		
		public readonly Money VolumeDiscountAmount_Base = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly DateTime? RequestDeliveryBy = null;

        public new static class Options
        {
            public enum ShipTo_FreightTermsCode
            {
                FOB = 1,
                NoCharge = 2
            }
            public enum ProductTypeCode
            {
                Product = 1,
                Bundle = 2,
                RequiredBundleProduct = 3,
                OptionalBundleProduct = 4,
                ProjectBasedService = 5
            }
            public enum QuoteStateCode
            {

            }
            public enum PropertyConfigurationStatus
            {
                Edit = 0,
                Rectify = 1,
                NotConfigured = 2
            }
            public enum PricingErrorCode
            {
                None = 0,
                DetailError = 1,
                MissingPriceLevel = 2,
                InactivePriceLevel = 3,
                MissingQuantity = 4,
                MissingUnitPrice = 5,
                MissingProduct = 6,
                InvalidProduct = 7,
                MissingPricingCode = 8,
                InvalidPricingCode = 9,
                MissingUOM = 10,
                ProductNotInPriceLevel = 11,
                MissingPriceLevelAmount = 12,
                MissingPriceLevelPercentage = 13,
                MissingPrice = 14,
                MissingCurrentCost = 15,
                MissingStandardCost = 16,
                InvalidPriceLevelAmount = 17,
                InvalidPriceLevelPercentage = 18,
                InvalidPrice = 19,
                InvalidCurrentCost = 20,
                InvalidStandardCost = 21,
                InvalidRoundingPolicy = 22,
                InvalidRoundingOption = 23,
                InvalidRoundingAmount = 24,
                PriceCalculationError = 25,
                InvalidDiscountType = 26,
                DiscountTypeInvalidState = 27,
                InvalidDiscount = 28,
                InvalidQuantity = 29,
                InvalidPricingPrecision = 30,
                MissingProductDefaultUOM = 31,
                MissingProductUOMSchedule = 32,
                InactiveDiscountType = 33,
                InvalidPriceLevelCurrency = 34,
                PriceAttributeOutOfRange = 35,
                BaseCurrencyAttributeOverflow = 36,
                BaseCurrencyAttributeUnderflow = 37
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("isvconfig")]
	public class IsvConfig : Entity
    {
        public const string EntityLogicalName = "isvconfig";
        public IsvConfig() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("isvconfigid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["isvconfigid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string ConfigXML = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? IsvConfigId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? OrganizationId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("dynamicpropertyoptionsetitem")]
	public class DynamicPropertyOptionSetItem : Entity
    {
        public const string EntityLogicalName = "dynamicpropertyoptionsetitem";
        public DynamicPropertyOptionSetItem() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("dynamicpropertyoptionsetvalueid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["dynamicpropertyoptionsetvalueid"] = value;
            }
        }
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Guid? DynamicPropertyOptionSetValueId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string DynamicPropertyOptionDescription = null;
		
		public readonly int? DynamicPropertyOptionValue = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? DMTImportState = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference ModifiedBy = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string DynamicPropertyOptionName = null;
		
		public readonly EntityReference DynamicPropertyId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? DynamicPropertyOptionSetValueSequenceNumber = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sdkmessageprocessingstepsecureconfig")]
	public class SdkMessageProcessingStepSecureConfig : Entity
    {
        public const string EntityLogicalName = "sdkmessageprocessingstepsecureconfig";
        public SdkMessageProcessingStepSecureConfig() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sdkmessageprocessingstepsecureconfigid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sdkmessageprocessingstepsecureconfigid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? SdkMessageProcessingStepSecureConfigIdUnique = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? SdkMessageProcessingStepSecureConfigId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string SecureConfig = null;
		
		public readonly int? CustomizationLevel = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("organization")]
	public class Organization : Entity
    {
        public const string EntityLogicalName = "organization";
        public Organization() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("organizationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["organizationid"] = value;
            }
        }
		
		public readonly int? EmailSendPollingPeriod = null;
		
		public readonly int? MinAddressBookSyncInterval = null;
		
		public readonly bool? AllowOfflineScheduledSyncs = null;
		
		public readonly int? MinOfflineSyncInterval = null;
		
		public readonly bool? IsAuditEnabled = null;
		
		public readonly Guid? UserGroupId = null;
		
		public readonly string AzureSchedulerJobCollectionName = null;
		
		public readonly Guid? SqlAccessGroupId = null;
		
		public readonly int? CurrentCategoryNumber = null;
		
		public readonly OptionSetValue DateFormatCode = null;
		
		public readonly int? RiErrorStatus = null;
		
		public readonly int? MaxProductsInBundle = null;
		
		public readonly int? PastExpansionWindow = null;
		
		public readonly bool? IsPreviewEnabledForActionCard = null;
		
		public readonly bool? IsDefaultCountryCodeCheckEnabled = null;
		
		public readonly int? CurrencyDecimalPrecision = null;
		
		public readonly bool? GlobalAppendUrlParametersEnabled = null;
		
		public readonly int? UserAccessAuditingInterval = null;
		
		public readonly string ParsedTableColumnPrefix = null;
		
		public readonly string DefaultCountryCode = null;
		
		public readonly string QuotePrefix = null;
		
		public readonly string TimeFormatString = null;
		
		public readonly bool? IgnoreInternalEmail = null;
		
		public readonly bool? NotifyMailboxOwnerOfEmailServerLevelAlerts = null;
		
		public readonly Guid? SystemUserId = null;
		
		public readonly int? YearStartWeekCode = null;
		
		public readonly bool? IsFolderAutoCreatedonSP = null;
		
		public readonly int? LocaleId = null;
		
		public readonly bool? IsActivityAnalysisEnabled = null;
		
		public readonly string ExternalBaseUrl = null;
		
		public readonly bool? SuppressSLA = null;
		
		public readonly bool? AllowAutoResponseCreation = null;
		
		public readonly int? MaxConditionsForMobileOfflineFilters = null;
		
		public readonly bool? IsDuplicateDetectionEnabledForImport = null;
		
		public readonly int? InactivityTimeoutReminderInMins = null;
		
		public readonly int? MaxAppointmentDurationDays = null;
		
		public readonly bool? GetStartedPaneContentEnabled = null;
		
		public readonly int? MobileOfflineSyncInterval = null;
		
		public readonly Guid? BusinessClosureCalendarId = null;
		
		public readonly bool? PowerBiFeatureEnabled = null;
		
		public readonly OptionSetValue FullNameConventionCode = null;
		
		public readonly int? CurrentInvoiceNumber = null;
		
		public readonly int? MaxUploadFileSize = null;
		
		public readonly bool? UseReadForm = null;
		
		public readonly string CampaignPrefix = null;
		
		public readonly string CurrencySymbol = null;
		
		public readonly OptionSetValue ReportScriptErrors = null;
		
		public readonly OptionSetValue DefaultRecurrenceEndRangeType = null;
		
		public readonly Guid? ReportingGroupId = null;
		
		public readonly Guid? DelegatedAdminUserId = null;
		
		public readonly EntityReference BaseCurrencyId = null;
		
		public readonly bool? IsAppMode = null;
		
		public readonly string OrderPrefix = null;
		
		public readonly bool? InactivityTimeoutEnabled = null;
		
		public readonly string OfficeGraphDelveUrl = null;
		
		public readonly OptionSetValue FiscalPeriodFormatPeriod = null;
		
		public readonly string PrivacyStatementUrl = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? PrivilegeUserGroupId = null;
		
		public readonly bool? IsEmailMonitoringAllowed = null;
		
		public readonly OptionSetValue CurrencyFormatCode = null;
		
		public readonly string HighContrastThemeData = null;
		
		public readonly string DefaultThemeData = null;
		
		public readonly string DefaultEmailSettings = null;
		
		public readonly int? UniqueSpecifierLength = null;
		
		public readonly string WidgetProperties = null;
		
		public readonly bool? ShowWeekNumber = null;
		
		public readonly bool? AppDesignerExperienceEnabled = null;
		
		public readonly string DecimalSymbol = null;
		
		public readonly bool? AutoApplySLA = null;
		
		public readonly string AMDesignator = null;
		
		public readonly bool? CascadeStatusUpdate = null;
		
		public readonly int? LanguageCode = null;
		
		public readonly int? NextCustomObjectTypeCode = null;
		
		public readonly bool? IsConflictDetectionEnabledForMobileClient = null;
		
		public readonly string FiscalYearFormat = null;
		
		public readonly bool? EnablePricingOnCreate = null;
		
		public readonly bool? ShowKBArticleDeprecationNotification = null;
		
		public readonly int? TrackingTokenIdDigits = null;
		
		public readonly string GlobalHelpUrl = null;
		
		public readonly string ReferenceSiteMapXml = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly bool? IsDelveActionHubIntegrationEnabled = null;
		
		public readonly string NumberGroupFormat = null;
		
		public readonly int? FiscalPeriodType = null;
		
		public readonly bool? IsOfficeGraphEnabled = null;
		
		public readonly int? NextTrackingNumber = null;
		
		public readonly bool? GlobalHelpUrlEnabled = null;
		
		public readonly bool? AllowAutoUnsubscribeAcknowledgement = null;
		
		public readonly string BingMapsApiKey = null;
		
		public readonly int? CurrentKaNumber = null;
		
		public readonly bool? IsAutoDataCaptureEnabled = null;
		
		public readonly bool? UseLegacyRendering = null;
		
		public readonly int? PinpointLanguageCode = null;
		
		public readonly string InitialVersion = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly bool? GrantAccessToNetworkService = null;
		
		public readonly int? MaxRecordsForExportToExcel = null;
		
		public readonly int? MaxRecordsForLookupFilters = null;
		
		public readonly bool? IsFullTextSearchEnabled = null;
		
		public readonly string ExternalPartyEntitySettings = null;
		
		public readonly bool? IsSOPIntegrationEnabled = null;
		
		public readonly OptionSetValue TimeFormatCode = null;
		
		public readonly bool? DisplayNavigationTour = null;
		
		public readonly bool? OrgInsightsEnabled = null;
		
		public readonly Guid? SampleDataImportId = null;
		
		public readonly int? SessionTimeoutInMins = null;
		
		public readonly int? MobileOfflineMinLicenseProd = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string KMSettings = null;
		
		public readonly bool? GenerateAlertsForInformation = null;
		
		public readonly int? CurrentQuoteNumber = null;
		
		public readonly bool? SocialInsightsEnabled = null;
		
		public readonly bool? UseInbuiltRuleForDefaultPricelistSelection = null;
		
		public readonly int? HashDeltaSubjectCount = null;
		
		public readonly EntityReference AcknowledgementTemplateId = null;
		
		public readonly string OrgDbOrgSettings = null;
		
		public readonly DateTime? MetadataSyncLastTimeOfNeverExpiredDeletedObjects = null;
		
		public readonly string TrackingPrefix = null;
		
		public readonly OptionSetValue PluginTraceLogSetting = null;
		
		public readonly string TokenKey = null;
		
		public readonly int? MaxVerboseLoggingMailbox = null;
		
		public readonly string FiscalPeriodFormat = null;
		
		public readonly string KaPrefix = null;
		
		public readonly string SiteMapXml = null;
		
		public readonly string NumberFormat = null;
		
		public readonly bool? IsDisabled = null;
		
		public readonly int? ExpireChangeTrackingInDays = null;
		
		public readonly bool? IsAppointmentAttachmentSyncEnabled = null;
		
		public readonly Guid? SupportUserId = null;
		
		public readonly int? CurrentKbNumber = null;
		
		public readonly int? LongDateFormatCode = null;
		
		public readonly string SchemaNamePrefix = null;
		
		public readonly bool? IsFiscalPeriodMonthBased = null;
		
		public readonly int? TagMaxAggressiveCycles = null;
		
		public readonly int? MaxSupportedInternetExplorerVersion = null;
		
		public readonly int? MaximumDynamicPropertiesAllowed = null;
		
		public readonly string BulkOperationPrefix = null;
		
		public readonly bool? IsPresenceEnabled = null;
		
		public readonly bool? IsEmailServerProfileContentFilteringEnabled = null;
		
		public readonly int? MailboxPermanentIssueMinRange = null;
		
		public readonly bool? IsPreviewForAutoCaptureEnabled = null;
		
		public readonly int? BaseCurrencyPrecision = null;
		
		public readonly int? TrackingTokenIdBase = null;
		
		public readonly bool? UseSkypeProtocol = null;
		
		public readonly bool? IsMailboxForcedUnlockingEnabled = null;
		
		public readonly string CategoryPrefix = null;
		
		public readonly bool? UsePositionHierarchy = null;
		
		public readonly string ReportingGroupName = null;
		
		public readonly string HashFilterKeywords = null;
		
		public readonly bool? IsFolderBasedTrackingEnabled = null;
		
		public readonly OptionSetValue SharePointDeploymentType = null;
		
		public readonly int? CurrentParsedTableNumber = null;
		
		public readonly bool? EnableBingMapsIntegration = null;
		
		public readonly bool? QuickFindRecordLimitEnabled = null;
		
		public readonly bool? AllowUnresolvedPartiesOnEmailSend = null;
		
		public readonly bool? IsActionCardEnabled = null;
		
		public readonly string BlockedAttachments = null;
		
		public readonly bool? EnableLPAuthoring = null;
		
		public readonly string InvoicePrefix = null;
		
		public readonly bool? IsDuplicateDetectionEnabledForOnlineCreateUpdate = null;
		
		public readonly bool? AllowOutlookScheduledSyncs = null;
		
		public readonly bool? IsAssignedTasksSyncEnabled = null;
		
		public readonly bool? RestrictStatusUpdate = null;
		
		public readonly bool? IsMobileClientOnDemandSyncEnabled = null;
		
		public readonly OptionSetValue FiscalYearFormatYear = null;
		
		public readonly bool? RenderSecureIFrameForEmail = null;
		
		public readonly bool? GenerateAlertsForWarnings = null;
		
		public readonly OptionSetValue EmailConnectionChannel = null;
		
		public readonly string V3CalloutConfigHash = null;
		
		public readonly string DisabledReason = null;
		
		public readonly bool? CortanaProactiveExperienceEnabled = null;
		
		public readonly string DateSeparator = null;
		
		public readonly string CasePrefix = null;
		
		public readonly Guid? PrivReportingGroupId = null;
		
		public readonly string DateFormatString = null;
		
		public readonly bool? IsResourceBookingExchangeSyncEnabled = null;
		
		public readonly int? CalendarType = null;
		
		public readonly int? IncomingEmailExchangeEmailRetrievalBatchSize = null;
		
		public readonly OptionSetValue NegativeFormatCode = null;
		
		public readonly int? MaxFolderBasedTrackingMappings = null;
		
		public readonly bool? ServeStaticResourcesFromAzureCDN = null;
		
		public readonly bool? AutoApplyDefaultonCaseUpdate = null;
		
		public readonly int? FiscalYearDisplayCode = null;
		
		public readonly string ContractPrefix = null;
		
		public readonly int? RecurrenceExpansionSynchCreateMax = null;
		
		public readonly string PMDesignator = null;
		
		public readonly bool? SQMEnabled = null;
		
		public readonly bool? UnresolveEmailAddressIfMultipleMatch = null;
		
		public readonly bool? IsDuplicateDetectionEnabledForOfflineSync = null;
		
		public readonly int? GoalRollupExpiryTime = null;
		
		public readonly string PrivReportingGroupName = null;
		
		public readonly int? MinOutlookSyncInterval = null;
		
		public readonly int? CurrentImportSequenceNumber = null;
		
		public readonly string PostMessageWhitelistDomains = null;
		
		public readonly bool? TaskBasedFlowEnabled = null;
		
		public readonly Guid? IntegrationUserId = null;
		
		public readonly bool? SocialInsightsTermsAccepted = null;
		
		public readonly bool? OfficeAppsAutoDeploymentEnabled = null;
		
		public readonly bool? IsPreviewForEmailMonitoringAllowed = null;
		
		public readonly string KbPrefix = null;
		
		public readonly bool? FiscalSettingsUpdated = null;
		
		public readonly string TimeSeparator = null;
		
		public readonly bool? DisableSocialCare = null;
		
		public readonly bool? IsDuplicateDetectionEnabled = null;
		
		public readonly string ExternalPartyCorrelationKeys = null;
		
		public readonly bool? AllowAutoUnsubscribe = null;
		
		public readonly bool? GenerateAlertsForErrors = null;
		
		public readonly string SqlAccessGroupName = null;
		
		public readonly int? FutureExpansionWindow = null;
		
		public readonly int? MetadataSyncTimestamp = null;
		
		public readonly int? MaximumSLAKPIPerEntityWithActiveSLA = null;
		
		public readonly string SlaPauseStates = null;
		
		public readonly string BaseISOCurrencyCode = null;
		
		public readonly int? MobileOfflineMinLicenseTrial = null;
		
		public readonly bool? EnforceReadOnlyPlugins = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly int? CurrentCaseNumber = null;
		
		public readonly EntityReference DefaultMobileOfflineProfileId = null;
		
		public readonly bool? OOBPriceCalculationEnabled = null;
		
		public readonly int? TagPollingPeriod = null;
		
		public readonly bool? IsMobileOfflineEnabled = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string WebResourceHash = null;
		
		public readonly OptionSetValue FiscalYearFormatSuffix = null;
		
		public readonly int? RecurrenceDefaultNumberOfOccurrences = null;
		
		public readonly int? RecurrenceExpansionJobBatchInterval = null;
		
		public readonly int? RecurrenceExpansionJobBatchSize = null;
		
		public readonly bool? AutoApplyDefaultonCaseCreate = null;
		
		public readonly string ParsedTablePrefix = null;
		
		public readonly bool? IsDelegateAccessEnabled = null;
		
		public readonly bool? IsAutoSaveEnabled = null;
		
		public readonly string NumberSeparator = null;
		
		public readonly int? CurrentCampaignNumber = null;
		
		public readonly int? MaximumEntitiesWithActiveSLA = null;
		
		public readonly int? SortId = null;
		
		public readonly bool? AllowWebExcelExport = null;
		
		public readonly bool? AllowClientMessageBarAd = null;
		
		public readonly bool? AllowUsersSeeAppdownloadMessage = null;
		
		public readonly OptionSetValue WeekStartDayCode = null;
		
		public readonly DateTime? FiscalCalendarStart = null;
		
		public readonly int? MaxDepthForHierarchicalSecurityModel = null;
		
		public readonly int? CurrentOrderNumber = null;
		
		public readonly int? HashMaxCount = null;
		
		public readonly bool? AllowMarketingEmailExecution = null;
		
		public readonly int? MailboxIntermittentIssueMinRange = null;
		
		public readonly OptionSetValue YammerPostMethod = null;
		
		public readonly bool? IsMailboxInactiveBackoffEnabled = null;
		
		public readonly bool? IsHierarchicalSecurityModelEnabled = null;
		
		public readonly bool? EmailCorrelationEnabled = null;
		
		public readonly int? CurrentContractNumber = null;
		
		public readonly int? ExpireSubscriptionsInDays = null;
		
		public readonly int? MaxVerboseLoggingSyncCycles = null;
		
		public readonly string SignupOutlookDownloadFWLink = null;
		
		public readonly bool? TextAnalyticsEnabled = null;
		
		public readonly string FeatureSet = null;
		
		public readonly bool? IsRelationshipInsightsEnabled = null;
		
		public readonly string Picture = null;
		
		public readonly bool? IsUserAccessAuditEnabled = null;
		
		public readonly int? DaysSinceRecordLastModifiedMaxValue = null;
		
		public readonly int? GoalRollupFrequency = null;
		
		public readonly bool? ShareToPreviousOwnerOnAssign = null;
		
		public readonly int? MaximumActiveBusinessProcessFlowsAllowedPerEntity = null;
		
		public readonly bool? RequireApprovalForUserEmail = null;
		
		public readonly bool? RequireApprovalForQueueEmail = null;
		
		public readonly bool? AllowUserFormModePreference = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly string DefaultCrmCustomName = null;
		
		public readonly int? SessionTimeoutReminderInMins = null;
		
		public readonly int? YammerGroupId = null;
		
		public readonly string SocialInsightsInstance = null;
		
		public readonly bool? CreateProductsWithoutParentInActiveState = null;
		
		public readonly bool? EnableMicrosoftFlowIntegration = null;
		
		public readonly Guid? OrganizationId = null;
		
		public readonly bool? YammerOAuthAccessTokenExpired = null;
		
		public readonly string ACIWebEndpointUrl = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly bool? IsExternalSearchIndexEnabled = null;
		
		public readonly bool? SessionTimeoutEnabled = null;
		
		public readonly int? TokenExpiry = null;
		
		public readonly bool? IsEnabledForAllRoles = null;
		
		public readonly OptionSetValue CurrencyDisplayOption = null;
		
		public readonly OptionSetValue ISVIntegrationCode = null;
		
		public readonly EntityReference DefaultEmailServerProfileId = null;
		
		public readonly OptionSetValue DiscountCalculationMethod = null;
		
		public readonly string BaseCurrencySymbol = null;
		
		public readonly bool? IsContactMailingAddressSyncEnabled = null;
		
		public readonly OptionSetValue FiscalYearFormatPrefix = null;
		
		public readonly bool? IsOneDriveEnabled = null;
		
		public readonly bool? AllowAddressBookSyncs = null;
		
		public readonly int? InactivityTimeoutInMins = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string FiscalYearPeriodConnect = null;
		
		public readonly bool? EnableSmartMatching = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? HashMinAddressCount = null;
		
		public readonly bool? AllowEntityOnlyAudit = null;
		
		public readonly bool? ProductRecommendationsEnabled = null;
		
		public readonly int? NegativeCurrencyFormatCode = null;
		
		public readonly string YammerNetworkPermalink = null;
		
		public readonly int? MaximumTrackingNumber = null;
		
		public readonly int? PricingDecimalPrecision = null;
		
		public readonly int? CurrentBulkOperationNumber = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;

        public new static class Options
        {
            public enum DateFormatCode
            {

            }
            public enum FullNameConventionCode
            {
                LastNameFirstName = 0,
                FirstName = 1,
                LastNameFirstNameMiddleInitial = 2,
                FirstNameMiddleInitialLastName = 3,
                LastNameFirstNameMiddleName = 4,
                FirstNameMiddleNameLastName = 5,
                LastNameSpaceFirstName = 6,
                LastNameNoSpaceFirstName = 7
            }
            public enum ReportScriptErrors
            {
                NoPreferenceForSendingAnErrorReportToMicrosoftAboutMicrosoftDynamics365 = 0,
                AskMeForPermissionToSendAnErrorReportToMicrosoft = 1,
                AutomaticallySendAnErrorReportToMicrosoftWithoutAskingMeForPermission = 2,
                NeverSendAnErrorReportToMicrosoftAboutMicrosoftDynamics365 = 3
            }
            public enum DefaultRecurrenceEndRangeType
            {
                NoEndDate = 1,
                NumberOfOccurrences = 2,
                EndByDate = 3
            }
            public enum FiscalPeriodFormatPeriod
            {
                Quarter0 = 1,
                Q0 = 2,
                P0 = 3,
                Month0 = 4,
                M0 = 5,
                Semester0 = 6,
                MonthName = 7
            }
            public enum CurrencyFormatCode
            {
                _123 = 0,
                _1231 = 1,
                _1232 = 2,
                _1233 = 3
            }
            public enum TimeFormatCode
            {

            }
            public enum PluginTraceLogSetting
            {
                Off = 0,
                Exception = 1,
                All = 2
            }
            public enum SharePointDeploymentType
            {
                Online = 0,
                OnPremises = 1
            }
            public enum FiscalYearFormatYear
            {
                YYYY = 1,
                YY = 2,
                GGYY = 3
            }
            public enum EmailConnectionChannel
            {
                ServerSideSynchronization = 0,
                MicrosoftDynamics365EmailRouter = 1
            }
            public enum NegativeFormatCode
            {
                Brackets = 0,
                Dash = 1,
                DashPlusSpace = 2,
                TrailingDash = 3,
                SpacePlusTrailingDash = 4
            }
            public enum FiscalYearFormatSuffix
            {
                FY = 1,
                FiscalYear = 2,

            }
            public enum WeekStartDayCode
            {

            }
            public enum YammerPostMethod
            {
                Public = 0,
                Private = 1
            }
            public enum CurrencyDisplayOption
            {
                CurrencySymbol = 0,
                CurrencyCode = 1
            }
            public enum ISVIntegrationCode
            {
                None = 0,
                Web = 1,
                OutlookWorkstationClient = 2,
                WebOutlookWorkstationClient = 3,
                OutlookLaptopClient = 4,
                WebOutlookLaptopClient = 5,
                Outlook = 6,
                All = 7
            }
            public enum DiscountCalculationMethod
            {
                LineItem = 0,
                PerUnit = 1
            }
            public enum FiscalYearFormatPrefix
            {
                FY = 1,

            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("workflowlog")]
	public class WorkflowLog : Entity
    {
        public const string EntityLogicalName = "workflowlog";
        public WorkflowLog() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("workflowlogid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["workflowlogid"] = value;
            }
        }
		
		public readonly EntityReference OwnerId = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string StageName = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? CompletedOn = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string ActivityName = null;
		
		public readonly string InteractionActivityResult = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly string Message = null;
		
		public readonly OptionSetValue Status = null;
		
		public readonly Guid? WorkflowLogId = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference ChildWorkflowInstanceId = null;
		
		public readonly EntityReference AsyncOperationId = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly DateTime? StartedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string StepName = null;
		
		public readonly int? Duration = null;
		
		public readonly int? ErrorCode = null;

        public new static class Options
        {
            public enum Status
            {
                InProgress = 1,
                Succeeded = 2,
                Failed = 3,
                Canceled = 4,
                Waiting = 5
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("entitlementchannel")]
	public class EntitlementChannel : Entity
    {
        public const string EntityLogicalName = "entitlementchannel";
        public EntitlementChannel() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("entitlementchannelid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["entitlementchannelid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference EntitlementId = null;
		
		public readonly Guid? EntitlementChannelId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue Channel = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly decimal? RemainingTerms = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly decimal? TotalTerms = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;

        public new static class Options
        {
            public enum Channel
            {
                Phone = 1,
                Email = 2,
                Web = 3,
                Facebook = 2483,
                Twitter = 3986
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("customerrelationship")]
	public class CustomerRelationship : Entity
    {
        public const string EntityLogicalName = "customerrelationship";
        public CustomerRelationship() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("customerrelationshipid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["customerrelationshipid"] = value;
            }
        }
		
		public readonly string PartnerRoleDescription = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference PartnerRoleId = null;
		
		public readonly EntityReference PartnerId = null;
		
		public readonly Guid? UniqueDscId = null;
		
		public readonly EntityReference ConverseRelationshipId = null;
		
		public readonly EntityReference CustomerId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly Guid? CustomerRelationshipId = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly string CustomerRoleDescription = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference CustomerRoleId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("importmap")]
	public class ImportMap : Entity
    {
        public const string EntityLogicalName = "importmap";
        public ImportMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("importmapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["importmapid"] = value;
            }
        }
		
		public readonly string Description = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly bool? IsValidForImport = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly string TargetUserIdentifierForSourceCRMUserLink = null;
		
		public readonly bool? IsWizardCreated = null;
		
		public readonly string MapCustomizations = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly string SourceUserIdentifierForSourceDataSourceUserLink = null;
		
		public readonly string SourceUserIdentifierForSourceCRMUserLink = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly OptionSetValue EntitiesPerFile = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? ImportMapId = null;
		
		public readonly OptionSetValue SourceType = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly OptionSetValue ImportMapType = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly OptionSetValue TargetEntity = null;
		
		public readonly string Source = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum EntitiesPerFile
            {
                SingleEntityPerFile = 1,
                MultipleEntitiesPerFile = 2
            }
            public enum SourceType
            {
                MapForSalesForceComFullDataExport = 1,
                MapForSalesForceComReportExport = 2,
                MapForSalesForceComContactAndAccountReportExport = 3,
                MicrosoftOfficeOutlook2010WithBusinessContactManager = 4,
                GenericMapForContactAndAccount = 5
            }
            public enum ImportMapType
            {
                Standard = 1,
                OutOfBox = 2,
                InProcess = 3
            }
            public enum TargetEntity
            {
                DefaultValue = 0
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("subscriptionsyncentryoutlook")]
	public class SubscriptionSyncEntryOutlook : Entity
    {
        public const string EntityLogicalName = "subscriptionsyncentryoutlook";
        public SubscriptionSyncEntryOutlook() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("subscriptionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["subscriptionid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? ObjectId = null;
		
		public readonly Guid? SubscriptionId = null;
		
		public readonly int? SyncState = null;
		
		public readonly int? ObjectTypeCode = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("queueitem")]
	public class QueueItem : Entity
    {
        public const string EntityLogicalName = "queueitem";
        public QueueItem() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("queueitemid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["queueitemid"] = value;
            }
        }
		
		public readonly EntityReference QueueId = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Title = null;
		
		public readonly int? Status = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly OptionSetValue ObjectTypeCode = null;
		
		public readonly string ToRecipients = null;
		
		public readonly EntityReference ObjectId = null;
		
		public readonly DateTime? EnteredOn = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly int? State = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference WorkerId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? QueueItemId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly int? Priority = null;
		
		public readonly string Sender = null;
		
		public readonly DateTime? WorkerIdModifiedOn = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference OwnerId = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly DateTime? ModifiedOn = null;

        public new static class Options
        {
            public enum ObjectTypeCode
            {
                DefaultValue = 0
            }
            public enum StatusCode
            {
                Inactive = 2,
                Active = 1
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("appointment")]
	public class Appointment : Entity
    {
        public const string EntityLogicalName = "appointment";
        public Appointment() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }
		
		public readonly Guid? ProcessId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? ActualEnd = null;
		
		public readonly DateTime? SortDate = null;
		
		public readonly string Description = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly string Category = null;
		
		public readonly bool? IsAllDayEvent = null;
		
		public readonly bool? IsRegularActivity = null;
		
		public readonly string ActivityTypeCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityCollection requiredattendees = null;
		
		public readonly OptionSetValue InstanceTypeCode = null;
		
		public readonly string Location = null;
		
		public readonly string GlobalObjectId = null;
		
		public readonly Guid? SeriesId = null;
		
		public readonly DateTime? ActualStart = null;
		
		public readonly EntityCollection OptionalAttendees = null;
		
		public readonly bool? IsMapiPrivate = null;
		
		public readonly string TraversedPath = null;
		
		public readonly EntityReference ServiceId = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly Guid? ActivityId = null;
		
		public readonly string Subcategory = null;
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly string ModifiedFieldsMask = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly int? ScheduledDurationMinutes = null;
		
		public readonly int? OutlookOwnerApptId = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? StageId = null;
		
		public readonly Guid? SubscriptionId = null;
		
		public readonly int? ActualDurationMinutes = null;
		
		public readonly DateTime? OriginalStartDate = null;
		
		public readonly bool? IsBilled = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? AttachmentCount = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Subject = null;
		
		public readonly string ActivityAdditionalParams = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly bool? IsWorkflowCreated = null;
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly OptionSetValue AttachmentErrors = null;
		
		public readonly EntityCollection Organizer = null;

        public new static class Options
        {
            public enum StateCode
            {
                Open = 0,
                Completed = 1,
                Canceled = 2,
                Scheduled = 3
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                ServiceActivity = 4214,
                OpportunityClose = 4208,
                OrderClose = 4209,
                QuoteClose = 4211,
                CaseResolution = 4206,
                Task = 4212,
                CampaignResponse = 4401,
                CampaignActivity = 4402,
                BulkOperation = 4406,
                RecurringAppointment = 4251
            }
            public enum InstanceTypeCode
            {
                NotRecurring = 0,
                RecurringMaster = 1,
                RecurringInstance = 2,
                RecurringException = 3,
                RecurringFutureException = 4
            }
            public enum StatusCode
            {
                Free = 1,
                Tentative = 2,
                Completed = 3,
                Canceled = 4,
                Busy = 5,
                OutOfOffice = 6
            }
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum AttachmentErrors
            {
                None = 0,
                TheAppointmentWasSavedAsAMicrosoftDynamics365AppointmentRecordButNotAllTheAttachmentsCouldBeSavedWithItAnAttachmentCannotBeSavedIfItIsBlockedOrIfItsFileTypeIsInvalid = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("rollupproperties")]
	public class RollupProperties : Entity
    {
        public const string EntityLogicalName = "rollupproperties";
        public RollupProperties() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("rolluppropertiesid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["rolluppropertiesid"] = value;
            }
        }
		
		public readonly Guid? BootstrapRollupAsyncJobId = null;
		
		public readonly OptionSetValue InitialValueCalculationStatus = null;
		
		public readonly int? BootstrapStepNumber = null;
		
		public readonly int? AggregateEntityTypeCode = null;
		
		public readonly string DataType = null;
		
		public readonly string AggregateRelationshipName = null;
		
		public readonly DateTime? LastCalculationTime = null;
		
		public readonly string RollupAttributeLogicalName = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly string RollupEntityPrimaryKeyPhysicalName = null;
		
		public readonly Guid? IncrementalRollupAsyncJobId = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly bool? AllowHierarchyOnSource = null;
		
		public readonly string SourceHierarchicalRelationshipName = null;
		
		public readonly Guid? RollupPropertiesId = null;
		
		public readonly int? BootstrapCurrentDepth = null;
		
		public readonly string AggregateEntityLogicalName = null;
		
		public readonly int? IsActivityPartyIncluded = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? RollupEntityTypeCode = null;
		
		public readonly string RollupStateAttributePhysicalName = null;
		
		public readonly string RollupEntityBaseTableName = null;
		
		public readonly string AggregateFilterAttributes = null;
		
		public readonly int? BootstrapRetryCount = null;
		
		public readonly string AggregateAttributeLogicalName = null;
		
		public readonly string RollupEntityLogicalName = null;
		
		public readonly string RollupFilterAttributes = null;
		
		public readonly int? BootstrapTargetPointer = null;
		
		public readonly OptionSetValue AggregateType = null;

        public new static class Options
        {
            public enum InitialValueCalculationStatus
            {
                Pending = 0,
                InProgress = 1,
                Paused = 2,
                Completed = 3,
                Failed = 4
            }
            public enum StatusCode
            {
                Valid = 1,
                Invalid = 2
            }
            public enum StateCode
            {
                Valid = 0,
                Invalid = 1
            }
            public enum AggregateType
            {
                Count = 0,
                Sum = 1,
                Average = 2,
                Min = 3,
                Max = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("systemuserroles")]
	public class SystemUserRoles : Entity
    {
        public const string EntityLogicalName = "systemuserroles";
        public SystemUserRoles() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("systemuserroleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["systemuserroleid"] = value;
            }
        }
		
		public readonly Guid? RoleId = null;
		
		public readonly Guid? SystemUserId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? SystemUserRoleId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("userquery")]
	public class UserQuery : Entity
    {
        public const string EntityLogicalName = "userquery";
        public UserQuery() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("userqueryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["userqueryid"] = value;
            }
        }
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string ConditionalFormatting = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string Description = null;
		
		public readonly string ColumnSetXml = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string ReturnedTypeCode = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwningUser = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly Guid? UserQueryId = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference ParentQueryId = null;
		
		public readonly string LayoutXml = null;
		
		public readonly int? QueryType = null;
		
		public readonly string AdvancedGroupBy = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly string FetchXml = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Active = 1,
                All = 3,
                Inactive = 2
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("publisher")]
	public class Publisher : Entity
    {
        public const string EntityLogicalName = "publisher";
        public Publisher() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("publisherid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["publisherid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly string Address1_UPSZone = null;
		
		public readonly string Address2_City = null;
		
		public readonly string UniqueName = null;
		
		public readonly string CustomizationPrefix = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? PinpointPublisherId = null;
		
		public readonly string Address2_PostalCode = null;
		
		public readonly double? Address2_Longitude = null;
		
		public readonly string EMailAddress = null;
		
		public readonly string Address2_Line3 = null;
		
		public readonly string Address1_StateOrProvince = null;
		
		public readonly string Address2_Line1 = null;
		
		public readonly string PinpointPublisherDefaultLocale = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string Address1_PostalCode = null;
		
		public readonly string Address2_Country = null;
		
		public readonly OptionSetValue Address1_AddressTypeCode = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string FriendlyName = null;
		
		public readonly string Address1_Line2 = null;
		
		public readonly string Address1_City = null;
		
		public readonly double? Address1_Longitude = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string Address2_Fax = null;
		
		public readonly OptionSetValue Address1_ShippingMethodCode = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly double? Address1_Latitude = null;
		
		public readonly string Address1_Country = null;
		
		public readonly string Address2_StateOrProvince = null;
		
		public readonly string Address1_Telephone2 = null;
		
		public readonly string Address2_Line2 = null;
		
		public readonly string Address1_County = null;
		
		public readonly Guid? PublisherId = null;
		
		public readonly string Address1_Telephone3 = null;
		
		public readonly string Address1_Fax = null;
		
		public readonly string Address1_Line3 = null;
		
		public readonly string Address2_County = null;
		
		public readonly string Address1_Name = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string SupportingWebsiteUrl = null;
		
		public readonly int? Address2_UTCOffset = null;
		
		public readonly int? CustomizationOptionValuePrefix = null;
		
		public readonly string Address2_Name = null;
		
		public readonly Guid? Address1_AddressId = null;
		
		public readonly string Address2_Telephone1 = null;
		
		public readonly string Address2_Telephone2 = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string Address2_Telephone3 = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string Address1_Line1 = null;
		
		public readonly double? Address2_Latitude = null;
		
		public readonly OptionSetValue Address2_ShippingMethodCode = null;
		
		public readonly OptionSetValue Address2_AddressTypeCode = null;
		
		public readonly Guid? Address2_AddressId = null;
		
		public readonly int? Address1_UTCOffset = null;
		
		public readonly string Address1_PostOfficeBox = null;
		
		public readonly string Description = null;
		
		public readonly bool? IsReadonly = null;
		
		public readonly string Address2_UPSZone = null;
		
		public readonly string Address2_PostOfficeBox = null;
		
		public readonly string Address1_Telephone1 = null;

        public new static class Options
        {
            public enum Address1_AddressTypeCode
            {
                DefaultValue = 1
            }
            public enum Address1_ShippingMethodCode
            {
                DefaultValue = 1
            }
            public enum Address2_ShippingMethodCode
            {
                DefaultValue = 1
            }
            public enum Address2_AddressTypeCode
            {
                DefaultValue = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("systemusersyncmappingprofiles")]
	public class SystemUserSyncMappingProfiles : Entity
    {
        public const string EntityLogicalName = "systemusersyncmappingprofiles";
        public SystemUserSyncMappingProfiles() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("systemusersyncmappingprofileid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["systemusersyncmappingprofileid"] = value;
            }
        }
		
		public readonly Guid? SyncAttributeMappingProfileId = null;
		
		public readonly Guid? SystemUserId = null;
		
		public readonly Guid? SystemUserSyncMappingProfileId = null;
		
		public readonly int? VersionNumber = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("userentityuisettings")]
	public class UserEntityUISettings : Entity
    {
        public const string EntityLogicalName = "userentityuisettings";
        public UserEntityUISettings() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("userentityuisettingsid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["userentityuisettingsid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly string InsertIntoEmailMRUXml = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly string TabOrderXml = null;
		
		public readonly int? ObjectTypeCode = null;
		
		public readonly string MRUXml = null;
		
		public readonly string RecentlyViewedXml = null;
		
		public readonly string LastViewedFormXml = null;
		
		public readonly Guid? UserEntityUISettingsId = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly string ReadingPaneXml = null;
		
		public readonly bool? ShowInAddressBook = null;
		
		public readonly string LookupMRUXml = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("competitor")]
	public class Competitor : Entity
    {
        public const string EntityLogicalName = "competitor";
        public Competitor() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("competitorid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["competitorid"] = value;
            }
        }
		
		public readonly string YomiName = null;
		
		public readonly string Address2_Telephone2 = null;
		
		public readonly int? ReportingYear = null;
		
		public readonly string Address2_PostOfficeBox = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly string WebSiteUrl = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly string Address1_Line3 = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly double? WinPercentage = null;
		
		public readonly string KeyProduct = null;
		
		public readonly double? Address1_Latitude = null;
		
		public readonly string Address1_Telephone2 = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly double? Address1_Longitude = null;
		
		public readonly string Address2_Composite = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string Overview = null;
		
		public readonly string Address2_Line1 = null;
		
		public readonly string Weaknesses = null;
		
		public readonly string ReferenceInfoUrl = null;
		
		public readonly string StockExchange = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string Address2_Telephone1 = null;
		
		public readonly string Address2_City = null;
		
		public readonly string Address2_County = null;
		
		public readonly string Address1_Telephone3 = null;
		
		public readonly Guid? StageId = null;
		
		public readonly Guid? Address1_AddressId = null;
		
		public readonly string Address1_City = null;
		
		public readonly string Address2_Fax = null;
		
		public readonly Money ReportedRevenue_Base = null;
		
		public readonly string Address2_PostalCode = null;
		
		public readonly string Address1_Composite = null;
		
		public readonly string Address1_UPSZone = null;
		
		public readonly string Opportunities = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string TickerSymbol = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly OptionSetValue Address2_ShippingMethodCode = null;
		
		public readonly string Address1_Line2 = null;
		
		public readonly string Address2_Name = null;
		
		public readonly string Address1_Line1 = null;
		
		public readonly string Address1_PostOfficeBox = null;
		
		public readonly Guid? CompetitorId = null;
		
		public readonly OptionSetValue Address1_ShippingMethodCode = null;
		
		public readonly string Address2_UPSZone = null;
		
		public readonly string Address2_Telephone3 = null;
		
		public readonly int? Address2_UTCOffset = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly double? Address2_Latitude = null;
		
		public readonly int? ReportingQuarter = null;
		
		public readonly OptionSetValue Address1_AddressTypeCode = null;
		
		public readonly string Strengths = null;
		
		public readonly OptionSetValue Address2_AddressTypeCode = null;
		
		public readonly string TraversedPath = null;
		
		public readonly string Threats = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string Address2_Line3 = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly int? Address1_UTCOffset = null;
		
		public readonly Money ReportedRevenue = null;
		
		public readonly string Address2_StateOrProvince = null;
		
		public readonly string Address2_Country = null;
		
		public readonly double? Address2_Longitude = null;
		
		public readonly string Address1_Telephone1 = null;
		
		public readonly string Address1_Country = null;
		
		public readonly DateTime? CreatedOn = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string Address1_County = null;
		
		public readonly string Address1_PostalCode = null;
		
		public readonly string Address2_Line2 = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string Address1_Name = null;
		
		public readonly string Address1_StateOrProvince = null;
		
		public readonly string Address1_Fax = null;
		
		public readonly Guid? Address2_AddressId = null;

        public new static class Options
        {
            public enum Address2_ShippingMethodCode
            {
                DefaultValue = 1
            }
            public enum Address1_ShippingMethodCode
            {
                DefaultValue = 1
            }
            public enum Address1_AddressTypeCode
            {
                DefaultValue = 1
            }
            public enum Address2_AddressTypeCode
            {
                DefaultValue = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("actioncarduserstate")]
	public class ActionCardUserState : Entity
    {
        public const string EntityLogicalName = "actioncarduserstate";
        public ActionCardUserState() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("actioncarduserstateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["actioncarduserstateid"] = value;
            }
        }
		
		public readonly Guid? ActionCardUserStateId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly DateTime? StartDate = null;
		
		public readonly EntityReference ActionCardId = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly OptionSetValue State = null;
		
		public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum State
            {
                Active = 0,
                Dismissed = 1,
                Completed = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("postfollow")]
	public class PostFollow : Entity
    {
        public const string EntityLogicalName = "postfollow";
        public PostFollow() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("postfollowid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["postfollowid"] = value;
            }
        }
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? PostFollowId = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? YammerPostState = null;
		
		public readonly int? YammerRetryCount = null;
		
		public readonly bool? PostToYammer = null;
		
		public readonly int? VersionNumber = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("postregarding")]
	public class PostRegarding : Entity
    {
        public const string EntityLogicalName = "postregarding";
        public PostRegarding() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("postregardingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["postregardingid"] = value;
            }
        }
		
		public readonly Guid? PostRegardingId = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly EntityReference RegardingObjectOwnerId = null;
		
		public readonly string RegardingObjectTypeCodeForSharing = null;
		
		public readonly EntityReference RegardingObjectOwningBusinessUnit = null;
		
		public readonly DateTime? LatestManualPostModifiedOn = null;
		
		public readonly DateTime? LatestAutoPostModifiedOn = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("postrole")]
	public class PostRole : Entity
    {
        public const string EntityLogicalName = "postrole";
        public PostRole() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("postroleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["postroleid"] = value;
            }
        }
		
		public readonly EntityReference PostId = null;
		
		public readonly Guid? PostRoleId = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly OptionSetValue Type = null;
		
		public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum Type
            {
                Regarding = 1,
                Mentioning = 2,
                MentioningAndRegarding = 3,
                Topic = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("postlike")]
	public class PostLike : Entity
    {
        public const string EntityLogicalName = "postlike";
        public PostLike() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("postlikeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["postlikeid"] = value;
            }
        }
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference PostId = null;
		
		public readonly Guid? PostLikeId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("postcomment")]
	public class PostComment : Entity
    {
        public const string EntityLogicalName = "postcomment";
        public PostComment() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("postcommentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["postcommentid"] = value;
            }
        }
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? PostCommentId = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Text = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference PostId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("salesliterature")]
	public class SalesLiterature : Entity
    {
        public const string EntityLogicalName = "salesliterature";
        public SalesLiterature() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("salesliteratureid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["salesliteratureid"] = value;
            }
        }
		
		public readonly DateTime? ExpirationDate = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly string KeyWords = null;
		
		public readonly bool? IsCustomerViewable = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? StageId = null;
		
		public readonly Guid? SalesLiteratureId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference SubjectId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference EmployeeContactId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? VersionNumber = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly OptionSetValue LiteratureTypeCode = null;
		
		public readonly string Description = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly bool? HasAttachments = null;
		
		public readonly string TraversedPath = null;
		
		public readonly Guid? ProcessId = null;

        public new static class Options
        {
            public enum LiteratureTypeCode
            {
                Presentation = 0,
                ProductSheet = 1,
                PoliciesAndProcedures = 2,
                SalesLiterature = 3,
                Spreadsheets = 4,
                News = 5,
                Bulletins = 6,
                PriceSheets = 7,
                Manuals = 8,
                CompanyBackground = 9,
                MarketingCollateral = 100001
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sqlencryptionaudit")]
	public class SqlEncryptionAudit : Entity
    {
        public const string EntityLogicalName = "sqlencryptionaudit";
        public SqlEncryptionAudit() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("createdon")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["createdon"] = value;
            }
        }
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? CreatedOn = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("uom")]
	public class UoM : Entity
    {
        public const string EntityLogicalName = "uom";
        public UoM() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("uomid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["uomid"] = value;
            }
        }
		
		public readonly EntityReference BaseUoM = null;
		
		public readonly bool? IsScheduleBaseUoM = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly Guid? UoMId = null;
		
		public readonly EntityReference CreatedByExternalParty = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference UoMScheduleId = null;
		
		public readonly decimal? Quantity = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? OrganizationId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedByExternalParty = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("owner")]
	public class Owner : Entity
    {
        public const string EntityLogicalName = "owner";
        public Owner() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("ownerid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["ownerid"] = value;
            }
        }
		
		public readonly Guid? OwnerId = null;
		
		public readonly string OwnerIdType = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly string YomiName = null;
		
		public readonly int? VersionNumber = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("processtrigger")]
	public class ProcessTrigger : Entity
    {
        public const string EntityLogicalName = "processtrigger";
        public ProcessTrigger() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("processtriggerid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["processtriggerid"] = value;
            }
        }
		
		public readonly string ControlName = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly EntityReference FormId = null;
		
		public readonly string PrimaryEntityTypeCode = null;
		
		public readonly Guid? ProcessTriggerId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly Guid? MethodId = null;
		
		public readonly OptionSetValue PipelineStage = null;
		
		public readonly OptionSetValue ControlType = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? OwningBusinessUnit = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? OwningUser = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly Guid? ProcessTriggerIdUnique = null;
		
		public readonly OptionSetValue Scope = null;
		
		public readonly EntityReference ProcessId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string Event = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly int? VersionNumber = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum PrimaryEntityTypeCode
            {

            }
            public enum PipelineStage
            {
                DefaultValue = 0,
                BeforeMainOperation = 20,
                AfterMainOperation = 40
            }
            public enum ControlType
            {
                Attribute = 1,
                FormTab = 2
            }
            public enum Scope
            {
                Form = 1,
                Entity = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("stringmap")]
	public class StringMap : Entity
    {
        public const string EntityLogicalName = "stringmap";
        public StringMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("stringmapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["stringmapid"] = value;
            }
        }
		
		public readonly int? DisplayOrder = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string ObjectTypeCode = null;
		
		public readonly Guid? OrganizationId = null;
		
		public readonly string Value = null;
		
		public readonly int? LangId = null;
		
		public readonly string AttributeName = null;
		
		public readonly Guid? StringMapId = null;
		
		public readonly int? AttributeValue = null;

        public new static class Options
        {
            public enum ObjectTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("untrackedemail")]
	public class UntrackedEmail : Entity
    {
        public const string EntityLogicalName = "untrackedemail";
        public UntrackedEmail() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string ActivityTypeCode = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string ExchangeWebLink = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string Description = null;
		
		public readonly Guid? ActivityId = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference ModifiedBy = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Subject = null;
		
		public readonly string ExchangeItemId = null;

        public new static class Options
        {
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                ServiceActivity = 4214,
                OpportunityClose = 4208,
                OrderClose = 4209,
                QuoteClose = 4211,
                CaseResolution = 4206,
                Task = 4212,
                CampaignResponse = 4401,
                CampaignActivity = 4402,
                BulkOperation = 4406,
                RecurringAppointment = 4251
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("roletemplateprivileges")]
	public class RoleTemplatePrivileges : Entity
    {
        public const string EntityLogicalName = "roletemplateprivileges";
        public RoleTemplatePrivileges() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("roletemplateprivilegeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["roletemplateprivilegeid"] = value;
            }
        }
		
		public readonly bool? Upgrading = null;
		
		public readonly Guid? RoleTemplateId = null;
		
		public readonly bool? IsDeep = null;
		
		public readonly Guid? PrivilegeId = null;
		
		public readonly Guid? RoleTemplatePrivilegeId = null;
		
		public readonly bool? IsBasic = null;
		
		public readonly bool? IsGlobal = null;
		
		public readonly bool? IsLocal = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("mailmergetemplate")]
	public class MailMergeTemplate : Entity
    {
        public const string EntityLogicalName = "mailmergetemplate";
        public MailMergeTemplate() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("mailmergetemplateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["mailmergetemplateid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly int? FileSize = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly int? LanguageCode = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly bool? IsPersonal = null;
		
		public readonly int? VersionNumber = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly string DefaultFilter = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly string FileName = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue MailMergeType = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly Guid? MailMergeTemplateId = null;
		
		public readonly string TemplateTypeCode = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Guid? MailMergeTemplateIdUnique = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly string ParameterXml = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly OptionSetValue DocumentFormat = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly string MimeType = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string Body = null;
		
		public readonly string Description = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum MailMergeType
            {
                Letter = 1,
                EmailMessage = 2,
                Envelope = 3,
                Labels = 4,
                Quotes = 5,
                Fax = 6
            }
            public enum TemplateTypeCode
            {
                Quote = 1084
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum DocumentFormat
            {
                _2003 = 1,
                _2007 = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("contact")]
	public class Contact : Entity
    {
        public const string EntityLogicalName = "contact";
        public Contact() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("contactid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["contactid"] = value;
            }
        }
		
		public readonly string Address2_Line2 = null;
		
		public readonly string Address3_StateOrProvince = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly string Address3_PostOfficeBox = null;
		
		public readonly bool? IsPrivate = null;
		
		public readonly string FtpSiteUrl = null;
		
		public readonly string YomiMiddleName = null;
		
		public readonly Money Aging90 = null;
		
		public readonly string Address2_County = null;
		
		public readonly EntityReference DefaultPriceLevelId = null;
		
		public readonly string MiddleName = null;
		
		public readonly string Address1_Line3 = null;
		
		public readonly double? Address1_Latitude = null;
		
		public readonly bool? DoNotFax = null;
		
		public readonly Money Aging30 = null;
		
		public readonly OptionSetValue Address3_FreightTermsCode = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly OptionSetValue Address1_AddressTypeCode = null;
		
		public readonly string Company = null;
		
		public readonly string TimeSpentByMeOnEmailAndMeetings = null;
		
		public readonly bool? IsAutoCreate = null;
		
		public readonly EntityReference ParentCustomerId = null;
		
		public readonly string YomiFullName = null;
		
		public readonly string Address1_County = null;
		
		public readonly string Address2_Line1 = null;
		
		public readonly Money Aging90_Base = null;
		
		public readonly string MobilePhone = null;
		
		public readonly string ManagerPhone = null;
		
		public readonly bool? DoNotSendMM = null;
		
		public readonly OptionSetValue PreferredContactMethodCode = null;
		
		public readonly EntityReference CreatedByExternalParty = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string Address3_City = null;
		
		public readonly string YomiFirstName = null;
		
		public readonly string Address1_Name = null;
		
		public readonly string ExternalUserIdentifier = null;
		
		public readonly string Address1_Telephone1 = null;
		
		public readonly string Address1_PostalCode = null;
		
		public readonly EntityReference PreferredEquipmentId = null;
		
		public readonly string NickName = null;
		
		public readonly string Address3_Country = null;
		
		public readonly OptionSetValue Address2_AddressTypeCode = null;
		
		public readonly OptionSetValue CustomerTypeCode = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly bool? IsBackofficeCustomer = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly string Address3_Line2 = null;
		
		public readonly DateTime? LastUsedInCampaign = null;
		
		public readonly string EmployeeId = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly bool? ParticipatesInWorkflow = null;
		
		public readonly double? Address3_Longitude = null;
		
		public readonly string Department = null;
		
		public readonly bool? DoNotPostalMail = null;
		
		public readonly string Address2_PostOfficeBox = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly OptionSetValue AccountRoleCode = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly string Address2_Country = null;
		
		public readonly string Address3_Telephone3 = null;
		
		public readonly Guid? Address2_AddressId = null;
		
		public readonly double? Address2_Latitude = null;
		
		public readonly Money Aging60 = null;
		
		public readonly bool? MarketingOnly = null;
		
		public readonly string ChildrensNames = null;
		
		public readonly string Address1_Line1 = null;
		
		public readonly double? Address3_Latitude = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly string Address1_Telephone2 = null;
		
		public readonly string Address3_PostalCode = null;
		
		public readonly string Address2_City = null;
		
		public readonly OptionSetValue Address3_ShippingMethodCode = null;
		
		public readonly string Home2 = null;
		
		public readonly EntityReference ParentContactId = null;
		
		public readonly string Address3_Fax = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly int? Address2_UTCOffset = null;
		
		public readonly bool? CreditOnHold = null;
		
		public readonly OptionSetValue Address3_AddressTypeCode = null;
		
		public readonly string AssistantPhone = null;
		
		public readonly OptionSetValue HasChildrenCode = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly double? Address2_Longitude = null;
		
		public readonly string Address1_City = null;
		
		public readonly Guid? Address1_AddressId = null;
		
		public readonly Money AnnualIncome = null;
		
		public readonly string GovernmentId = null;
		
		public readonly string Address1_Country = null;
		
		public readonly string AssistantName = null;
		
		public readonly string Business2 = null;
		
		public readonly string Telephone2 = null;
		
		public readonly OptionSetValue TerritoryCode = null;
		
		public readonly bool? DoNotPhone = null;
		
		public readonly OptionSetValue Address1_ShippingMethodCode = null;
		
		public readonly OptionSetValue PaymentTermsCode = null;
		
		public readonly string Address2_Line3 = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string FullName = null;
		
		public readonly string Address1_Line2 = null;
		
		public readonly string Description = null;
		
		public readonly string EMailAddress3 = null;
		
		public readonly OptionSetValue GenderCode = null;
		
		public readonly string Address2_Fax = null;
		
		public readonly OptionSetValue Address2_FreightTermsCode = null;
		
		public readonly string Address2_Telephone2 = null;
		
		public readonly Guid? ContactId = null;
		
		public readonly EntityReference PreferredSystemUserId = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string Address2_Composite = null;
		
		public readonly EntityReference ModifiedByExternalParty = null;
		
		public readonly DateTime? BirthDate = null;
		
		public readonly string Address1_StateOrProvince = null;
		
		public readonly string Pager = null;
		
		public readonly OptionSetValue FamilyStatusCode = null;
		
		public readonly string EMailAddress2 = null;
		
		public readonly string Address1_UPSZone = null;
		
		public readonly Guid? StageId = null;
		
		public readonly string Salutation = null;
		
		public readonly string Address1_Fax = null;
		
		public readonly string Address3_Line3 = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string Address1_PostOfficeBox = null;
		
		public readonly OptionSetValue CustomerSizeCode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string Address3_County = null;
		
		public readonly string Address3_Telephone1 = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly string Telephone3 = null;
		
		public readonly EntityReference MasterId = null;
		
		public readonly Money Aging60_Base = null;
		
		public readonly string Address3_Line1 = null;
		
		public readonly bool? Merged = null;
		
		public readonly string Address2_StateOrProvince = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly bool? DoNotEMail = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string Address3_PrimaryContactName = null;
		
		public readonly string Fax = null;
		
		public readonly OptionSetValue PreferredAppointmentDayCode = null;
		
		public readonly EntityReference OriginatingLeadId = null;
		
		public readonly string LastName = null;
		
		public readonly DateTime? Anniversary = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly string Address1_Telephone3 = null;
		
		public readonly string Address1_PrimaryContactName = null;
		
		public readonly bool? DoNotBulkPostalMail = null;
		
		public readonly string Address3_UPSZone = null;
		
		public readonly int? NumberOfChildren = null;
		
		public readonly OptionSetValue ShippingMethodCode = null;
		
		public readonly string YomiLastName = null;
		
		public readonly string FirstName = null;
		
		public readonly Guid? Address3_AddressId = null;
		
		public readonly string Address2_PostalCode = null;
		
		public readonly string WebSiteUrl = null;
		
		public readonly string Telephone1 = null;
		
		public readonly string Callback = null;
		
		public readonly bool? DoNotBulkEMail = null;
		
		public readonly OptionSetValue Address1_FreightTermsCode = null;
		
		public readonly EntityReference PreferredServiceId = null;
		
		public readonly string JobTitle = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly int? Address1_UTCOffset = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly bool? FollowEmail = null;
		
		public readonly string Address2_Telephone1 = null;
		
		public readonly Money CreditLimit = null;
		
		public readonly string Suffix = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? SubscriptionId = null;
		
		public readonly int? Address3_UTCOffset = null;
		
		public readonly string Address3_Composite = null;
		
		public readonly OptionSetValue LeadSourceCode = null;
		
		public readonly string Address2_Telephone3 = null;
		
		public readonly string Address3_Name = null;
		
		public readonly EntityReference AccountId = null;
		
		public readonly OptionSetValue EducationCode = null;
		
		public readonly OptionSetValue PreferredAppointmentTimeCode = null;
		
		public readonly string TraversedPath = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly double? Address1_Longitude = null;
		
		public readonly string Address2_Name = null;
		
		public readonly Money Aging30_Base = null;
		
		public readonly OptionSetValue Address2_ShippingMethodCode = null;
		
		public readonly string Address1_Composite = null;
		
		public readonly string SpousesName = null;
		
		public readonly Money CreditLimit_Base = null;
		
		public readonly string ManagerName = null;
		
		public readonly string Address2_UPSZone = null;
		
		public readonly string EMailAddress1 = null;
		
		public readonly string Address2_PrimaryContactName = null;
		
		public readonly Money AnnualIncome_Base = null;
		
		public readonly string Address3_Telephone2 = null;

        public new static class Options
        {
            public enum Address3_FreightTermsCode
            {
                DefaultValue = 1
            }
            public enum Address1_AddressTypeCode
            {
                BillTo = 1,
                ShipTo = 2,
                Primary = 3,
                Other = 4
            }
            public enum PreferredContactMethodCode
            {
                Any = 1,
                Email = 2,
                Phone = 3,
                Fax = 4,
                Mail = 5
            }
            public enum Address2_AddressTypeCode
            {
                DefaultValue = 1
            }
            public enum CustomerTypeCode
            {
                DefaultValue = 1
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum AccountRoleCode
            {
                DecisionMaker = 1,
                Employee = 2,
                Influencer = 3
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum Address3_ShippingMethodCode
            {
                DefaultValue = 1
            }
            public enum Address3_AddressTypeCode
            {
                DefaultValue = 1
            }
            public enum HasChildrenCode
            {
                DefaultValue = 1
            }
            public enum TerritoryCode
            {
                DefaultValue = 1
            }
            public enum Address1_ShippingMethodCode
            {
                Airborne = 1,
                DHL = 2,
                FedEx = 3,
                UPS = 4,
                PostalMail = 5,
                FullLoad = 6,
                WillCall = 7
            }
            public enum PaymentTermsCode
            {
                Net30 = 1,
                _210Net30 = 2,
                Net45 = 3,
                Net60 = 4
            }
            public enum GenderCode
            {
                Male = 1,
                Female = 2
            }
            public enum Address2_FreightTermsCode
            {
                DefaultValue = 1
            }
            public enum FamilyStatusCode
            {
                Single = 1,
                Married = 2,
                Divorced = 3,
                Widowed = 4
            }
            public enum CustomerSizeCode
            {
                DefaultValue = 1
            }
            public enum PreferredAppointmentDayCode
            {
                Sunday = 0,
                Monday = 1,
                Tuesday = 2,
                Wednesday = 3,
                Thursday = 4,
                Friday = 5,
                Saturday = 6
            }
            public enum ShippingMethodCode
            {
                DefaultValue = 1
            }
            public enum Address1_FreightTermsCode
            {
                FOB = 1,
                NoCharge = 2
            }
            public enum LeadSourceCode
            {
                DefaultValue = 1
            }
            public enum EducationCode
            {
                DefaultValue = 1
            }
            public enum PreferredAppointmentTimeCode
            {
                Morning = 1,
                Afternoon = 2,
                Evening = 3
            }
            public enum Address2_ShippingMethodCode
            {
                DefaultValue = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("leadcompetitors")]
	public class LeadCompetitors : Entity
    {
        public const string EntityLogicalName = "leadcompetitors";
        public LeadCompetitors() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("leadcompetitorid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["leadcompetitorid"] = value;
            }
        }
		
		public readonly Guid? LeadId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? CompetitorId = null;
		
		public readonly Guid? LeadCompetitorId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("officedocument")]
	public class OfficeDocument : Entity
    {
        public const string EntityLogicalName = "officedocument";
        public OfficeDocument() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("officedocumentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["officedocumentid"] = value;
            }
        }
		
		public readonly Guid? OfficeDocumentId = null;
		
		public readonly int? FileSize = null;
		
		public readonly string ClientData = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly OptionSetValue DocumentType = null;
		
		public readonly EntityReference ObjectId = null;
		
		public readonly int? FileLockState = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string Content = null;
		
		public readonly string SHA256 = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum DocumentType
            {
                MicrosoftExcel = 1,
                MicrosoftWord = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("authorizationserver")]
	public class AuthorizationServer : Entity
    {
        public const string EntityLogicalName = "authorizationserver";
        public AuthorizationServer() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("authorizationserverid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["authorizationserverid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? AuthorizationServerId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string Metadata = null;
		
		public readonly DateTime? MetadataRefreshedOn = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string PrincipalId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string MetadataUrl = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? TenantId = null;
		
		public readonly OptionSetValue StatusCode = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string Realm = null;
		
		public readonly OptionSetValue AuthorizationServerType = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Enabled = 1,
                Disabled = 2
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum AuthorizationServerType
            {
                AccessControlService = 0,
                EvolvedSTS = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("equipment")]
	public class Equipment : Entity
    {
        public const string EntityLogicalName = "equipment";
        public Equipment() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("equipmentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["equipmentid"] = value;
            }
        }
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference CalendarId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly bool? DisplayInServiceViews = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string Description = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly string Skills = null;
		
		public readonly bool? IsDisabled = null;
		
		public readonly EntityReference SiteId = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly string EMailAddress = null;
		
		public readonly Guid? EquipmentId = null;
		
		public readonly EntityReference BusinessUnitId = null;
		
		public readonly int? TimeZoneCode = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("annotation")]
	public class Annotation : Entity
    {
        public const string EntityLogicalName = "annotation";
        public Annotation() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("annotationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["annotationid"] = value;
            }
        }
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly string DocumentBody = null;
		
		public readonly string MimeType = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly Guid? AnnotationId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ObjectId = null;
		
		public readonly string LangId = null;
		
		public readonly bool? IsPrivate = null;
		
		public readonly EntityReference OwnerId = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Subject = null;
		
		public readonly string FileName = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string NoteText = null;
		
		public readonly int? FileSize = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string StepId = null;
		
		public readonly bool? IsDocument = null;
		
		public readonly string ObjectTypeCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;

        public new static class Options
        {
            public enum ObjectTypeCode
            {
                Account = 1,
                Appointment = 4201,
                BulkImport = 4407,
                Calendar = 4003,
                Campaign = 4400,
                CampaignActivity = 4402,
                CampaignResponse = 4401,
                Case = 112,
                CaseResolution = 4206,
                Commitment = 4215,
                Competitor = 123,
                Contact = 2,
                Contract = 1010,
                ContractLine = 1011,
                Email = 4202,
                FacilityEquipment = 4000,
                Fax = 4204,
                Invoice = 1090,
                Lead = 4,
                Letter = 4207,
                MarketingList = 4300,
                Opportunity = 3,
                OpportunityClose = 4208,
                Order = 1088,
                OrderClose = 4209,
                PhoneCall = 4210,
                Product = 1024,
                Quote = 1084,
                QuoteClose = 4211,
                ResourceSpecification = 4006,
                Service = 4001,
                ServiceActivity = 4214,
                Task = 4212,
                RoutingRule = 8181,
                RoutingRuleItem = 8199
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("ribboncustomization")]
	public class RibbonCustomization : Entity
    {
        public const string EntityLogicalName = "ribboncustomization";
        public RibbonCustomization() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("ribboncustomizationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["ribboncustomizationid"] = value;
            }
        }
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string Entity = null;
		
		public readonly Guid? RibbonCustomizationUniqueId = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? PublishedOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? RibbonCustomizationId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("teamprofiles")]
	public class TeamProfiles : Entity
    {
        public const string EntityLogicalName = "teamprofiles";
        public TeamProfiles() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("teamprofileid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["teamprofileid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? FieldSecurityProfileId = null;
		
		public readonly Guid? TeamId = null;
		
		public readonly Guid? TeamProfileId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("resourcegroupexpansion")]
	public class ResourceGroupExpansion : Entity
    {
        public const string EntityLogicalName = "resourcegroupexpansion";
        public ResourceGroupExpansion() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("resourcegroupexpansionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["resourcegroupexpansionid"] = value;
            }
        }
		
		public readonly Guid? ObjectId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? ResourceGroupExpansionId = null;
		
		public readonly OptionSetValue MethodCode = null;
		
		public readonly Guid? ItemId = null;

        public new static class Options
        {
            public enum MethodCode
            {
                None = 0,
                ParticipatingResources = 1,
                SchedulableResources = 2,
                SupportedServices = 3,
                Resources = 4,
                AllResources = 5,
                Subgroups = 6,
                ParentGroups = 7,
                AllSubgroups = 8
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("accountleads")]
	public class AccountLeads : Entity
    {
        public const string EntityLogicalName = "accountleads";
        public AccountLeads() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("accountleadid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["accountleadid"] = value;
            }
        }
		
		public readonly Guid? AccountId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? LeadId = null;
		
		public readonly Guid? AccountLeadId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("workflowwaitsubscription")]
	public class WorkflowWaitSubscription : Entity
    {
        public const string EntityLogicalName = "workflowwaitsubscription";
        public WorkflowWaitSubscription() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("workflowwaitsubscriptionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["workflowwaitsubscriptionid"] = value;
            }
        }
		
		public readonly EntityReference OwnerId = null;
		
		public readonly Guid? EntityId = null;
		
		public readonly Guid? OwningBusinessUnit = null;
		
		public readonly EntityReference AsyncOperationId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string WaitOnAttributeList = null;
		
		public readonly string EntityName = null;
		
		public readonly string Data = null;
		
		public readonly Guid? OwningUser = null;
		
		public readonly Guid? WorkflowWaitSubscriptionId = null;
		
		public readonly bool? IsModified = null;
		
		public readonly bool? IsDeleted = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("serviceendpoint")]
	public class ServiceEndpoint : Entity
    {
        public const string EntityLogicalName = "serviceendpoint";
        public ServiceEndpoint() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("serviceendpointid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["serviceendpointid"] = value;
            }
        }
		
		public readonly Guid? ServiceEndpointIdUnique = null;
		
		public readonly bool? IsSASKeySet = null;
		
		public readonly OptionSetValue ConnectionMode = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue Contract = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly OptionSetValue MessageFormat = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly string SolutionNamespace = null;
		
		public readonly string SASKey = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly string SASToken = null;
		
		public readonly string NamespaceAddress = null;
		
		public readonly Guid? ServiceEndpointId = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly OptionSetValue NamespaceFormat = null;
		
		public readonly string Path = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly OptionSetValue UserClaim = null;
		
		public readonly OptionSetValue AuthType = null;
		
		public readonly EntityReference ModifiedBy = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly bool? IsSASTokenSet = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string SASKeyName = null;
		
		public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum ConnectionMode
            {
                Normal = 1,
                Federated = 2
            }
            public enum Contract
            {
                OneWay = 1,
                Queue = 2,
                Rest = 3,
                TwoWay = 4,
                Topic = 5,
                QueuePersistent = 6,
                EventHub = 7
            }
            public enum MessageFormat
            {
                BinaryXML = 1,
                Json = 2,
                TextXML = 3
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum NamespaceFormat
            {
                NamespaceName = 1,
                NamespaceAddress = 2
            }
            public enum UserClaim
            {
                None = 1,
                UserId = 2,
                UserInfo = 3
            }
            public enum AuthType
            {
                ACS = 1,
                SASKey = 2,
                SASToken = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("contractdetail")]
	public class ContractDetail : Entity
    {
        public const string EntityLogicalName = "contractdetail";
        public ContractDetail() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("contractdetailid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["contractdetailid"] = value;
            }
        }
		
		public readonly EntityReference OwnerId = null;
		
		public readonly string EffectivityCalendar = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly Guid? OwningBusinessUnit = null;
		
		public readonly int? InitialQuantity = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? TotalAllotments = null;
		
		public readonly Money Net = null;
		
		public readonly EntityReference UoMId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference ProductId = null;
		
		public readonly Money Discount = null;
		
		public readonly string ProductSerialNumber = null;
		
		public readonly EntityReference UoMScheduleId = null;
		
		public readonly int? LineItemOrder = null;
		
		public readonly Guid? OwningUser = null;
		
		public readonly EntityReference ServiceAddress = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly Money Net_Base = null;
		
		public readonly EntityReference ContactId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Money Rate = null;
		
		public readonly DateTime? ActiveOn = null;
		
		public readonly int? AllotmentsUsed = null;
		
		public readonly Money Discount_Base = null;
		
		public readonly Money Price = null;
		
		public readonly Guid? ContractDetailId = null;
		
		public readonly OptionSetValue ContractStateCode = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Title = null;
		
		public readonly int? AllotmentsRemaining = null;
		
		public readonly decimal? DiscountPercentage = null;
		
		public readonly EntityReference ContractId = null;
		
		public readonly EntityReference AccountId = null;
		
		public readonly Money Price_Base = null;
		
		public readonly DateTime? ExpiresOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue ServiceContractUnitsCode = null;
		
		public readonly EntityReference CustomerId = null;
		
		public readonly int? AllotmentsOverage = null;
		
		public readonly Money Rate_Base = null;

        public new static class Options
        {
            public enum StatusCode
            {
                New = 1,
                Renewed = 2,
                Canceled = 3,
                Expired = 4
            }
            public enum ContractStateCode
            {

            }
            public enum StateCode
            {
                Existing = 0,
                Renewed = 1,
                Canceled = 2,
                Expired = 3
            }
            public enum ServiceContractUnitsCode
            {
                DefaultValue = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("subscriptionsyncinfo")]
	public class SubscriptionSyncInfo : Entity
    {
        public const string EntityLogicalName = "subscriptionsyncinfo";
        public SubscriptionSyncInfo() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("subscriptionsyncinfoid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["subscriptionsyncinfoid"] = value;
            }
        }
		
		public readonly DateTime? EndTime = null;
		
		public readonly int? DeleteObjectCount = null;
		
		public readonly int? InsertObjectCount = null;
		
		public readonly bool? SyncResult = null;
		
		public readonly EntityReference SubscriptionId = null;
		
		public readonly string ClientVersion = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly DateTime? StartTime = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly int? DataSize = null;
		
		public readonly int? SubscriptionSyncInfoId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("list")]
	public class List : Entity
    {
        public const string EntityLogicalName = "list";
        public List() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("listid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["listid"] = value;
            }
        }
		
		public readonly int? MemberType = null;
		
		public readonly string Description = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly bool? Type = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly Guid? ListId = null;
		
		public readonly DateTime? LastUsedOn = null;
		
		public readonly Guid? StageId = null;
		
		public readonly bool? LockStatus = null;
		
		public readonly OptionSetValue CreatedFromCode = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string ListName = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly int? MemberCount = null;
		
		public readonly string Purpose = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly bool? IgnoreInactiveListMembers = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly Money Cost_Base = null;
		
		public readonly string Source = null;
		
		public readonly string TraversedPath = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly bool? DoNotSendOnOptOut = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Money Cost = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly string Query = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly int? ImportSequenceNumber = null;

        public new static class Options
        {
            public enum CreatedFromCode
            {
                Account = 1,
                Contact = 2,
                Lead = 4
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 0,
                Inactive = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("savedqueryvisualization")]
	public class SavedQueryVisualization : Entity
    {
        public const string EntityLogicalName = "savedqueryvisualization";
        public SavedQueryVisualization() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("savedqueryvisualizationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["savedqueryvisualizationid"] = value;
            }
        }
		
		public readonly string Description = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? SavedQueryVisualizationId = null;
		
		public readonly string PresentationDescription = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly EntityReference OrganizationId = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference WebResourceId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Guid? SavedQueryVisualizationIdUnique = null;
		
		public readonly OptionSetValue ChartType = null;
		
		public readonly string PrimaryEntityTypeCode = null;
		
		public readonly OptionSetValue Type = null;
		
		public readonly bool? IsDefault = null;
		
		public readonly bool? CanBeDeleted = null;
		
		public readonly string DataDescription = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum ChartType
            {
                ASPNETCharts = 0,
                PowerBI = 1
            }
            public enum Type
            {
                ForDataCentricAsWellAsInteractionCentric = 0,
                JustForInteractionCentric = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("productsubstitute")]
	public class ProductSubstitute : Entity
    {
        public const string EntityLogicalName = "productsubstitute";
        public ProductSubstitute() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("productsubstituteid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["productsubstituteid"] = value;
            }
        }
		
		public readonly OptionSetValue SalesRelationshipType = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference SubstitutedProductId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly OptionSetValue statuscode = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue statecode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? ProductSubstituteId = null;
		
		public readonly OptionSetValue Direction = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference ProductId = null;

        public new static class Options
        {
            public enum SalesRelationshipType
            {
                UpSell = 0,
                CrossSell = 1,
                Accessory = 2,
                Substitute = 3
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum Direction
            {
                UniDirectional = 0,
                BiDirectional = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("knowledgearticleviews")]
	public class KnowledgeArticleViews : Entity
    {
        public const string EntityLogicalName = "knowledgearticleviews";
        public KnowledgeArticleViews() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("knowledgearticleviewsid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["knowledgearticleviewsid"] = value;
            }
        }
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference KnowledgeArticleId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly OptionSetValue statuscode = null;
		
		public readonly Guid? OwningUser = null;
		
		public readonly Guid? OwningBusinessUnit = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly OptionSetValue Location = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue statecode = null;
		
		public readonly int? KnowledgeArticleView = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? KnowledgeArticleViewsId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly DateTime? ViewDate = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;

        public new static class Options
        {
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum Location
            {
                Internal = 1,
                Web = 2
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("metadatadifference")]
	public class MetadataDifference : Entity
    {
        public const string EntityLogicalName = "metadatadifference";
        public MetadataDifference() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("metadatadifferenceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["metadatadifferenceid"] = value;
            }
        }
		
		public readonly string DifferenceXml = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? MetadataDifferenceId = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly double? IntroducedVersion = null;
		
		public readonly string IntroducedVersionString = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("recurrencerule")]
	public class RecurrenceRule : Entity
    {
        public const string EntityLogicalName = "recurrencerule";
        public RecurrenceRule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("ruleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["ruleid"] = value;
            }
        }
		
		public readonly OptionSetValue PatternEndType = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly OptionSetValue Instance = null;
		
		public readonly int? Interval = null;
		
		public readonly Guid? RuleId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? EffectiveStartDate = null;
		
		public readonly bool? IsNthYearly = null;
		
		public readonly EntityReference ObjectId = null;
		
		public readonly int? DayOfMonth = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly bool? IsNthMonthly = null;
		
		public readonly OptionSetValue MonthOfYear = null;
		
		public readonly int? FirstDayOfWeek = null;
		
		public readonly OptionSetValue RecurrencePatternType = null;
		
		public readonly DateTime? PatternStartDate = null;
		
		public readonly int? Duration = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? Occurrences = null;
		
		public readonly DateTime? EffectiveEndDate = null;
		
		public readonly DateTime? StartTime = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly DateTime? PatternEndDate = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? DaysOfWeekMask = null;
		
		public readonly bool? IsWeekDayPattern = null;
		
		public readonly bool? IsRegenerate = null;
		
		public readonly DateTime? EndTime = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;

        public new static class Options
        {
            public enum PatternEndType
            {
                NoEndDate = 1,
                Occurrences = 2,
                PatternEndDate = 3
            }
            public enum Instance
            {
                First = 1,
                Second = 2,
                Third = 3,
                Fourth = 4,
                Last = 5
            }
            public enum MonthOfYear
            {
                InvalidMonthOfYear = 0,
                January = 1,
                February = 2,
                March = 3,
                April = 4,
                May = 5,
                June = 6,
                July = 7,
                August = 8,
                September = 9,
                October = 10,
                November = 11,
                December = 12
            }
            public enum RecurrencePatternType
            {
                Daily = 0,
                Weekly = 1,
                Monthly = 2,
                Yearly = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("campaignactivity")]
	public class CampaignActivity : Entity
    {
        public const string EntityLogicalName = "campaignactivity";
        public CampaignActivity() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }
		
		public readonly string Subcategory = null;
		
		public readonly bool? DoNotSendOnOptOut = null;
		
		public readonly Money ActualCost = null;
		
		public readonly bool? IsWorkflowCreated = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly Guid? StageId = null;
		
		public readonly bool? IsBilled = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Money BudgetedCost_Base = null;
		
		public readonly int? ExcludeIfContactedInXDays = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly string Description = null;
		
		public readonly bool? IsRegularActivity = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Subject = null;
		
		public readonly EntityReference ServiceId = null;
		
		public readonly bool? IgnoreInactiveListMembers = null;
		
		public readonly EntityCollection Partners = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly DateTime? ActualEnd = null;
		
		public readonly string ActivityTypeCode = null;
		
		public readonly EntityCollection from = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string Category = null;
		
		public readonly Money BudgetedCost = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly string TraversedPath = null;
		
		public readonly DateTime? ActualStart = null;
		
		public readonly OptionSetValue TypeCode = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly int? ScheduledDurationMinutes = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly OptionSetValue ChannelTypeCode = null;
		
		public readonly int? ActualDurationMinutes = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly Guid? ActivityId = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Money ActualCost_Base = null;
		
		public readonly EntityReference RegardingObjectId = null;

        public new static class Options
        {
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                ServiceActivity = 4214,
                OpportunityClose = 4208,
                OrderClose = 4209,
                QuoteClose = 4211,
                CaseResolution = 4206,
                Task = 4212,
                CampaignResponse = 4401,
                CampaignActivity = 4402,
                BulkOperation = 4406,
                RecurringAppointment = 4251
            }
            public enum TypeCode
            {
                Research = 1,
                ContentPreparation = 2,
                TargetMarketingListCreation = 3,
                LeadQualification = 4,
                ContentDistribution = 5,
                DirectInitialContact = 6,
                DirectFollowUpContact = 7,
                ReminderDistribution = 8
            }
            public enum StateCode
            {
                Open = 0,
                Closed = 1,
                Canceled = 2
            }
            public enum ChannelTypeCode
            {
                Phone = 1,
                Appointment = 2,
                Letter = 3,
                LetterViaMailMerge = 4,
                Fax = 5,
                FaxViaMailMerge = 6,
                Email = 7,
                EmailViaMailMerge = 8,
                Other = 9
            }
            public enum StatusCode
            {
                Proposed = 1,
                InProgress = 0,
                Closed = 2,
                Canceled = 3,
                Pending = 4,
                SystemAborted = 5,
                Completed = 6
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("documenttemplate")]
	public class DocumentTemplate : Entity
    {
        public const string EntityLogicalName = "documenttemplate";
        public DocumentTemplate() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("documenttemplateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["documenttemplateid"] = value;
            }
        }
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? LanguageCode = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly string Content = null;
		
		public readonly string ClientData = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly OptionSetValue DocumentType = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string AssociatedEntityTypeCode = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly bool? Status = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? DocumentTemplateId = null;

        public new static class Options
        {
            public enum DocumentType
            {
                MicrosoftExcel = 1,
                MicrosoftWord = 2
            }
            public enum AssociatedEntityTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("systemform")]
	public class SystemForm : Entity
    {
        public const string EntityLogicalName = "systemform";
        public SystemForm() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("formid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["formid"] = value;
            }
        }
		
		public readonly Guid? FormIdUnique = null;
		
		public readonly OptionSetValue FormPresentation = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly OptionSetValue FormActivationState = null;
		
		public readonly OptionSetValue Type = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly string FormXml = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly bool? IsTabletEnabled = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly string UniqueName = null;
		
		public readonly bool? IsDesktopEnabled = null;
		
		public readonly bool? IsAIRMerged = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly DateTime? PublishedOn = null;
		
		public readonly EntityReference AncestorFormId = null;
		
		public readonly Guid? FormId = null;
		
		public readonly int? Version = null;
		
		public readonly bool? IsDefault = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly string ObjectTypeCode = null;
		
		public readonly bool? CanBeDeleted = null;
		
		public readonly string FormXmlManaged = null;

        public new static class Options
        {
            public enum FormPresentation
            {
                ClassicForm = 0,
                AirForm = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum FormActivationState
            {
                Inactive = 0,
                Active = 1
            }
            public enum Type
            {
                Dashboard = 0,
                AppointmentBook = 1,
                Main = 2,
                MiniCampaignBO = 3,
                Preview = 4,
                MobileExpress = 5,
                QuickViewForm = 6,
                QuickCreate = 7,
                Dialog = 8,
                TaskFlowForm = 9,
                InteractionCentricDashboard = 10,
                Card = 11,
                MainInteractiveExperience = 12,
                Other = 100,
                MainBackup = 101,
                AppointmentBookBackup = 102,
                PowerBIDashboard = 103
            }
            public enum ObjectTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("slaitem")]
	public class SLAItem : Entity
    {
        public const string EntityLogicalName = "slaitem";
        public SLAItem() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("slaitemid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["slaitemid"] = value;
            }
        }
		
		public readonly EntityReference WorkflowId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? SequenceNumber = null;
		
		public readonly string Name = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string RelatedField = null;
		
		public readonly string Description = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly string SuccessConditionsXml = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly int? FailureAfter = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? WarnAfter = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string ApplicableWhenXml = null;
		
		public readonly Guid? SLAItemIdUnique = null;
		
		public readonly Guid? SLAItemId = null;
		
		public readonly Guid? SolutionId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("connectionroleassociation")]
	public class ConnectionRoleAssociation : Entity
    {
        public const string EntityLogicalName = "connectionroleassociation";
        public ConnectionRoleAssociation() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("connectionroleassociationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["connectionroleassociationid"] = value;
            }
        }
		
		public readonly Guid? ConnectionRoleId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? ConnectionRoleAssociationId = null;
		
		public readonly Guid? AssociatedConnectionRoleId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("childincidentcount")]
	public class ChildIncidentCount : Entity
    {
        public const string EntityLogicalName = "childincidentcount";
        public ChildIncidentCount() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("childincidentcountid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["childincidentcountid"] = value;
            }
        }
		
		public readonly Guid? ChildIncidentCountId = null;
		
		public readonly string NumberOfChildIncidents = null;
		
		public readonly Guid? ParentCaseId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("report")]
	public class Report : Entity
    {
        public const string EntityLogicalName = "report";
        public Report() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("reportid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["reportid"] = value;
            }
        }
		
		public readonly int? SignatureLcid = null;
		
		public readonly string OriginalBodyText = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly bool? IsScheduledReport = null;
		
		public readonly string QueryInfo = null;
		
		public readonly int? SignatureMinorVersion = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly string ScheduleXml = null;
		
		public readonly EntityReference ParentReportId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? ReportIdUnique = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? CreatedInMajorVersion = null;
		
		public readonly string BodyBinary = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly string MimeType = null;
		
		public readonly string BodyUrl = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string Description = null;
		
		public readonly DateTime? ModifiedOn = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly int? SignatureMajorVersion = null;
		
		public readonly string DefaultFilter = null;
		
		public readonly string CustomReportXml = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly int? FileSize = null;
		
		public readonly bool? IsPersonal = null;
		
		public readonly DateTime? SignatureDate = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly string BodyText = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string FileName = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly bool? IsCustomReport = null;
		
		public readonly Guid? ReportId = null;
		
		public readonly Guid? SignatureId = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly string ReportNameOnSRS = null;
		
		public readonly int? LanguageCode = null;
		
		public readonly OptionSetValue ReportTypeCode = null;
		
		public readonly DateTime? CreatedOn = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum ReportTypeCode
            {
                ReportingServicesReport = 1,
                OtherReport = 2,
                LinkedReport = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("salesorderdetail")]
	public class SalesOrderDetail : Entity
    {
        public const string EntityLogicalName = "salesorderdetail";
        public SalesOrderDetail() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("salesorderdetailid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["salesorderdetailid"] = value;
            }
        }
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly EntityReference SalesOrderId = null;
		
		public readonly string ShipTo_Name = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference SalesRepId = null;
		
		public readonly OptionSetValue SalesOrderStateCode = null;
		
		public readonly decimal? QuantityCancelled = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Money ExtendedAmount = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Money VolumeDiscountAmount = null;
		
		public readonly DateTime? RequestDeliveryBy = null;
		
		public readonly Money ExtendedAmount_Base = null;
		
		public readonly Money BaseAmount = null;
		
		public readonly EntityReference ProductId = null;
		
		public readonly Money ManualDiscountAmount_Base = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly Money ManualDiscountAmount = null;
		
		public readonly OptionSetValue ShipTo_FreightTermsCode = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference UoMId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string ShipTo_Line3 = null;
		
		public readonly string Description = null;
		
		public readonly string ShipTo_Line2 = null;
		
		public readonly Guid? OwningUser = null;
		
		public readonly Money PricePerUnit = null;
		
		public readonly bool? IsCopied = null;
		
		public readonly OptionSetValue PricingErrorCode = null;
		
		public readonly Guid? SalesOrderDetailId = null;
		
		public readonly Money Tax = null;
		
		public readonly int? SequenceNumber = null;
		
		public readonly bool? IsPriceOverridden = null;
		
		public readonly Guid? ProductAssociationId = null;
		
		public readonly Money PricePerUnit_Base = null;
		
		public readonly Guid? ParentBundleId = null;
		
		public readonly string ShipTo_Country = null;
		
		public readonly string ShipTo_ContactName = null;
		
		public readonly string ShipTo_Fax = null;
		
		public readonly bool? WillCall = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly Money Tax_Base = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string ProductDescription = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly decimal? QuantityBackordered = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly OptionSetValue PropertyConfigurationStatus = null;
		
		public readonly string ShipTo_PostalCode = null;
		
		public readonly Money BaseAmount_Base = null;
		
		public readonly string ShipTo_StateOrProvince = null;
		
		public readonly string ShipTo_City = null;
		
		public readonly string ShipTo_Telephone = null;
		
		public readonly decimal? Quantity = null;
		
		public readonly Money VolumeDiscountAmount_Base = null;
		
		public readonly Guid? ShipTo_AddressId = null;
		
		public readonly OptionSetValue ProductTypeCode = null;
		
		public readonly decimal? QuantityShipped = null;
		
		public readonly int? LineItemNumber = null;
		
		public readonly string ShipTo_Line1 = null;
		
		public readonly Guid? OwningBusinessUnit = null;
		
		public readonly bool? IsProductOverridden = null;
		
		public readonly bool? SalesOrderIsPriceLocked = null;
		
		public readonly int? VersionNumber = null;

        public new static class Options
        {
            public enum SalesOrderStateCode
            {

            }
            public enum ShipTo_FreightTermsCode
            {
                FOB = 1,
                NoCharge = 2
            }
            public enum PricingErrorCode
            {
                None = 0,
                DetailError = 1,
                MissingPriceLevel = 2,
                InactivePriceLevel = 3,
                MissingQuantity = 4,
                MissingUnitPrice = 5,
                MissingProduct = 6,
                InvalidProduct = 7,
                MissingPricingCode = 8,
                InvalidPricingCode = 9,
                MissingUOM = 10,
                ProductNotInPriceLevel = 11,
                MissingPriceLevelAmount = 12,
                MissingPriceLevelPercentage = 13,
                MissingPrice = 14,
                MissingCurrentCost = 15,
                MissingStandardCost = 16,
                InvalidPriceLevelAmount = 17,
                InvalidPriceLevelPercentage = 18,
                InvalidPrice = 19,
                InvalidCurrentCost = 20,
                InvalidStandardCost = 21,
                InvalidRoundingPolicy = 22,
                InvalidRoundingOption = 23,
                InvalidRoundingAmount = 24,
                PriceCalculationError = 25,
                InvalidDiscountType = 26,
                DiscountTypeInvalidState = 27,
                InvalidDiscount = 28,
                InvalidQuantity = 29,
                InvalidPricingPrecision = 30,
                MissingProductDefaultUOM = 31,
                MissingProductUOMSchedule = 32,
                InactiveDiscountType = 33,
                InvalidPriceLevelCurrency = 34,
                PriceAttributeOutOfRange = 35,
                BaseCurrencyAttributeOverflow = 36,
                BaseCurrencyAttributeUnderflow = 37
            }
            public enum PropertyConfigurationStatus
            {
                Edit = 0,
                Rectify = 1,
                NotConfigured = 2
            }
            public enum ProductTypeCode
            {
                Product = 1,
                Bundle = 2,
                RequiredBundleProduct = 3,
                OptionalBundleProduct = 4,
                ProjectBasedService = 5
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("teammembership")]
	public class TeamMembership : Entity
    {
        public const string EntityLogicalName = "teammembership";
        public TeamMembership() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("teammembershipid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["teammembershipid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? TeamId = null;
		
		public readonly Guid? SystemUserId = null;
		
		public readonly Guid? TeamMembershipId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("discount")]
	public class Discount : Entity
    {
        public const string EntityLogicalName = "discount";
        public Discount() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("discountid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["discountid"] = value;
            }
        }
		
		public readonly decimal? Percentage = null;
		
		public readonly decimal? LowQuantity = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Money Amount = null;
		
		public readonly Money Amount_Base = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference DiscountTypeId = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly Guid? DiscountId = null;
		
		public readonly Guid? OrganizationId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly bool? IsAmountType = null;
		
		public readonly decimal? HighQuantity = null;
		
		public readonly int? VersionNumber = null;

        public new static class Options
        {
            public enum StatusCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("solutioncomponent")]
	public class SolutionComponent : Entity
    {
        public const string EntityLogicalName = "solutioncomponent";
        public SolutionComponent() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("solutioncomponentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["solutioncomponentid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly bool? IsMetadata = null;
		
		public readonly Guid? SolutionComponentId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly OptionSetValue RootComponentBehavior = null;
		
		public readonly EntityReference SolutionId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly OptionSetValue ComponentType = null;
		
		public readonly Guid? ObjectId = null;
		
		public readonly Guid? RootSolutionComponentId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference CreatedBy = null;

        public new static class Options
        {
            public enum RootComponentBehavior
            {
                IncludeSubcomponents = 0,
                DoNotIncludeSubcomponents = 1,
                IncludeAsShellOnly = 2
            }
            public enum ComponentType
            {
                Entity = 1,
                Attribute = 2,
                Relationship = 3,
                AttributePicklistValue = 4,
                AttributeLookupValue = 5,
                ViewAttribute = 6,
                LocalizedLabel = 7,
                RelationshipExtraCondition = 8,
                OptionSet = 9,
                EntityRelationship = 10,
                EntityRelationshipRole = 11,
                EntityRelationshipRelationships = 12,
                ManagedProperty = 13,
                EntityKey = 14,
                Role = 20,
                RolePrivilege = 21,
                DisplayString = 22,
                DisplayStringMap = 23,
                Form = 24,
                Organization = 25,
                SavedQuery = 26,
                Workflow = 29,
                Report = 31,
                ReportEntity = 32,
                ReportCategory = 33,
                ReportVisibility = 34,
                Attachment = 35,
                EmailTemplate = 36,
                ContractTemplate = 37,
                KBArticleTemplate = 38,
                MailMergeTemplate = 39,
                DuplicateRule = 44,
                DuplicateRuleCondition = 45,
                EntityMap = 46,
                AttributeMap = 47,
                RibbonCommand = 48,
                RibbonContextGroup = 49,
                RibbonCustomization = 50,
                RibbonRule = 52,
                RibbonTabToCommandMap = 53,
                RibbonDiff = 55,
                SavedQueryVisualization = 59,
                SystemForm = 60,
                WebResource = 61,
                SiteMap = 62,
                ConnectionRole = 63,
                FieldSecurityProfile = 70,
                FieldPermission = 71,
                PluginType = 90,
                PluginAssembly = 91,
                SDKMessageProcessingStep = 92,
                SDKMessageProcessingStepImage = 93,
                ServiceEndpoint = 95,
                RoutingRule = 150,
                RoutingRuleItem = 151,
                SLA = 152,
                SLAItem = 153,
                ConvertRule = 154,
                ConvertRuleItem = 155,
                HierarchyRule = 65,
                MobileOfflineProfile = 161,
                MobileOfflineProfileItem = 162,
                SimilarityRule = 165,
                CustomControl = 66,
                CustomControlDefaultConfig = 68
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("imagedescriptor")]
	public class ImageDescriptor : Entity
    {
        public const string EntityLogicalName = "imagedescriptor";
        public ImageDescriptor() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("imagedescriptorid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["imagedescriptorid"] = value;
            }
        }
		
		public readonly Guid? ObjectId = null;
		
		public readonly int? Size = null;
		
		public readonly byte[] ImageData = null;
		
		public readonly string Title = null;
		
		public readonly string FileType = null;
		
		public readonly string ImageURL = null;
		
		public readonly int? ImageTimestamp = null;
		
		public readonly string ObjectTypeCode = null;
		
		public readonly Guid? ImageDescriptorId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("plugintypestatistic")]
	public class PluginTypeStatistic : Entity
    {
        public const string EntityLogicalName = "plugintypestatistic";
        public PluginTypeStatistic() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("plugintypestatisticid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["plugintypestatisticid"] = value;
            }
        }
		
		public readonly int? TerminateOtherContributionPercent = null;
		
		public readonly int? TerminateMemoryContributionPercent = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference PluginTypeId = null;
		
		public readonly Guid? PluginTypeStatisticId = null;
		
		public readonly int? FailurePercent = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? CrashContributionPercent = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? TerminateCpuContributionPercent = null;
		
		public readonly int? AverageExecuteTimeInMilliseconds = null;
		
		public readonly int? FailureCount = null;
		
		public readonly int? TerminateHandlesContributionPercent = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? ExecuteCount = null;
		
		public readonly int? CrashCount = null;
		
		public readonly int? CrashPercent = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? ModifiedOn = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("invoice")]
	public class Invoice : Entity
    {
        public const string EntityLogicalName = "invoice";
        public Invoice() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("invoiceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["invoiceid"] = value;
            }
        }
		
		public readonly string BillTo_Telephone = null;
		
		public readonly Money DiscountAmount_Base = null;
		
		public readonly Money TotalDiscountAmount_Base = null;
		
		public readonly EntityReference OpportunityId = null;
		
		public readonly string BillTo_Line3 = null;
		
		public readonly Guid? InvoiceId = null;
		
		public readonly string BillTo_Composite = null;
		
		public readonly string TraversedPath = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly Money TotalTax_Base = null;
		
		public readonly Money TotalAmount = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly OptionSetValue ShipTo_FreightTermsCode = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly decimal? DiscountPercentage = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly string BillTo_StateOrProvince = null;
		
		public readonly string ShipTo_City = null;
		
		public readonly Money TotalLineItemDiscountAmount = null;
		
		public readonly EntityReference SalesOrderId = null;
		
		public readonly OptionSetValue ShippingMethodCode = null;
		
		public readonly string ShipTo_PostalCode = null;
		
		public readonly string BillTo_PostalCode = null;
		
		public readonly EntityReference AccountId = null;
		
		public readonly EntityReference CustomerId = null;
		
		public readonly Money FreightAmount_Base = null;
		
		public readonly string BillTo_Line1 = null;
		
		public readonly string BillTo_Line2 = null;
		
		public readonly string BillTo_Country = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string ShipTo_Composite = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly Money TotalDiscountAmount = null;
		
		public readonly string ShipTo_StateOrProvince = null;
		
		public readonly string ShipTo_Telephone = null;
		
		public readonly DateTime? LastBackofficeSubmit = null;
		
		public readonly Money TotalLineItemDiscountAmount_Base = null;
		
		public readonly Money TotalAmountLessFreight = null;
		
		public readonly Money TotalAmountLessFreight_Base = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly string BillTo_Name = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string ShipTo_Line3 = null;
		
		public readonly OptionSetValue PaymentTermsCode = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly OptionSetValue PricingErrorCode = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly DateTime? DateDelivered = null;
		
		public readonly string InvoiceNumber = null;
		
		public readonly Money FreightAmount = null;
		
		public readonly string ShipTo_Line2 = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string BillTo_City = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly EntityReference PriceLevelId = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly Money DiscountAmount = null;
		
		public readonly bool? IsPriceLocked = null;
		
		public readonly string ShipTo_Fax = null;
		
		public readonly Money TotalLineItemAmount = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string ShipTo_Name = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly string BillTo_Fax = null;
		
		public readonly bool? WillCall = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference ContactId = null;
		
		public readonly string ShipTo_Country = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Money TotalAmount_Base = null;
		
		public readonly string ShipTo_Line1 = null;
		
		public readonly Money TotalLineItemAmount_Base = null;
		
		public readonly DateTime? DueDate = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly Money TotalTax = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly Guid? StageId = null;

        public new static class Options
        {
            public enum ShipTo_FreightTermsCode
            {
                DefaultValue = 1
            }
            public enum ShippingMethodCode
            {
                Airborne = 1,
                DHL = 2,
                FedEx = 3,
                UPS = 4,
                PostalMail = 5,
                FullLoad = 6,
                WillCall = 7
            }
            public enum PriorityCode
            {
                DefaultValue = 1
            }
            public enum PaymentTermsCode
            {
                Net30 = 1,
                _210Net30 = 2,
                Net45 = 3,
                Net60 = 4
            }
            public enum PricingErrorCode
            {
                None = 0,
                DetailError = 1,
                MissingPriceLevel = 2,
                InactivePriceLevel = 3,
                MissingQuantity = 4,
                MissingUnitPrice = 5,
                MissingProduct = 6,
                InvalidProduct = 7,
                MissingPricingCode = 8,
                InvalidPricingCode = 9,
                MissingUOM = 10,
                ProductNotInPriceLevel = 11,
                MissingPriceLevelAmount = 12,
                MissingPriceLevelPercentage = 13,
                MissingPrice = 14,
                MissingCurrentCost = 15,
                MissingStandardCost = 16,
                InvalidPriceLevelAmount = 17,
                InvalidPriceLevelPercentage = 18,
                InvalidPrice = 19,
                InvalidCurrentCost = 20,
                InvalidStandardCost = 21,
                InvalidRoundingPolicy = 22,
                InvalidRoundingOption = 23,
                InvalidRoundingAmount = 24,
                PriceCalculationError = 25,
                InvalidDiscountType = 26,
                DiscountTypeInvalidState = 27,
                InvalidDiscount = 28,
                InvalidQuantity = 29,
                InvalidPricingPrecision = 30,
                MissingProductDefaultUOM = 31,
                MissingProductUOMSchedule = 32,
                InactiveDiscountType = 33,
                InvalidPriceLevelCurrency = 34,
                PriceAttributeOutOfRange = 35,
                BaseCurrencyAttributeOverflow = 36,
                BaseCurrencyAttributeUnderflow = 37
            }
            public enum StatusCode
            {
                New = 1,
                PartiallyShipped = 2,
                Billed = 4,
                BookedAppliesToServices = 5,
                InstalledAppliesToServices = 6,
                CanceledDeprecated = 3,
                PaidInFullDeprecated = 7,
                Complete = 100001,
                Partial = 100002,
                Canceled = 100003
            }
            public enum StateCode
            {
                Active = 0,
                ClosedDeprecated = 1,
                Paid = 2,
                Canceled = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("statusmap")]
	public class StatusMap : Entity
    {
        public const string EntityLogicalName = "statusmap";
        public StatusMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("statusmapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["statusmapid"] = value;
            }
        }
		
		public readonly int? State = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? Status = null;
		
		public readonly Guid? OrganizationId = null;
		
		public readonly bool? IsDefault = null;
		
		public readonly Guid? StatusMapId = null;
		
		public readonly string ObjectTypeCode = null;

        public new static class Options
        {
            public enum ObjectTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("category")]
	public class Category : Entity
    {
        public const string EntityLogicalName = "category";
        public Category() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("categoryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["categoryid"] = value;
            }
        }
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string CategoryNumber = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Title = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? SequenceNumber = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference ParentCategoryId = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly Guid? CategoryId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference CreatedBy = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("documentindex")]
	public class DocumentIndex : Entity
    {
        public const string EntityLogicalName = "documentindex";
        public DocumentIndex() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("documentindexid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["documentindexid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly bool? IsPublished = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly bool? IsLatestVersion = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Title = null;
		
		public readonly OptionSetValue DocumentTypeCode = null;
		
		public readonly string KeyWords = null;
		
		public readonly string Location = null;
		
		public readonly Guid? DocumentIndexId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string Number = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference DocumentId = null;
		
		public readonly string SearchText = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference SubjectId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference CreatedBy = null;

        public new static class Options
        {
            public enum DocumentTypeCode
            {
                DefaultValue = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("connection")]
	public class Connection : Entity
    {
        public const string EntityLogicalName = "connection";
        public Connection() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("connectionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["connectionid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference Record1Id = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue Record2ObjectTypeCode = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly OptionSetValue Record1ObjectTypeCode = null;
		
		public readonly DateTime? EffectiveStart = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly Guid? ConnectionId = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference Record1RoleId = null;
		
		public readonly EntityReference Record2Id = null;
		
		public readonly DateTime? EffectiveEnd = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly bool? IsMaster = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference Record2RoleId = null;
		
		public readonly EntityReference RelatedConnectionId = null;
		
		public readonly EntityReference CreatedBy = null;

        public new static class Options
        {
            public enum Record2ObjectTypeCode
            {
                DefaultValue = 0
            }
            public enum Record1ObjectTypeCode
            {
                DefaultValue = 0
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("recordcountsnapshot")]
	public class RecordCountSnapshot : Entity
    {
        public const string EntityLogicalName = "recordcountsnapshot";
        public RecordCountSnapshot() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("recordcountsnapshotid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["recordcountsnapshotid"] = value;
            }
        }
		
		public readonly Guid? RecordCountSnapshotId = null;
		
		public readonly int? ObjectTypeCode = null;
		
		public readonly int? Count = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("attachment")]
	public class Attachment : Entity
    {
        public const string EntityLogicalName = "attachment";
        public Attachment() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("attachmentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["attachmentid"] = value;
            }
        }
		
		public readonly Guid? AttachmentId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string Subject = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string FileName = null;
		
		public readonly int? FileSize = null;
		
		public readonly string Body = null;
		
		public readonly string MimeType = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("invoicedetail")]
	public class InvoiceDetail : Entity
    {
        public const string EntityLogicalName = "invoicedetail";
        public InvoiceDetail() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("invoicedetailid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["invoicedetailid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly bool? IsPriceOverridden = null;
		
		public readonly Money VolumeDiscountAmount_Base = null;
		
		public readonly EntityReference InvoiceId = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly string ShipTo_Line3 = null;
		
		public readonly decimal? QuantityShipped = null;
		
		public readonly OptionSetValue PropertyConfigurationStatus = null;
		
		public readonly string ShipTo_Country = null;
		
		public readonly OptionSetValue ShipTo_FreightTermsCode = null;
		
		public readonly string ShipTo_Line1 = null;
		
		public readonly OptionSetValue ProductTypeCode = null;
		
		public readonly string ProductDescription = null;
		
		public readonly Money Tax_Base = null;
		
		public readonly Money Tax = null;
		
		public readonly Guid? ParentBundleId = null;
		
		public readonly decimal? QuantityBackordered = null;
		
		public readonly Guid? OwningUser = null;
		
		public readonly string ShipTo_Telephone = null;
		
		public readonly decimal? Quantity = null;
		
		public readonly OptionSetValue InvoiceStateCode = null;
		
		public readonly bool? InvoiceIsPriceLocked = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly Money BaseAmount_Base = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly Money PricePerUnit = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? ActualDeliveryOn = null;
		
		public readonly EntityReference ProductId = null;
		
		public readonly Money ManualDiscountAmount = null;
		
		public readonly string ShipTo_Line2 = null;
		
		public readonly Money BaseAmount = null;
		
		public readonly string ShippingTrackingNumber = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference UoMId = null;
		
		public readonly string ShipTo_Fax = null;
		
		public readonly bool? IsProductOverridden = null;
		
		public readonly string ShipTo_StateOrProvince = null;
		
		public readonly bool? WillCall = null;
		
		public readonly string Description = null;
		
		public readonly decimal? QuantityCancelled = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? OwningBusinessUnit = null;
		
		public readonly OptionSetValue PricingErrorCode = null;
		
		public readonly Money VolumeDiscountAmount = null;
		
		public readonly Money ManualDiscountAmount_Base = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly bool? IsCopied = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string ShipTo_Name = null;
		
		public readonly Guid? ProductAssociationId = null;
		
		public readonly Guid? InvoiceDetailId = null;
		
		public readonly int? LineItemNumber = null;
		
		public readonly Money ExtendedAmount = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Money ExtendedAmount_Base = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string ShipTo_City = null;
		
		public readonly string ShipTo_PostalCode = null;
		
		public readonly int? SequenceNumber = null;
		
		public readonly EntityReference SalesRepId = null;
		
		public readonly Money PricePerUnit_Base = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;

        public new static class Options
        {
            public enum PropertyConfigurationStatus
            {
                Edit = 0,
                Rectify = 1,
                NotConfigured = 2
            }
            public enum ShipTo_FreightTermsCode
            {
                FOB = 1,
                NoCharge = 2
            }
            public enum ProductTypeCode
            {
                Product = 1,
                Bundle = 2,
                RequiredBundleProduct = 3,
                OptionalBundleProduct = 4,
                ProjectBasedService = 5
            }
            public enum InvoiceStateCode
            {

            }
            public enum PricingErrorCode
            {
                None = 0,
                DetailError = 1,
                MissingPriceLevel = 2,
                InactivePriceLevel = 3,
                MissingQuantity = 4,
                MissingUnitPrice = 5,
                MissingProduct = 6,
                InvalidProduct = 7,
                MissingPricingCode = 8,
                InvalidPricingCode = 9,
                MissingUOM = 10,
                ProductNotInPriceLevel = 11,
                MissingPriceLevelAmount = 12,
                MissingPriceLevelPercentage = 13,
                MissingPrice = 14,
                MissingCurrentCost = 15,
                MissingStandardCost = 16,
                InvalidPriceLevelAmount = 17,
                InvalidPriceLevelPercentage = 18,
                InvalidPrice = 19,
                InvalidCurrentCost = 20,
                InvalidStandardCost = 21,
                InvalidRoundingPolicy = 22,
                InvalidRoundingOption = 23,
                InvalidRoundingAmount = 24,
                PriceCalculationError = 25,
                InvalidDiscountType = 26,
                DiscountTypeInvalidState = 27,
                InvalidDiscount = 28,
                InvalidQuantity = 29,
                InvalidPricingPrecision = 30,
                MissingProductDefaultUOM = 31,
                MissingProductUOMSchedule = 32,
                InactiveDiscountType = 33,
                InvalidPriceLevelCurrency = 34,
                PriceAttributeOutOfRange = 35,
                BaseCurrencyAttributeOverflow = 36,
                BaseCurrencyAttributeUnderflow = 37
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("subscriptionstatisticsoutlook")]
	public class SubscriptionStatisticsOutlook : Entity
    {
        public const string EntityLogicalName = "subscriptionstatisticsoutlook";
        public SubscriptionStatisticsOutlook() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("subscriptionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["subscriptionid"] = value;
            }
        }
		
		public readonly int? ObjectTypeCode = null;
		
		public readonly bool? FullSyncRequired = null;
		
		public readonly Guid? SubscriptionId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("attributemap")]
	public class AttributeMap : Entity
    {
        public const string EntityLogicalName = "attributemap";
        public AttributeMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("attributemapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["attributemapid"] = value;
            }
        }
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference ParentAttributeMapId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly string SourceAttributeName = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? IsSystem = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Guid? AttributeMapId = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly string TargetAttributeName = null;
		
		public readonly EntityReference EntityMapId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? AttributeMapIdUnique = null;
		
		public readonly DateTime? CreatedOn = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("plugintracelog")]
	public class PluginTraceLog : Entity
    {
        public const string EntityLogicalName = "plugintracelog";
        public PluginTraceLog() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("plugintracelogid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["plugintracelogid"] = value;
            }
        }
		
		public readonly string ExceptionDetails = null;
		
		public readonly DateTime? PerformanceExecutionStartTime = null;
		
		public readonly Guid? CorrelationId = null;
		
		public readonly Guid? PersistenceKey = null;
		
		public readonly int? PerformanceConstructorDuration = null;
		
		public readonly string Profile = null;
		
		public readonly Guid? RequestId = null;
		
		public readonly string MessageBlock = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string PrimaryEntity = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? OrganizationId = null;
		
		public readonly int? PerformanceExecutionDuration = null;
		
		public readonly bool? IsSystemCreated = null;
		
		public readonly DateTime? PerformanceConstructorStartTime = null;
		
		public readonly string Configuration = null;
		
		public readonly int? Depth = null;
		
		public readonly OptionSetValue OperationType = null;
		
		public readonly OptionSetValue Mode = null;
		
		public readonly Guid? PluginTraceLogId = null;
		
		public readonly Guid? PluginStepId = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string TypeName = null;
		
		public readonly string MessageName = null;
		
		public readonly string SecureConfiguration = null;

        public new static class Options
        {
            public enum OperationType
            {
                Unknown = 0,
                PlugIn = 1,
                WorkflowActivity = 2
            }
            public enum Mode
            {
                Synchronous = 0,
                Asynchronous = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("campaignitem")]
	public class CampaignItem : Entity
    {
        public const string EntityLogicalName = "campaignitem";
        public CampaignItem() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("campaignitemid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["campaignitemid"] = value;
            }
        }
		
		public readonly EntityReference OwnerId = null;
		
		public readonly string EntityType = null;
		
		public readonly Guid? OwningBusinessUnit = null;
		
		public readonly EntityReference CampaignId = null;
		
		public readonly Guid? CampaignItemId = null;
		
		public readonly Guid? EntityId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? OwningUser = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("bookableresource")]
	public class BookableResource : Entity
    {
        public const string EntityLogicalName = "bookableresource";
        public BookableResource() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("bookableresourceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["bookableresourceid"] = value;
            }
        }
		
		public readonly string TraversedPath = null;
		
		public readonly Guid? BookableResourceId = null;
		
		public readonly EntityReference ContactId = null;
		
		public readonly OptionSetValue ResourceType = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? StageId = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly int? TimeZone = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference UserId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference CreatedBy = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference AccountId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly EntityReference CalendarId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference OwningBusinessUnit = null;

        public new static class Options
        {
            public enum ResourceType
            {
                Generic = 1,
                Contact = 2,
                User = 3,
                Equipment = 4,
                Account = 5,
                Group = 6
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sdkmessagepair")]
	public class SdkMessagePair : Entity
    {
        public const string EntityLogicalName = "sdkmessagepair";
        public SdkMessagePair() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sdkmessagepairid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sdkmessagepairid"] = value;
            }
        }
		
		public readonly string Namespace = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string SdkMessageBindingInformation = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference SdkMessageId = null;
		
		public readonly int? CustomizationLevel = null;
		
		public readonly string Endpoint = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? SdkMessagePairId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? SdkMessagePairIdUnique = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("replicationbacklog")]
	public class ReplicationBacklog : Entity
    {
        public const string EntityLogicalName = "replicationbacklog";
        public ReplicationBacklog() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("replicationbacklogid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["replicationbacklogid"] = value;
            }
        }
		
		public readonly EntityReference TargetObjectId = null;
		
		public readonly Guid? ReplicationBacklogId = null;
		
		public readonly OptionSetValue ReplicationBacklogType = null;
		
		public readonly string Data = null;
		
		public readonly Guid? TargetDatacenterId = null;

        public new static class Options
        {
            public enum ReplicationBacklogType
            {
                Create = 0,
                Update = 1,
                Delete = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("subject")]
	public class Subject : Entity
    {
        public const string EntityLogicalName = "subject";
        public Subject() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("subjectid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["subjectid"] = value;
            }
        }
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? SubjectId = null;
		
		public readonly EntityReference CreatedByExternalParty = null;
		
		public readonly EntityReference ParentSubject = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Title = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string Description = null;
		
		public readonly int? FeatureMask = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ModifiedByExternalParty = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedBy = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("emailsearch")]
	public class EmailSearch : Entity
    {
        public const string EntityLogicalName = "emailsearch";
        public EmailSearch() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("emailsearchid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["emailsearchid"] = value;
            }
        }
		
		public readonly string EmailAddress = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ParentObjectId = null;
		
		public readonly Guid? EmailSearchId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("newprocess")]
	public class NewProcess : Entity
    {
        public const string EntityLogicalName = "newprocess";
        public NewProcess() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("businessprocessflowinstanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["businessprocessflowinstanceid"] = value;
            }
        }
		
		public readonly DateTime? ActiveStageStartedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? Duration = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly string TraversedPath = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly DateTime? CompletedOn = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue StatusCode = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly EntityReference KnowledgeArticleId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ActiveStageId = null;
		
		public readonly EntityReference ProcessId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Guid? BusinessProcessFlowInstanceId = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly int? ImportSequenceNumber = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Active = 1,
                Finished = 2,
                Aborted = 3
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("userfiscalcalendar")]
	public class UserFiscalCalendar : Entity
    {
        public const string EntityLogicalName = "userfiscalcalendar";
        public UserFiscalCalendar() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("userfiscalcalendarid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["userfiscalcalendarid"] = value;
            }
        }
		
		public readonly Money Period12_Base = null;
		
		public readonly Money Period11_Base = null;
		
		public readonly Money Period6_Base = null;
		
		public readonly Money Period11 = null;
		
		public readonly Money Period3_Base = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Money Period2_Base = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Money Period10_Base = null;
		
		public readonly Money Period8 = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly Money Period3 = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Money Period1_Base = null;
		
		public readonly Money Period13_Base = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly Money Period7 = null;
		
		public readonly Money Period4_Base = null;
		
		public readonly Money Period7_Base = null;
		
		public readonly int? FiscalPeriodType = null;
		
		public readonly Money Period13 = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Money Period1 = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly Money Period8_Base = null;
		
		public readonly EntityReference SalesPersonId = null;
		
		public readonly Money Period12 = null;
		
		public readonly Money Period9_Base = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Money Period6 = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? UserFiscalCalendarId = null;
		
		public readonly Money Period9 = null;
		
		public readonly Guid? BusinessUnitId = null;
		
		public readonly Money Period5 = null;
		
		public readonly Money Period10 = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Money Period2 = null;
		
		public readonly DateTime? EffectiveOn = null;
		
		public readonly Money Period4 = null;
		
		public readonly Money Period5_Base = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("reportentity")]
	public class ReportEntity : Entity
    {
        public const string EntityLogicalName = "reportentity";
        public ReportEntity() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("reportentityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["reportentityid"] = value;
            }
        }
		
		public readonly Guid? ReportEntityId = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly Guid? OwningUser = null;
		
		public readonly EntityReference ReportId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly Guid? ReportEntityIdUnique = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly bool? IsFilterable = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly string ObjectTypeCode = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly Guid? OwningBusinessUnit = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? SupportingSolutionId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum ObjectTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("rollupjob")]
	public class RollupJob : Entity
    {
        public const string EntityLogicalName = "rollupjob";
        public RollupJob() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("rollupjobid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["rollupjobid"] = value;
            }
        }
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? RecordCreatedOn = null;
		
		public readonly int? RollupJobId = null;
		
		public readonly int? RetryCount = null;
		
		public readonly DateTime? PostponeUntil = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly EntityReference RollupPropertiesId = null;
		
		public readonly int? SourceEntityTypeCode = null;
		
		public readonly int? DepthProcessed = null;

        public new static class Options
        {
            public enum StatusCode
            {
                WaitingForResources = 0,
                Waiting = 10,
                InProgress = 20,
                Pausing = 21,
                Canceling = 22,
                Succeeded = 30,
                Failed = 31,
                Canceled = 32
            }
            public enum StateCode
            {
                Ready = 0,
                Suspended = 1,
                Locked = 2,
                Completed = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("timezonedefinition")]
	public class TimeZoneDefinition : Entity
    {
        public const string EntityLogicalName = "timezonedefinition";
        public TimeZoneDefinition() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("timezonedefinitionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["timezonedefinitionid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? RetiredOrder = null;
		
		public readonly int? TimeZoneCode = null;
		
		public readonly int? Bias = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string UserInterfaceName = null;
		
		public readonly string StandardName = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? TimeZoneDefinitionId = null;
		
		public readonly string DaylightName = null;
		
		public readonly EntityReference ModifiedBy = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("customcontroldefaultconfig")]
	public class CustomControlDefaultConfig : Entity
    {
        public const string EntityLogicalName = "customcontroldefaultconfig";
        public CustomControlDefaultConfig() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("customcontroldefaultconfigid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["customcontroldefaultconfigid"] = value;
            }
        }
		
		public readonly string ControlDescriptionXML = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly Guid? CustomControlDefaultConfigId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly Guid? CustomControlDefaultConfigIdUnique = null;
		
		public readonly string PrimaryEntityTypeCode = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly string EventsXml = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("entitlementtemplateproducts")]
	public class EntitlementTemplateProducts : Entity
    {
        public const string EntityLogicalName = "entitlementtemplateproducts";
        public EntitlementTemplateProducts() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("entitlementtemplateproductid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["entitlementtemplateproductid"] = value;
            }
        }
		
		public readonly Guid? ProductId = null;
		
		public readonly Guid? EntitlementTemplateProductId = null;
		
		public readonly Guid? EntitlementTemplateId = null;
		
		public readonly int? VersionNumber = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("subscriptionstatisticsoffline")]
	public class SubscriptionStatisticsOffline : Entity
    {
        public const string EntityLogicalName = "subscriptionstatisticsoffline";
        public SubscriptionStatisticsOffline() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("subscriptionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["subscriptionid"] = value;
            }
        }
		
		public readonly bool? FullSyncRequired = null;
		
		public readonly Guid? SubscriptionId = null;
		
		public readonly int? ObjectTypeCode = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("multientitysearchentities")]
	public class MultiEntitySearchEntities : Entity
    {
        public const string EntityLogicalName = "multientitysearchentities";
        public MultiEntitySearchEntities() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("multientitysearchentityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["multientitysearchentityid"] = value;
            }
        }
		
		public readonly Guid? MultiEntitySearchEntityId = null;
		
		public readonly EntityReference MultiEntitySearchId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string EntityName = null;
		
		public readonly int? EntityOrder = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("uomschedule")]
	public class UoMSchedule : Entity
    {
        public const string EntityLogicalName = "uomschedule";
        public UoMSchedule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("uomscheduleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["uomscheduleid"] = value;
            }
        }
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference ModifiedByExternalParty = null;
		
		public readonly string Description = null;
		
		public readonly Guid? UoMScheduleId = null;
		
		public readonly string BaseUoMName = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue StatusCode = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference CreatedByExternalParty = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("characteristic")]
	public class Characteristic : Entity
    {
        public const string EntityLogicalName = "characteristic";
        public Characteristic() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("characteristicid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["characteristicid"] = value;
            }
        }
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? CharacteristicId = null;
		
		public readonly int? VersionNumber = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly OptionSetValue CharacteristicType = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference OwningUser = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum CharacteristicType
            {
                Skill = 1,
                Certification = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("reportlink")]
	public class ReportLink : Entity
    {
        public const string EntityLogicalName = "reportlink";
        public ReportLink() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("reportlinkid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["reportlinkid"] = value;
            }
        }
		
		public readonly EntityReference OwnerId = null;
		
		public readonly Guid? ReportLinkIdUnique = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference LinkedReportId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string LinkedReportName = null;
		
		public readonly Guid? OwningUser = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? OwningBusinessUnit = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference ReportId = null;
		
		public readonly Guid? ReportLinkId = null;
		
		public readonly OptionSetValue LinkTypeCode = null;

        public new static class Options
        {
            public enum LinkTypeCode
            {
                DrillThrough = 1,
                SubReport = 2,
                DrillThroughAndSubReport = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("timestampdatemapping")]
	public class TimeStampDateMapping : Entity
    {
        public const string EntityLogicalName = "timestampdatemapping";
        public TimeStampDateMapping() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("timestampdatemappingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["timestampdatemappingid"] = value;
            }
        }
		
		public readonly int? TimeStamp = null;
		
		public readonly DateTime? Date = null;
		
		public readonly Guid? TimeStampDateMappingId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("campaignresponse")]
	public class CampaignResponse : Entity
    {
        public const string EntityLogicalName = "campaignresponse";
        public CampaignResponse() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly string Telephone = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? ActualDurationMinutes = null;
		
		public readonly string EMailAddress = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityCollection Partner = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly string TraversedPath = null;
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly EntityReference ServiceId = null;
		
		public readonly Guid? ActivityId = null;
		
		public readonly string YomiFirstName = null;
		
		public readonly string ActivityTypeCode = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly DateTime? ActualEnd = null;
		
		public readonly int? ScheduledDurationMinutes = null;
		
		public readonly string YomiLastName = null;
		
		public readonly string Subcategory = null;
		
		public readonly bool? IsBilled = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly bool? IsRegularActivity = null;
		
		public readonly string YomiCompanyName = null;
		
		public readonly Guid? StageId = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly string FirstName = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly string Fax = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityCollection from = null;
		
		public readonly bool? IsWorkflowCreated = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string ActivityAdditionalParams = null;
		
		public readonly string PromotionCodeName = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Subject = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? ActualStart = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly OptionSetValue ResponseCode = null;
		
		public readonly string LastName = null;
		
		public readonly EntityReference OriginatingActivityId = null;
		
		public readonly OptionSetValue ChannelTypeCode = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly string CompanyName = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityCollection Customer = null;
		
		public readonly string Category = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? ReceivedOn = null;

        public new static class Options
        {
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                ServiceActivity = 4214,
                OpportunityClose = 4208,
                OrderClose = 4209,
                QuoteClose = 4211,
                CaseResolution = 4206,
                Task = 4212,
                CampaignResponse = 4401,
                CampaignActivity = 4402,
                BulkOperation = 4406,
                RecurringAppointment = 4251
            }
            public enum StateCode
            {
                Open = 0,
                Closed = 1,
                Canceled = 2
            }
            public enum StatusCode
            {
                Open = 1,
                Closed = 2,
                Canceled = 3
            }
            public enum ResponseCode
            {
                Interested = 1,
                NotInterested = 2,
                DoNotSendMarketingMaterials = 3,
                Error = 4
            }
            public enum ChannelTypeCode
            {
                Email = 1,
                Phone = 2,
                Fax = 3,
                Letter = 4,
                Appointment = 5,
                Others = 6
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("emailserverprofile")]
	public class EmailServerProfile : Entity
    {
        public const string EntityLogicalName = "emailserverprofile";
        public EmailServerProfile() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("emailserverprofileid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["emailserverprofileid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly OptionSetValue ServerType = null;
		
		public readonly string OutgoingServerLocation = null;
		
		public readonly string IncomingServerLocation = null;
		
		public readonly string IncomingUserName = null;
		
		public readonly string IncomingPassword = null;
		
		public readonly string OutgoingUsername = null;
		
		public readonly string OutgoingPassword = null;
		
		public readonly int? IncomingPortNumber = null;
		
		public readonly int? OutgoingPortNumber = null;
		
		public readonly bool? IncomingUseSSL = null;
		
		public readonly bool? OutgoingUseSSL = null;
		
		public readonly bool? UseAutoDiscover = null;
		
		public readonly OptionSetValue IncomingAuthenticationProtocol = null;
		
		public readonly DateTime? LastTestStartTime = null;
		
		public readonly string LastTestResponse = null;
		
		public readonly string EncodingCodePage = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly Guid? EmailServerProfileId = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly bool? IncomingUseImpersonation = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly string LastTestRequest = null;
		
		public readonly OptionSetValue LastAuthorizationStatus = null;
		
		public readonly OptionSetValue ExchangeVersion = null;
		
		public readonly OptionSetValue LastTestExecutionStatus = null;
		
		public readonly bool? IsOutgoingPasswordSet = null;
		
		public readonly OptionSetValue IncomingCredentialRetrieval = null;
		
		public readonly int? MinPollingIntervalInMinutes = null;
		
		public readonly bool? OutgoingUseImpersonation = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly int? LastTestTotalExecutionTime = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string ExchangeOnlineTenantId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly OptionSetValue OutgoingCredentialRetrieval = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference OrganizationId = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly OptionSetValue LastTestValidationStatus = null;
		
		public readonly string DefaultServerLocation = null;
		
		public readonly int? MaxConcurrentConnections = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly bool? OutgoingAutoGrantDelegateAccess = null;
		
		public readonly string OwnerEmailAddress = null;
		
		public readonly string LastCrmMessage = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly OptionSetValue OutgoingAuthenticationProtocol = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly bool? SendEmailAlert = null;
		
		public readonly EntityReference OutgoingPartnerApplication = null;
		
		public readonly bool? IsIncomingPasswordSet = null;
		
		public readonly string EmailServerTypeName = null;
		
		public readonly EntityReference IncomingPartnerApplication = null;
		
		public readonly bool? UseDefaultTenantId = null;
		
		public readonly DateTime? ProcessEmailsReceivedAfter = null;
		
		public readonly string Description = null;
		
		public readonly bool? MoveUndeliveredEmails = null;
		
		public readonly bool? TimeoutMailboxConnection = null;
		
		public readonly int? TimeoutMailboxConnectionAfterAmount = null;
		
		public readonly bool? UseSameSettingsForOutgoingConnections = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly DateTime? ModifiedOn = null;

        public new static class Options
        {
            public enum ServerType
            {
                ExchangeServer = 0,
                OtherPOP3SMTP = 1,
                ExchangeServerHybrid = 2,
                ExchangeOnlineHybrid = 3
            }
            public enum IncomingAuthenticationProtocol
            {
                AutoDetect = 0,
                Negotiate = 1,
                NTLM = 2,
                Basic = 3
            }
            public enum LastAuthorizationStatus
            {
                Failure = 0,
                Success = 1
            }
            public enum ExchangeVersion
            {
                Exchange2007 = 0,
                Exchange2007SP1 = 1,
                Exchange2010 = 2,
                Exchange2010SP1 = 3,
                Exchange2010SP2 = 4,
                Exchange2013 = 5
            }
            public enum LastTestExecutionStatus
            {
                Failure = 0,
                Success = 1,
                Warning = 2
            }
            public enum IncomingCredentialRetrieval
            {
                CredentialsSpecifiedByAUserOrQueue = 0,
                CredentialsSpecifiedInEmailServerProfile = 1,
                ServerToServerAuthentication = 2,
                WindowsIntegratedAuthentication = 3,
                WithoutCredentialsAnonymous = 4
            }
            public enum OutgoingCredentialRetrieval
            {
                CredentialsSpecifiedByAUserOrQueue = 0,
                CredentialsSpecifiedInEmailServerProfile = 1,
                ServerToServerAuthentication = 2,
                WindowsIntegratedAuthentication = 3,
                WithoutCredentialsAnonymous = 4
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum LastTestValidationStatus
            {
                Failure = 0,
                Success = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum OutgoingAuthenticationProtocol
            {
                AutoDetect = 0,
                Negotiate = 1,
                NTLM = 2,
                Basic = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("customcontrolresource")]
	public class CustomControlResource : Entity
    {
        public const string EntityLogicalName = "customcontrolresource";
        public CustomControlResource() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("customcontrolresourceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["customcontrolresourceid"] = value;
            }
        }
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? CustomControlId = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly int? VersionNumber = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string VersionRequirement = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly Guid? WebResourceId = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string Version = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly Guid? CustomControlResourceIdUnique = null;
		
		public readonly Guid? CustomControlResourceId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Guid? SolutionId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("multientitysearch")]
	public class MultiEntitySearch : Entity
    {
        public const string EntityLogicalName = "multientitysearch";
        public MultiEntitySearch() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("multientitysearchid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["multientitysearchid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly Guid? MultiEntitySearchId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? VersionNumber = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("mailboxstatistics")]
	public class MailboxStatistics : Entity
    {
        public const string EntityLogicalName = "mailboxstatistics";
        public MailboxStatistics() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("mailboxstatisticsid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["mailboxstatisticsid"] = value;
            }
        }
		
		public readonly int? CrmItemsBacklog = null;
		
		public readonly int? ProcessTimeIntervalInMinutes = null;
		
		public readonly DateTime? MailboxProcessStartedOn = null;
		
		public readonly int? ItemsFailed = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference MailboxId = null;
		
		public readonly DateTime? MailboxProcessCompletedOn = null;
		
		public readonly bool? ProcessResult = null;
		
		public readonly string MachineName = null;
		
		public readonly string IndividualStepDurations = null;
		
		public readonly int? ScheduledTimeIntervalInMinutes = null;
		
		public readonly int? ItemsProcessed = null;
		
		public readonly DateTime? MailboxProcessScheduledOn = null;
		
		public readonly OptionSetValue OperationTypeId = null;
		
		public readonly Guid? MailboxStatisticsId = null;
		
		public readonly Guid? AsyncEventId = null;

        public new static class Options
        {
            public enum OperationTypeId
            {
                IncomingEmail = 0,
                OutgoingEmail = 1,
                ACT = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("orginsightsmetric")]
	public class OrgInsightsMetric : Entity
    {
        public const string EntityLogicalName = "orginsightsmetric";
        public OrgInsightsMetric() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("orginsightsmetricid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["orginsightsmetricid"] = value;
            }
        }
		
		public readonly OptionSetValue MetricType = null;
		
		public readonly string Name = null;
		
		public readonly string InternalName = null;
		
		public readonly Guid? OrgInsightsMetricId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? CreatedOn = null;

        public new static class Options
        {
            public enum MetricType
            {
                TimeSeries = 1,
                Category = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("subscriptionclients")]
	public class SubscriptionClients : Entity
    {
        public const string EntityLogicalName = "subscriptionclients";
        public SubscriptionClients() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("subscriptionclientid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["subscriptionclientid"] = value;
            }
        }
		
		public readonly Guid? SubscriptionId = null;
		
		public readonly bool? IsPrimaryClient = null;
		
		public readonly Guid? SubscriptionClientId = null;
		
		public readonly Guid? ClientId = null;
		
		public readonly string MachineName = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("subscriptiontrackingdeletedobject")]
	public class SubscriptionTrackingDeletedObject : Entity
    {
        public const string EntityLogicalName = "subscriptiontrackingdeletedobject";
        public SubscriptionTrackingDeletedObject() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("timestamp")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["timestamp"] = value;
            }
        }
		
		public readonly Guid? ObjectId = null;
		
		public readonly string ObjectTypeCode = null;
		
		public readonly int? TimeStamp = null;
		
		public readonly bool? IsLogicalDelete = null;
		
		public readonly DateTime? DeleteTime = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("columnmapping")]
	public class ColumnMapping : Entity
    {
        public const string EntityLogicalName = "columnmapping";
        public ColumnMapping() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("columnmappingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["columnmappingid"] = value;
            }
        }
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference ImportMapId = null;
		
		public readonly OptionSetValue ProcessCode = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly string TargetEntityName = null;
		
		public readonly Guid? ColumnMappingId = null;
		
		public readonly string TargetAttributeName = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string SourceAttributeName = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string SourceEntityName = null;

        public new static class Options
        {
            public enum ProcessCode
            {
                Process = 1,
                Ignore = 2,
                Internal = 3
            }
            public enum StatusCode
            {
                Active = 1
            }
            public enum StateCode
            {
                Active = 0
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("ownermapping")]
	public class OwnerMapping : Entity
    {
        public const string EntityLogicalName = "ownermapping";
        public OwnerMapping() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("ownermappingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["ownermappingid"] = value;
            }
        }
		
		public readonly string SourceSystemUserName = null;
		
		public readonly OptionSetValue ProcessCode = null;
		
		public readonly string TargetUserValueForSourceCRMUserLink = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string TargetSystemUserDomainName = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly EntityReference ImportMapId = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly string SourceUserValueForSourceCRMUserLink = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? OwnerMappingId = null;
		
		public readonly EntityReference TargetSystemUserId = null;

        public new static class Options
        {
            public enum ProcessCode
            {
                Process = 1,
                Ignore = 2,
                Internal = 3
            }
            public enum StatusCode
            {
                Active = 0
            }
            public enum StateCode
            {
                Active = 0
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("queuemembership")]
	public class QueueMembership : Entity
    {
        public const string EntityLogicalName = "queuemembership";
        public QueueMembership() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("queuemembershipid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["queuemembershipid"] = value;
            }
        }
		
		public readonly Guid? QueueId = null;
		
		public readonly Guid? SystemUserId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? QueueMembershipId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("wizardpage")]
	public class WizardPage : Entity
    {
        public const string EntityLogicalName = "wizardpage";
        public WizardPage() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("wizardpageid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["wizardpageid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference WebWizardId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly Guid? WizardPageId = null;
		
		public readonly string PageUrl = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string PageDataToPost = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly int? PageSequenceNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedBy = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("productpricelevel")]
	public class ProductPriceLevel : Entity
    {
        public const string EntityLogicalName = "productpricelevel";
        public ProductPriceLevel() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("productpricelevelid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["productpricelevelid"] = value;
            }
        }
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly OptionSetValue RoundingPolicyCode = null;
		
		public readonly OptionSetValue QuantitySellingCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Money Amount_Base = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly Guid? OrganizationId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Money RoundingOptionAmount = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue PricingMethodCode = null;
		
		public readonly EntityReference ProductId = null;
		
		public readonly decimal? Percentage = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly Guid? StageId = null;
		
		public readonly Money RoundingOptionAmount_Base = null;
		
		public readonly EntityReference UoMScheduleId = null;
		
		public readonly EntityReference PriceLevelId = null;
		
		public readonly Guid? ProductPriceLevelId = null;
		
		public readonly EntityReference UoMId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly OptionSetValue RoundingOptionCode = null;
		
		public readonly string TraversedPath = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string ProductNumber = null;
		
		public readonly EntityReference DiscountTypeId = null;
		
		public readonly Money Amount = null;

        public new static class Options
        {
            public enum RoundingPolicyCode
            {
                None = 1,
                Up = 2,
                Down = 3,
                ToNearest = 4
            }
            public enum QuantitySellingCode
            {
                NoControl = 1,
                Whole = 2,
                WholeAndFractional = 3
            }
            public enum PricingMethodCode
            {
                CurrencyAmount = 1,
                PercentOfList = 2,
                PercentMarkupCurrentCost = 3,
                PercentMarginCurrentCost = 4,
                PercentMarkupStandardCost = 5,
                PercentMarginStandardCost = 6
            }
            public enum RoundingOptionCode
            {
                EndsIn = 1,
                MultipleOf = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("entitymap")]
	public class EntityMap : Entity
    {
        public const string EntityLogicalName = "entitymap";
        public EntityMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("entitymapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["entitymapid"] = value;
            }
        }
		
		public readonly string SourceEntityName = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly Guid? EntityMapId = null;
		
		public readonly string TargetEntityName = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly Guid? EntityMapIdUnique = null;
		
		public readonly Guid? SupportingSolutionId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("salesliteratureitem")]
	public class SalesLiteratureItem : Entity
    {
        public const string EntityLogicalName = "salesliteratureitem";
        public SalesLiteratureItem() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("salesliteratureitemid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["salesliteratureitemid"] = value;
            }
        }
		
		public readonly OptionSetValue FileTypeCode = null;
		
		public readonly string KeyWords = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Title = null;
		
		public readonly EntityReference SalesLiteratureId = null;
		
		public readonly Guid? OrganizationId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string Abstract = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string DocumentBody = null;
		
		public readonly int? FileSize = null;
		
		public readonly Guid? SalesLiteratureItemId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string FileName = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string MimeType = null;
		
		public readonly bool? IsCustomerViewable = null;
		
		public readonly string AttachedDocumentUrl = null;
		
		public readonly string AuthorName = null;

        public new static class Options
        {
            public enum FileTypeCode
            {
                DefaultValue = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("unresolvedaddress")]
	public class UnresolvedAddress : Entity
    {
        public const string EntityLogicalName = "unresolvedaddress";
        public UnresolvedAddress() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("unresolvedaddressid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["unresolvedaddressid"] = value;
            }
        }
		
		public readonly string EMailAddress = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string Telephone = null;
		
		public readonly string FullName = null;
		
		public readonly Guid? UnresolvedAddressId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("feedback")]
	public class Feedback : Entity
    {
        public const string EntityLogicalName = "feedback";
        public Feedback() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("feedbackid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["feedbackid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly EntityReference CreatedByContact = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? FeedbackId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? MinRating = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly string Comments = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Title = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly DateTime? ClosedOn = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue Source = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ClosedBy = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? MaxRating = null;
		
		public readonly decimal? NormalizedRating = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedOnBehalfByContact = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly int? Rating = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Proposed = 1,
                Accepted = 2,
                Closed = 3,
                Rejected = 4
            }
            public enum Source
            {
                Internal = 0,
                Portal = 1
            }
            public enum StateCode
            {
                Open = 0,
                Closed = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("channelpropertygroup")]
	public class ChannelPropertyGroup : Entity
    {
        public const string EntityLogicalName = "channelpropertygroup";
        public ChannelPropertyGroup() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("channelpropertygroupid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["channelpropertygroupid"] = value;
            }
        }
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly OptionSetValue statuscode = null;
		
		public readonly Guid? ChannelPropertyGroupId = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly Guid? ChannelPropertyGroupIdUnique = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue statecode = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly OptionSetValue RegardingTypeCode = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly string Description = null;

        public new static class Options
        {
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum RegardingTypeCode
            {
                PhoneCall = 4210,
                Email = 4202,
                Appointment = 4201,
                ServiceActivity = 4214,
                Task = 4212,
                SocialActivity = 4216
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("wizardaccessprivilege")]
	public class WizardAccessPrivilege : Entity
    {
        public const string EntityLogicalName = "wizardaccessprivilege";
        public WizardAccessPrivilege() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("wizardaccessprivilegeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["wizardaccessprivilegeid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference WebWizardId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? WizardAccessPrivilegeId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? VersionNumber = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string EntityName = null;
		
		public readonly string PrivilegeName = null;
		
		public readonly EntityReference ModifiedBy = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("bulkoperation")]
	public class BulkOperation : Entity
    {
        public const string EntityLogicalName = "bulkoperation";
        public BulkOperation() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? ActualEnd = null;
		
		public readonly bool? IsRegularActivity = null;
		
		public readonly OptionSetValue OperationTypeCode = null;
		
		public readonly Guid? ActivityId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference ServiceId = null;
		
		public readonly bool? IsWorkflowCreated = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? FailureCount = null;
		
		public readonly int? TargetMembersCount = null;
		
		public readonly string Description = null;
		
		public readonly int? ScheduledDurationMinutes = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly string Parameters = null;
		
		public readonly bool? IsBilled = null;
		
		public readonly string BulkOperationNumber = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly DateTime? ActualStart = null;
		
		public readonly string ActivityTypeCode = null;
		
		public readonly int? SuccessCount = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Subject = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly OptionSetValue CreatedRecordTypeCode = null;
		
		public readonly int? ErrorNumber = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly OptionSetValue TargetedRecordTypeCode = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly int? ActualDurationMinutes = null;
		
		public readonly EntityReference OwningUser = null;

        public new static class Options
        {
            public enum OperationTypeCode
            {
                CreateOpportunities = 1,
                CreateActivities = 2,
                SendDirectMail = 3,
                Distribute = 4,
                Execute = 5,
                QuickCampaign = 7
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                ServiceActivity = 4214,
                OpportunityClose = 4208,
                OrderClose = 4209,
                QuoteClose = 4211,
                CaseResolution = 4206,
                Task = 4212,
                CampaignResponse = 4401,
                CampaignActivity = 4402,
                BulkOperation = 4406,
                RecurringAppointment = 4251
            }
            public enum StateCode
            {
                Open = 0,
                Closed = 1,
                Canceled = 2
            }
            public enum CreatedRecordTypeCode
            {
                PhoneCall = 1,
                Fax = 2,
                Letter = 3,
                Email = 4,
                Appointment = 5,
                SendDirectEmail = 6
            }
            public enum TargetedRecordTypeCode
            {
                Account = 1,
                Contact = 2,
                Lead = 4
            }
            public enum StatusCode
            {
                Pending = 1,
                InProgress = 2,
                Aborted = 3,
                Completed = 4,
                Canceled = 5
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("phonetocaseprocess")]
	public class PhoneToCaseProcess : Entity
    {
        public const string EntityLogicalName = "phonetocaseprocess";
        public PhoneToCaseProcess() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("businessprocessflowinstanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["businessprocessflowinstanceid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference IncidentId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? ActiveStageStartedOn = null;
		
		public readonly DateTime? CompletedOn = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly Guid? BusinessProcessFlowInstanceId = null;
		
		public readonly EntityReference ProcessId = null;
		
		public readonly int? Duration = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string TraversedPath = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference ActiveStageId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue StatusCode = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Finished = 2,
                Aborted = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("publisheraddress")]
	public class PublisherAddress : Entity
    {
        public const string EntityLogicalName = "publisheraddress";
        public PublisherAddress() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("publisheraddressid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["publisheraddressid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly string County = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly OptionSetValue FreightTermsCode = null;
		
		public readonly string Telephone1 = null;
		
		public readonly string PostalCode = null;
		
		public readonly string UPSZone = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string PostOfficeBox = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly OptionSetValue ShippingMethodCode = null;
		
		public readonly string StateOrProvince = null;
		
		public readonly string Line3 = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly double? Longitude = null;
		
		public readonly string Fax = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue AddressTypeCode = null;
		
		public readonly double? Latitude = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly string Telephone3 = null;
		
		public readonly string Line1 = null;
		
		public readonly int? UTCOffset = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string Country = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? AddressNumber = null;
		
		public readonly EntityReference ParentId = null;
		
		public readonly string Line2 = null;
		
		public readonly Guid? PublisherAddressId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly string City = null;
		
		public readonly string PrimaryContactName = null;
		
		public readonly string Telephone2 = null;

        public new static class Options
        {
            public enum FreightTermsCode
            {
                FOB = 1,
                NoCharge = 2
            }
            public enum ShippingMethodCode
            {
                Default = 1
            }
            public enum AddressTypeCode
            {
                BillTo = 1,
                ShipTo = 2,
                Primary = 3,
                Other = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("expiredprocess")]
	public class ExpiredProcess : Entity
    {
        public const string EntityLogicalName = "expiredprocess";
        public ExpiredProcess() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("businessprocessflowinstanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["businessprocessflowinstanceid"] = value;
            }
        }
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? BusinessProcessFlowInstanceId = null;
		
		public readonly int? ImportSequenceNumber = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? ActiveStageStartedOn = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference ActiveStageId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? Duration = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string TraversedPath = null;
		
		public readonly DateTime? CompletedOn = null;
		
		public readonly EntityReference KnowledgeArticleId = null;
		
		public readonly EntityReference ProcessId = null;
		
		public readonly EntityReference CreatedBy = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Active = 1,
                Finished = 2,
                Aborted = 3
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_postalbum")]
	public class msdyn_PostAlbum : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_postalbum";
        public msdyn_PostAlbum() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_postalbumid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_postalbumid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string msdyn_name = null;
		
		public readonly Guid? msdyn_PostAlbumId = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("recommendationcache")]
	public class RecommendationCache : Entity
    {
        public const string EntityLogicalName = "recommendationcache";
        public RecommendationCache() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("RecommendationCacheid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["RecommendationCacheid"] = value;
            }
        }
		
		public readonly EntityReference RecommendedItemId = null;
		
		public readonly bool? IsRecommendationActive = null;
		
		public readonly OptionSetValue RecommendationSource = null;
		
		public readonly OptionSetValue RecommendationType = null;
		
		public readonly EntityReference AdditionalDataRecordId = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("RecommendationCacheid")]
		public readonly Guid? RecommendationCacheId = null;
		
		public readonly EntityReference ItemId = null;
		
		public readonly EntityReference RecommendationModelId = null;
		
		public readonly decimal? RecommendationRating = null;

        public new static class Options
        {
            public enum RecommendationSource
            {
                AzureMachineLearning = 1,
                SubstituteProduct = 2
            }
            public enum RecommendationType
            {
                CrossSell = 1,
                Accessory = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("webresource")]
	public class WebResource : Entity
    {
        public const string EntityLogicalName = "webresource";
        public WebResource() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("webresourceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["webresourceid"] = value;
            }
        }
		
		public readonly Guid? SolutionId = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly OptionSetValue WebResourceType = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly Guid? WebResourceId = null;
		
		public readonly Guid? WebResourceIdUnique = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string Description = null;
		
		public readonly string DependencyXml = null;
		
		public readonly string Content = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly bool? IsEnabledForMobileClient = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly int? LanguageCode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly bool? IsAvailableForMobileOffline = null;
		
		public readonly string SilverlightVersion = null;
		
		public readonly string DisplayName = null;
		
		public readonly bool? CanBeDeleted = null;
		
		public readonly bool? IsHidden = null;
		
		public readonly DateTime? CreatedOn = null;

        public new static class Options
        {
            public enum WebResourceType
            {
                WebpageHTML = 1,
                StyleSheetCSS = 2,
                ScriptJScript = 3,
                DataXML = 4,
                PNGFormat = 5,
                JPGFormat = 6,
                GIFFormat = 7,
                SilverlightXAP = 8,
                StyleSheetXSL = 9,
                ICOFormat = 10
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("businessunit")]
	public class BusinessUnit : Entity
    {
        public const string EntityLogicalName = "businessunit";
        public BusinessUnit() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("businessunitid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["businessunitid"] = value;
            }
        }
		
		public readonly string Address2_Line2 = null;
		
		public readonly string Address2_Telephone1 = null;
		
		public readonly string Address1_PostalCode = null;
		
		public readonly string Address1_Line1 = null;
		
		public readonly OptionSetValue Address2_AddressTypeCode = null;
		
		public readonly int? Address2_UTCOffset = null;
		
		public readonly int? Address1_UTCOffset = null;
		
		public readonly int? UTCOffset = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string Address2_Line3 = null;
		
		public readonly string Address1_Telephone3 = null;
		
		public readonly bool? IsDisabled = null;
		
		public readonly string Address2_County = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string Address2_Telephone2 = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly bool? WorkflowSuspended = null;
		
		public readonly string Address1_County = null;
		
		public readonly Guid? Address2_AddressId = null;
		
		public readonly string Address1_Telephone2 = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly string Description = null;
		
		public readonly string FtpSiteUrl = null;
		
		public readonly EntityReference ParentBusinessUnitId = null;
		
		public readonly double? CreditLimit = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly double? Address2_Longitude = null;
		
		public readonly double? Address1_Longitude = null;
		
		public readonly string TickerSymbol = null;
		
		public readonly Guid? Address1_AddressId = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly string Address1_City = null;
		
		public readonly string Address2_StateOrProvince = null;
		
		public readonly string StockExchange = null;
		
		public readonly string WebSiteUrl = null;
		
		public readonly string Address2_Telephone3 = null;
		
		public readonly string Address1_UPSZone = null;
		
		public readonly string Address1_Country = null;
		
		public readonly string Address1_Line3 = null;
		
		public readonly string Address1_Name = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly string Picture = null;
		
		public readonly string FileAsName = null;
		
		public readonly string Address2_City = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string Address1_PostOfficeBox = null;
		
		public readonly string Address2_PostOfficeBox = null;
		
		public readonly Guid? UserGroupId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? InheritanceMask = null;
		
		public readonly string Address2_Line1 = null;
		
		public readonly Guid? BusinessUnitId = null;
		
		public readonly string Address1_Telephone1 = null;
		
		public readonly string Address2_Name = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly string DivisionName = null;
		
		public readonly EntityReference CalendarId = null;
		
		public readonly string Address2_PostalCode = null;
		
		public readonly string Address2_Fax = null;
		
		public readonly string Address1_Fax = null;
		
		public readonly string Address1_StateOrProvince = null;
		
		public readonly OptionSetValue Address2_ShippingMethodCode = null;
		
		public readonly string Address2_UPSZone = null;
		
		public readonly double? Address2_Latitude = null;
		
		public readonly string CostCenter = null;
		
		public readonly string Address1_Line2 = null;
		
		public readonly string Address2_Country = null;
		
		public readonly string EMailAddress = null;
		
		public readonly OptionSetValue Address1_ShippingMethodCode = null;
		
		public readonly double? Address1_Latitude = null;
		
		public readonly OptionSetValue Address1_AddressTypeCode = null;
		
		public readonly string DisabledReason = null;

        public new static class Options
        {
            public enum Address2_AddressTypeCode
            {
                DefaultValue = 1
            }
            public enum Address2_ShippingMethodCode
            {
                DefaultValue = 1
            }
            public enum Address1_ShippingMethodCode
            {
                DefaultValue = 1
            }
            public enum Address1_AddressTypeCode
            {
                DefaultValue = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("constraintbasedgroup")]
	public class ConstraintBasedGroup : Entity
    {
        public const string EntityLogicalName = "constraintbasedgroup";
        public ConstraintBasedGroup() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("constraintbasedgroupid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["constraintbasedgroupid"] = value;
            }
        }
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string Description = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly OptionSetValue GroupTypeCode = null;
		
		public readonly EntityReference BusinessUnitId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string Constraints = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly Guid? ConstraintBasedGroupId = null;
		
		public readonly int? VersionNumber = null;

        public new static class Options
        {
            public enum GroupTypeCode
            {
                Static = 0,
                Dynamic = 1,
                Hidden = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("transformationmapping")]
	public class TransformationMapping : Entity
    {
        public const string EntityLogicalName = "transformationmapping";
        public TransformationMapping() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("transformationmappingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["transformationmappingid"] = value;
            }
        }
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string TransformationTypeName = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference ImportMapId = null;
		
		public readonly string SourceEntityName = null;
		
		public readonly OptionSetValue ProcessCode = null;
		
		public readonly Guid? TransformationMappingId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string TargetEntityName = null;
		
		public readonly OptionSetValue StatusCode = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;

        public new static class Options
        {
            public enum ProcessCode
            {
                Process = 1,
                Ignore = 2,
                Internal = 3
            }
            public enum StatusCode
            {
                Active = 0
            }
            public enum StateCode
            {
                Active = 0
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("slakpiinstance")]
	public class SLAKPIInstance : Entity
    {
        public const string EntityLogicalName = "slakpiinstance";
        public SLAKPIInstance() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("slakpiinstanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["slakpiinstanceid"] = value;
            }
        }
		
		public readonly Guid? SLAKPIInstanceId = null;
		
		public readonly DateTime? WarningTime = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly OptionSetValue WarningTimeReached = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string Description = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly DateTime? ComputedWarningTime = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? SucceededOn = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly DateTime? ComputedFailureTime = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly OptionSetValue Status = null;
		
		public readonly EntityReference ModifiedBy = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly DateTime? FailureTime = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference Regarding = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;

        public new static class Options
        {
            public enum WarningTimeReached
            {
                No = 0,
                Yes = 1
            }
            public enum Status
            {
                InProgress = 0,
                Noncompliant = 1,
                NearingNoncompliance = 2,
                Paused = 3,
                Succeeded = 4,
                Canceled = 5
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("tracelog")]
	public class TraceLog : Entity
    {
        public const string EntityLogicalName = "tracelog";
        public TraceLog() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("tracelogid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["tracelogid"] = value;
            }
        }
		
		public readonly string ErrorTypeDisplay = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string ErrorDetails = null;
		
		public readonly int? TraceCode = null;
		
		public readonly string MachineName = null;
		
		public readonly string TraceActionXml = null;
		
		public readonly string TraceParameterXml = null;
		
		public readonly bool? CanBeDeleted = null;
		
		public readonly Guid? TraceLogId = null;
		
		public readonly EntityReference CreatedBy = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Text = null;
		
		public readonly bool? TraceStatus = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference ParentTraceLogId = null;
		
		public readonly string TraceDetailXml = null;
		
		public readonly bool? IsUnique = null;
		
		public readonly EntityReference TraceRegardingId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly OptionSetValue Level = null;
		
		public readonly int? TraceParameterHash = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly int? CollationLevel = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference RegardingObjectOwningBusinessUnit = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference RegardingObjectOwnerId = null;

        public new static class Options
        {
            public enum Level
            {
                Information = 1,
                Warning = 2,
                Error = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("topichistory")]
	public class TopicHistory : Entity
    {
        public const string EntityLogicalName = "topichistory";
        public TopicHistory() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("topichistoryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["topichistoryid"] = value;
            }
        }
		
		public readonly EntityReference TopicModelExecutionHistoryId = null;
		
		public readonly Guid? TopicHistoryId = null;
		
		public readonly string KeyPhrase = null;
		
		public readonly int? Weight = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("convertruleitem")]
	public class ConvertRuleItem : Entity
    {
        public const string EntityLogicalName = "convertruleitem";
        public ConvertRuleItem() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("convertruleitemid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["convertruleitemid"] = value;
            }
        }
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Guid? ConvertRuleItemIdUnique = null;
		
		public readonly int? SequenceNumber = null;
		
		public readonly string PropertiesXml = null;
		
		public readonly EntityReference WorkflowId = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference QueueId = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string ConditionXml = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly EntityReference ConvertRuleId = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly EntityReference ConditionId = null;
		
		public readonly Guid? ConvertRuleItemId = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly EntityReference OwningBusinessUnit = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("appmoduleroles")]
	public class AppModuleRoles : Entity
    {
        public const string EntityLogicalName = "appmoduleroles";
        public AppModuleRoles() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("appmoduleroleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["appmoduleroleid"] = value;
            }
        }
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly EntityReference AppModuleId = null;
		
		public readonly EntityReference RoleId = null;
		
		public readonly Guid? AppModuleRoleId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? AppModuleRoleIdUnique = null;
		
		public readonly DateTime? OverwriteTime = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("role")]
	public class Role : Entity
    {
        public const string EntityLogicalName = "role";
        public Role() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("roleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["roleid"] = value;
            }
        }
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly EntityReference ParentRoleId = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference RoleTemplateId = null;
		
		public readonly EntityReference BusinessUnitId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly Guid? RoleIdUnique = null;
		
		public readonly EntityReference ParentRootRoleId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? OrganizationId = null;
		
		public readonly Guid? RoleId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("connectionroleobjecttypecode")]
	public class ConnectionRoleObjectTypeCode : Entity
    {
        public const string EntityLogicalName = "connectionroleobjecttypecode";
        public ConnectionRoleObjectTypeCode() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("connectionroleobjecttypecodeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["connectionroleobjecttypecodeid"] = value;
            }
        }
		
		public readonly Guid? ConnectionRoleObjectTypeCodeId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string AssociatedObjectTypeCode = null;
		
		public readonly Guid? OrganizationId = null;
		
		public readonly EntityReference ConnectionRoleId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("bulkdeleteoperation")]
	public class BulkDeleteOperation : Entity
    {
        public const string EntityLogicalName = "bulkdeleteoperation";
        public BulkDeleteOperation() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("bulkdeleteoperationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["bulkdeleteoperationid"] = value;
            }
        }
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference AsyncOperationId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? BulkDeleteOperationId = null;
		
		public readonly DateTime? NextRun = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? FailureCount = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string OrderedQuerySetXml = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? SuccessCount = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly bool? IsRecurring = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly int? ProcessingQEIndex = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly OptionSetValue StateCode = null;

        public new static class Options
        {
            public enum StatusCode
            {
                WaitingForResources = 0,
                Waiting = 10,
                Retrying = 11,
                Paused = 12,
                InProgress = 20,
                Pausing = 21,
                Canceling = 22,
                Succeeded = 30,
                Failed = 31,
                Canceled = 32
            }
            public enum StateCode
            {
                Ready = 0,
                Suspended = 1,
                Locked = 2,
                Completed = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("transactioncurrency")]
	public class TransactionCurrency : Entity
    {
        public const string EntityLogicalName = "transactioncurrency";
        public TransactionCurrency() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("transactioncurrencyid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["transactioncurrencyid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string CurrencyName = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly string ISOCurrencyCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly int? CurrencyPrecision = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string CurrencySymbol = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly Guid? UniqueDscId = null;
		
		public readonly Guid? TransactionCurrencyId = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference CreatedBy = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("solution")]
	public class Solution : Entity
    {
        public const string EntityLogicalName = "solution";
        public Solution() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("solutionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["solutionid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string PinpointSolutionDefaultLocale = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? PinpointSolutionId = null;
		
		public readonly EntityReference ParentSolutionId = null;
		
		public readonly string SolutionPackageVersion = null;
		
		public readonly EntityReference ConfigurationPageId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? CreatedOn = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string FriendlyName = null;
		
		public readonly bool? IsVisible = null;
		
		public readonly string Version = null;
		
		public readonly string UniqueName = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? PinpointPublisherId = null;
		
		public readonly EntityReference PublisherId = null;
		
		public readonly bool? IsInternal = null;
		
		public readonly OptionSetValue SolutionType = null;
		
		public readonly DateTime? InstalledOn = null;
		
		public readonly string PinpointAssetId = null;

        public new static class Options
        {
            public enum SolutionType
            {
                None = 0,
                Snapshot = 1,
                Internal = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("knowledgearticleincident")]
	public class KnowledgeArticleIncident : Entity
    {
        public const string EntityLogicalName = "knowledgearticleincident";
        public KnowledgeArticleIncident() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("knowledgearticleincidentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["knowledgearticleincidentid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly Guid? OwningBusinessUnit = null;
		
		public readonly int? VersionNumber = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue statecode = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly bool? IsSentToCustomer = null;
		
		public readonly Guid? KnowledgeArticleIncidentId = null;
		
		public readonly Guid? OwningUser = null;
		
		public readonly EntityReference IncidentId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly OptionSetValue KnowledgeUsage = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference KnowledgeArticleId = null;
		
		public readonly OptionSetValue statuscode = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference CreatedBy = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum KnowledgeUsage
            {
                Reference = 1,
                Solution = 2,
                Source = 3
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("transformationparametermapping")]
	public class TransformationParameterMapping : Entity
    {
        public const string EntityLogicalName = "transformationparametermapping";
        public TransformationParameterMapping() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("transformationparametermappingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["transformationparametermappingid"] = value;
            }
        }
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? ParameterArrayIndex = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly OptionSetValue ParameterTypeCode = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Data = null;
		
		public readonly Guid? TransformationParameterMappingId = null;
		
		public readonly EntityReference TransformationMappingId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly OptionSetValue DataTypeCode = null;
		
		public readonly int? ParameterSequence = null;

        public new static class Options
        {
            public enum ParameterTypeCode
            {
                Input = 0,
                Output = 1
            }
            public enum DataTypeCode
            {
                Reference = 0,
                Value = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("email")]
	public class Email : Entity
    {
        public const string EntityLogicalName = "email";
        public Email() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }
		
		public readonly int? AttachmentCount = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly Guid? ActivityId = null;
		
		public readonly bool? IsWorkflowCreated = null;
		
		public readonly EntityReference ServiceId = null;
		
		public readonly string ToRecipients = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly Guid? StageId = null;
		
		public readonly DateTime? PostponeEmailProcessingUntil = null;
		
		public readonly string SubmittedBy = null;
		
		public readonly DateTime? SentOn = null;
		
		public readonly string EmailReminderText = null;
		
		public readonly int? OpenCount = null;
		
		public readonly string TrackingToken = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string Sender = null;
		
		public readonly DateTime? EmailReminderExpiryTime = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string MessageId = null;
		
		public readonly EntityReference EmailSender = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly OptionSetValue DeliveryPriorityCode = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? ScheduledDurationMinutes = null;
		
		public readonly string ConversationIndex = null;
		
		public readonly bool? IsRegularActivity = null;
		
		public readonly EntityReference ParentActivityId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityCollection to = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly OptionSetValue Notifications = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly int? DeliveryAttempts = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly Guid? EmailTrackingId = null;
		
		public readonly Guid? MessageIdDupCheck = null;
		
		public readonly string InReplyTo = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly EntityReference TemplateId = null;
		
		public readonly Guid? ConversationTrackingId = null;
		
		public readonly bool? DirectionCode = null;
		
		public readonly EntityReference SenderMailboxId = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly int? LinksClickedCount = null;
		
		public readonly OptionSetValue EmailReminderType = null;
		
		public readonly Guid? ReminderActionCardId = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly DateTime? ActualEnd = null;
		
		public readonly EntityCollection bcc = null;
		
		public readonly int? ReplyCount = null;
		
		public readonly bool? DeliveryReceiptRequested = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Subject = null;
		
		public readonly string TraversedPath = null;
		
		public readonly int? BaseConversationIndexHash = null;
		
		public readonly int? AttachmentOpenCount = null;
		
		public readonly bool? FollowEmailUserPreference = null;
		
		public readonly OptionSetValue EmailReminderStatus = null;
		
		public readonly int? ActualDurationMinutes = null;
		
		public readonly DateTime? SortDate = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly bool? IsBilled = null;
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly DateTime? LastOpenedTime = null;
		
		public readonly string ActivityTypeCode = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly string Subcategory = null;
		
		public readonly string Description = null;
		
		public readonly bool? Compressed = null;
		
		public readonly string ActivityAdditionalParams = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly bool? IsEmailFollowed = null;
		
		public readonly int? IsUnsafe = null;
		
		public readonly EntityCollection cc = null;
		
		public readonly string Category = null;
		
		public readonly DateTime? ActualStart = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference SendersAccount = null;
		
		public readonly bool? ReadReceiptRequested = null;
		
		public readonly string MimeType = null;
		
		public readonly EntityCollection from = null;
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly DateTime? DelayedEmailSendTime = null;
		
		public readonly OptionSetValue CorrelationMethod = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;

        public new static class Options
        {
            public enum DeliveryPriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum Notifications
            {
                None = 0,
                TheMessageWasSavedAsAMicrosoftDynamics365EmailRecordButNotAllTheAttachmentsCouldBeSavedWithItAnAttachmentCannotBeSavedIfItIsBlockedOrIfItsFileTypeIsInvalid = 1,
                TruncatedBody = 2
            }
            public enum StatusCode
            {
                Draft = 1,
                Completed = 2,
                Sent = 3,
                Received = 4,
                Canceled = 5,
                PendingSend = 6,
                Sending = 7,
                Failed = 8
            }
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum EmailReminderType
            {
                IfIDoNotReceiveAReplyBy = 0,
                IfTheEmailIsNotOpenedBy = 1,
                RemindMeAnywayAt = 2
            }
            public enum EmailReminderStatus
            {
                NotSet = 0,
                ReminderSet = 1,
                ReminderExpired = 2,
                ReminderInvalid = 3
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                ServiceActivity = 4214,
                OpportunityClose = 4208,
                OrderClose = 4209,
                QuoteClose = 4211,
                CaseResolution = 4206,
                Task = 4212,
                CampaignResponse = 4401,
                CampaignActivity = 4402,
                BulkOperation = 4406,
                RecurringAppointment = 4251
            }
            public enum StateCode
            {
                Open = 0,
                Completed = 1,
                Canceled = 2
            }
            public enum CorrelationMethod
            {
                None = 0,
                Skipped = 1,
                XHeader = 2,
                InReplyTo = 3,
                TrackingToken = 4,
                ConversationIndex = 5,
                SmartMatching = 6,
                CustomCorrelation = 7
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sitemap")]
	public class SiteMap : Entity
    {
        public const string EntityLogicalName = "sitemap";
        public SiteMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sitemapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sitemapid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly string SiteMapName = null;
		
		public readonly Guid? SiteMapIdUnique = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly bool? IsAppAware = null;
		
		public readonly string SiteMapXml = null;
		
		public readonly string SiteMapNameUnique = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly string SiteMapXmlManaged = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly Guid? SiteMapId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("bookableresourcebookingexchangesyncidmapping")]
	public class BookableResourceBookingExchangeSyncIdMapping : Entity
    {
        public const string EntityLogicalName = "bookableresourcebookingexchangesyncidmapping";
        public BookableResourceBookingExchangeSyncIdMapping() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("bookableresourcebookingexchangesyncidmappingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["bookableresourcebookingexchangesyncidmappingid"] = value;
            }
        }
		
		public readonly int? SyncVersionNumber = null;
		
		public readonly int? Retries = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly int? LastSyncErrorCode = null;
		
		public readonly OptionSetValue SyncStatus = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? BookableResourceBookingExchangeSyncIdMappingId = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference UserId = null;
		
		public readonly DateTime? LastSyncErrorOccurredOn = null;
		
		public readonly Guid? BookableResourceBookingId = null;
		
		public readonly string ExchangeEntryId = null;
		
		public readonly bool? IsDeletedInExchange = null;
		
		public readonly string LastSyncError = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference OwningBusinessUnit = null;

        public new static class Options
        {
            public enum SyncStatus
            {
                Completed = 0,
                Retry = 1,
                Pending = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("opportunity")]
	public class Opportunity : Entity
    {
        public const string EntityLogicalName = "opportunity";
        public Opportunity() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("opportunityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["opportunityid"] = value;
            }
        }
		
		public readonly string CurrentSituation = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly Guid? StageId = null;
		
		public readonly EntityReference CustomerId = null;
		
		public readonly OptionSetValue SalesStageCode = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly OptionSetValue InitialCommunication = null;
		
		public readonly Money FreightAmount_Base = null;
		
		public readonly bool? SendThankYouNote = null;
		
		public readonly bool? CaptureProposalFeedback = null;
		
		public readonly string QualificationComments = null;
		
		public readonly Money TotalLineItemAmount_Base = null;
		
		public readonly DateTime? ActualCloseDate = null;
		
		public readonly bool? EvaluateFit = null;
		
		public readonly EntityReference CampaignId = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly bool? CompleteInternalReview = null;
		
		public readonly bool? IdentifyCompetitors = null;
		
		public readonly bool? FileDebrief = null;
		
		public readonly OptionSetValue SalesStage = null;
		
		public readonly bool? IdentifyPursuitTeam = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Guid? OpportunityId = null;
		
		public readonly string StepName = null;
		
		public readonly bool? IsPrivate = null;
		
		public readonly Money ActualValue = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference ContactId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly DateTime? ScheduleFollowup_Qualify = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference PriceLevelId = null;
		
		public readonly int? CloseProbability = null;
		
		public readonly bool? ParticipatesInWorkflow = null;
		
		public readonly EntityReference ParentAccountId = null;
		
		public readonly bool? DecisionMaker = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly OptionSetValue TimeLine = null;
		
		public readonly Money DiscountAmount_Base = null;
		
		public readonly OptionSetValue Need = null;
		
		public readonly Money TotalAmount = null;
		
		public readonly bool? CompleteFinalProposal = null;
		
		public readonly string ProposedSolution = null;
		
		public readonly Money TotalLineItemAmount = null;
		
		public readonly Money DiscountAmount = null;
		
		public readonly OptionSetValue PurchaseProcess = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly Money TotalDiscountAmount = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly OptionSetValue OpportunityRatingCode = null;
		
		public readonly Money TotalLineItemDiscountAmount = null;
		
		public readonly bool? ResolveFeedback = null;
		
		public readonly DateTime? ScheduleProposalMeeting = null;
		
		public readonly DateTime? FinalDecisionDate = null;
		
		public readonly Money EstimatedValue = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly DateTime? ScheduleFollowup_Prospect = null;
		
		public readonly bool? DevelopProposal = null;
		
		public readonly Money FreightAmount = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly Money TotalDiscountAmount_Base = null;
		
		public readonly bool? IdentifyCustomerContacts = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Money TotalAmountLessFreight = null;
		
		public readonly EntityReference AccountId = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly EntityReference OriginatingLeadId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly bool? IsRevenueSystemCalculated = null;
		
		public readonly Money ActualValue_Base = null;
		
		public readonly OptionSetValue BudgetStatus = null;
		
		public readonly Money TotalLineItemDiscountAmount_Base = null;
		
		public readonly string Description = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Money TotalAmount_Base = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly decimal? DiscountPercentage = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly Money TotalAmountLessFreight_Base = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? StepId = null;
		
		public readonly bool? ConfirmInterest = null;
		
		public readonly Money BudgetAmount = null;
		
		public readonly Money BudgetAmount_Base = null;
		
		public readonly Money TotalTax = null;
		
		public readonly string TraversedPath = null;
		
		public readonly string TimeSpentByMeOnEmailAndMeetings = null;
		
		public readonly bool? PresentProposal = null;
		
		public readonly bool? PursuitDecision = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference ParentContactId = null;
		
		public readonly string CustomerPainPoints = null;
		
		public readonly bool? PresentFinalProposal = null;
		
		public readonly DateTime? EstimatedCloseDate = null;
		
		public readonly string QuoteComments = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly Money TotalTax_Base = null;
		
		public readonly Money EstimatedValue_Base = null;
		
		public readonly OptionSetValue PricingErrorCode = null;
		
		public readonly string CustomerNeed = null;
		
		public readonly OptionSetValue PurchaseTimeframe = null;

        public new static class Options
        {
            public enum PriorityCode
            {
                DefaultValue = 1
            }
            public enum SalesStageCode
            {
                DefaultValue = 1
            }
            public enum StateCode
            {
                Open = 0,
                Won = 1,
                Lost = 2
            }
            public enum InitialCommunication
            {
                Contacted = 0,
                NotContacted = 1
            }
            public enum SalesStage
            {
                Qualify = 0,
                Develop = 1,
                Propose = 2,
                Close = 3
            }
            public enum TimeLine
            {
                Immediate = 0,
                ThisQuarter = 1,
                NextQuarter = 2,
                ThisYear = 3,
                NotKnown = 4
            }
            public enum Need
            {
                MustHave = 0,
                ShouldHave = 1,
                GoodToHave = 2,
                NoNeed = 3
            }
            public enum PurchaseProcess
            {
                Individual = 0,
                Committee = 1,
                Unknown = 2
            }
            public enum OpportunityRatingCode
            {
                Hot = 1,
                Warm = 2,
                Cold = 3
            }
            public enum BudgetStatus
            {
                NoCommittedBudget = 0,
                MayBuy = 1,
                CanBuy = 2,
                WillBuy = 3
            }
            public enum StatusCode
            {
                InProgress = 1,
                OnHold = 2,
                Won = 3,
                Canceled = 4,
                OutSold = 5
            }
            public enum PricingErrorCode
            {
                None = 0,
                DetailError = 1,
                MissingPriceLevel = 2,
                InactivePriceLevel = 3,
                MissingQuantity = 4,
                MissingUnitPrice = 5,
                MissingProduct = 6,
                InvalidProduct = 7,
                MissingPricingCode = 8,
                InvalidPricingCode = 9,
                MissingUOM = 10,
                ProductNotInPriceLevel = 11,
                MissingPriceLevelAmount = 12,
                MissingPriceLevelPercentage = 13,
                MissingPrice = 14,
                MissingCurrentCost = 15,
                MissingStandardCost = 16,
                InvalidPriceLevelAmount = 17,
                InvalidPriceLevelPercentage = 18,
                InvalidPrice = 19,
                InvalidCurrentCost = 20,
                InvalidStandardCost = 21,
                InvalidRoundingPolicy = 22,
                InvalidRoundingOption = 23,
                InvalidRoundingAmount = 24,
                PriceCalculationError = 25,
                InvalidDiscountType = 26,
                DiscountTypeInvalidState = 27,
                InvalidDiscount = 28,
                InvalidQuantity = 29,
                InvalidPricingPrecision = 30,
                MissingProductDefaultUOM = 31,
                MissingProductUOMSchedule = 32,
                InactiveDiscountType = 33,
                InvalidPriceLevelCurrency = 34,
                PriceAttributeOutOfRange = 35,
                BaseCurrencyAttributeOverflow = 36,
                BaseCurrencyAttributeUnderflow = 37
            }
            public enum PurchaseTimeframe
            {
                Immediate = 0,
                ThisQuarter = 1,
                NextQuarter = 2,
                ThisYear = 3,
                Unknown = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("campaign")]
	public class Campaign : Entity
    {
        public const string EntityLogicalName = "campaign";
        public Campaign() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("campaignid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["campaignid"] = value;
            }
        }
		
		public readonly Money BudgetedCost = null;
		
		public readonly bool? IsTemplate = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly DateTime? ActualStart = null;
		
		public readonly string TraversedPath = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly DateTime? ActualEnd = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly Money TotalActualCost_Base = null;
		
		public readonly OptionSetValue TypeCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly Money TotalCampaignActivityActualCost = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly Money OtherCost = null;
		
		public readonly string Objective = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly Money BudgetedCost_Base = null;
		
		public readonly string Message = null;
		
		public readonly Money TotalCampaignActivityActualCost_Base = null;
		
		public readonly Guid? CampaignId = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Guid? StageId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference PriceListId = null;
		
		public readonly DateTime? ProposedEnd = null;
		
		public readonly Money ExpectedRevenue = null;
		
		public readonly Money ExpectedRevenue_Base = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly string CodeName = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly Money TotalActualCost = null;
		
		public readonly int? ExpectedResponse = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string PromotionCodeName = null;
		
		public readonly Money OtherCost_Base = null;
		
		public readonly DateTime? ProposedStart = null;
		
		public readonly int? ImportSequenceNumber = null;

        public new static class Options
        {
            public enum TypeCode
            {
                Advertisement = 1,
                DirectMarketing = 2,
                Event = 3,
                CoBranding = 4,
                Other = 5
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Proposed = 0,
                ReadyToLaunch = 1,
                Launched = 2,
                Completed = 3,
                Canceled = 4,
                Suspended = 5,
                Inactive = 6
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("bookingstatus")]
	public class BookingStatus : Entity
    {
        public const string EntityLogicalName = "bookingstatus";
        public BookingStatus() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("bookingstatusid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["bookingstatusid"] = value;
            }
        }
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly OptionSetValue Status = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly string Description = null;
		
		public readonly Guid? BookingStatusId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly DateTime? ModifiedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum Status
            {
                Proposed = 1,
                Committed = 2,
                Canceled = 3
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("account")]
	public class Account : Entity
    {
        public const string EntityLogicalName = "account";
        public Account() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("accountid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["accountid"] = value;
            }
        }
		
		public readonly EntityReference DefaultPriceLevelId = null;
		
		public readonly OptionSetValue Address1_ShippingMethodCode = null;
		
		public readonly OptionSetValue IndustryCode = null;
		
		public readonly string Address2_Fax = null;
		
		public readonly bool? DoNotFax = null;
		
		public readonly string Description = null;
		
		public readonly OptionSetValue AccountRatingCode = null;
		
		public readonly Money OpenRevenue = null;
		
		public readonly string Address2_City = null;
		
		public readonly string Address2_UPSZone = null;
		
		public readonly Money Aging60_Base = null;
		
		public readonly string Address1_Telephone1 = null;
		
		public readonly bool? DoNotPhone = null;
		
		public readonly OptionSetValue OwnershipCode = null;
		
		public readonly string Address1_Fax = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly string Address2_Line2 = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string Address2_Country = null;
		
		public readonly string Address2_PostOfficeBox = null;
		
		public readonly Money Aging30_Base = null;
		
		public readonly OptionSetValue AccountClassificationCode = null;
		
		public readonly EntityReference OriginatingLeadId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string TickerSymbol = null;
		
		public readonly string Address1_Name = null;
		
		public readonly Money Revenue_Base = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly DateTime? LastUsedInCampaign = null;
		
		public readonly Guid? Address1_AddressId = null;
		
		public readonly double? Address1_Latitude = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly bool? DoNotBulkPostalMail = null;
		
		public readonly string Address1_Country = null;
		
		public readonly OptionSetValue CustomerSizeCode = null;
		
		public readonly int? OpenDeals_State = null;
		
		public readonly string Address1_PostalCode = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly string Fax = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference MasterId = null;
		
		public readonly string Address2_StateOrProvince = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly string Address1_Telephone2 = null;
		
		public readonly EntityReference ModifiedByExternalParty = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly string Address1_Line1 = null;
		
		public readonly Money CreditLimit = null;
		
		public readonly int? Address1_UTCOffset = null;
		
		public readonly string PrimaryTwitterId = null;
		
		public readonly EntityReference PreferredEquipmentId = null;
		
		public readonly string Address1_PrimaryContactName = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly string Address2_Composite = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly string AccountNumber = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly string Telephone1 = null;
		
		public readonly string Address2_Telephone1 = null;
		
		public readonly string Address1_City = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly bool? CreditOnHold = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Money Aging90 = null;
		
		public readonly string Address1_County = null;
		
		public readonly int? SharesOutstanding = null;
		
		public readonly int? NumberOfEmployees = null;
		
		public readonly string Address2_Telephone3 = null;
		
		public readonly OptionSetValue ShippingMethodCode = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue Address1_FreightTermsCode = null;
		
		public readonly bool? MarketingOnly = null;
		
		public readonly string YomiName = null;
		
		public readonly double? Address2_Latitude = null;
		
		public readonly string Telephone3 = null;
		
		public readonly int? Address2_UTCOffset = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly string Address2_Line1 = null;
		
		public readonly bool? DoNotEMail = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly bool? DoNotSendMM = null;
		
		public readonly string Address1_Telephone3 = null;
		
		public readonly string Address2_PostalCode = null;
		
		public readonly string WebSiteURL = null;
		
		public readonly bool? IsPrivate = null;
		
		public readonly string Address2_Line3 = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly OptionSetValue BusinessTypeCode = null;
		
		public readonly OptionSetValue Address2_FreightTermsCode = null;
		
		public readonly OptionSetValue AccountCategoryCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string Telephone2 = null;
		
		public readonly string EMailAddress3 = null;
		
		public readonly EntityReference PreferredServiceId = null;
		
		public readonly bool? Merged = null;
		
		public readonly string SIC = null;
		
		public readonly string Address2_County = null;
		
		public readonly EntityReference CreatedByExternalParty = null;
		
		public readonly double? Address1_Longitude = null;
		
		public readonly EntityReference ParentAccountId = null;
		
		public readonly OptionSetValue PaymentTermsCode = null;
		
		public readonly OptionSetValue PreferredContactMethodCode = null;
		
		public readonly string Address2_PrimaryContactName = null;
		
		public readonly Guid? StageId = null;
		
		public readonly int? OpenDeals = null;
		
		public readonly string Address1_Line3 = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly bool? DoNotPostalMail = null;
		
		public readonly string TraversedPath = null;
		
		public readonly Money Aging60 = null;
		
		public readonly bool? ParticipatesInWorkflow = null;
		
		public readonly string TimeSpentByMeOnEmailAndMeetings = null;
		
		public readonly Money MarketCap = null;
		
		public readonly string EMailAddress1 = null;
		
		public readonly Guid? Address2_AddressId = null;
		
		public readonly Money Aging90_Base = null;
		
		public readonly OptionSetValue TerritoryCode = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly bool? FollowEmail = null;
		
		public readonly string Address1_Line2 = null;
		
		public readonly OptionSetValue CustomerTypeCode = null;
		
		public readonly int? OpenRevenue_State = null;
		
		public readonly string Address2_Telephone2 = null;
		
		public readonly OptionSetValue Address1_AddressTypeCode = null;
		
		public readonly Guid? AccountId = null;
		
		public readonly Money CreditLimit_Base = null;
		
		public readonly string Address1_StateOrProvince = null;
		
		public readonly Money Aging30 = null;
		
		public readonly bool? DoNotBulkEMail = null;
		
		public readonly string PrimarySatoriId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly Money OpenRevenue_Base = null;
		
		public readonly OptionSetValue Address2_ShippingMethodCode = null;
		
		public readonly DateTime? OpenDeals_Date = null;
		
		public readonly string Address1_PostOfficeBox = null;
		
		public readonly string Address1_UPSZone = null;
		
		public readonly string StockExchange = null;
		
		public readonly double? Address2_Longitude = null;
		
		public readonly EntityReference PreferredSystemUserId = null;
		
		public readonly string Address2_Name = null;
		
		public readonly Money MarketCap_Base = null;
		
		public readonly OptionSetValue Address2_AddressTypeCode = null;
		
		public readonly DateTime? OpenRevenue_Date = null;
		
		public readonly OptionSetValue PreferredAppointmentTimeCode = null;
		
		public readonly string Address1_Composite = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly OptionSetValue PreferredAppointmentDayCode = null;
		
		public readonly string FtpSiteURL = null;
		
		public readonly EntityReference PrimaryContactId = null;
		
		public readonly EntityReference TerritoryId = null;
		
		public readonly Money Revenue = null;
		
		public readonly string EMailAddress2 = null;

        public new static class Options
        {
            public enum Address1_ShippingMethodCode
            {
                Airborne = 1,
                DHL = 2,
                FedEx = 3,
                UPS = 4,
                PostalMail = 5,
                FullLoad = 6,
                WillCall = 7
            }
            public enum IndustryCode
            {
                Accounting = 1,
                AgricultureAndNonPetrolNaturalResourceExtraction = 2,
                BroadcastingPrintingAndPublishing = 3,
                Brokers = 4,
                BuildingSupplyRetail = 5,
                BusinessServices = 6,
                Consulting = 7,
                ConsumerServices = 8,
                DesignDirectionAndCreativeManagement = 9,
                DistributorsDispatchersAndProcessors = 10,
                DoctorSOfficesAndClinics = 11,
                DurableManufacturing = 12,
                EatingAndDrinkingPlaces = 13,
                EntertainmentRetail = 14,
                EquipmentRentalAndLeasing = 15,
                Financial = 16,
                FoodAndTobaccoProcessing = 17,
                InboundCapitalIntensiveProcessing = 18,
                InboundRepairAndServices = 19,
                Insurance = 20,
                LegalServices = 21,
                NonDurableMerchandiseRetail = 22,
                OutboundConsumerService = 23,
                PetrochemicalExtractionAndDistribution = 24,
                ServiceRetail = 25,
                SIGAffiliations = 26,
                SocialServices = 27,
                SpecialOutboundTradeContractors = 28,
                SpecialtyRealty = 29,
                Transportation = 30,
                UtilityCreationAndDistribution = 31,
                VehicleRetail = 32,
                Wholesale = 33
            }
            public enum AccountRatingCode
            {
                DefaultValue = 1
            }
            public enum OwnershipCode
            {
                Public = 1,
                Private = 2,
                Subsidiary = 3,
                Other = 4
            }
            public enum AccountClassificationCode
            {
                DefaultValue = 1
            }
            public enum CustomerSizeCode
            {
                DefaultValue = 1
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ShippingMethodCode
            {
                DefaultValue = 1
            }
            public enum Address1_FreightTermsCode
            {
                FOB = 1,
                NoCharge = 2
            }
            public enum BusinessTypeCode
            {
                DefaultValue = 1
            }
            public enum Address2_FreightTermsCode
            {
                DefaultValue = 1
            }
            public enum AccountCategoryCode
            {
                PreferredCustomer = 1,
                Standard = 2
            }
            public enum PaymentTermsCode
            {
                Net30 = 1,
                _210Net30 = 2,
                Net45 = 3,
                Net60 = 4
            }
            public enum PreferredContactMethodCode
            {
                Any = 1,
                Email = 2,
                Phone = 3,
                Fax = 4,
                Mail = 5
            }
            public enum TerritoryCode
            {
                DefaultValue = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum CustomerTypeCode
            {
                Competitor = 1,
                Consultant = 2,
                Customer = 3,
                Investor = 4,
                Partner = 5,
                Influencer = 6,
                Press = 7,
                Prospect = 8,
                Reseller = 9,
                Supplier = 10,
                Vendor = 11,
                Other = 12
            }
            public enum Address1_AddressTypeCode
            {
                BillTo = 1,
                ShipTo = 2,
                Primary = 3,
                Other = 4
            }
            public enum Address2_ShippingMethodCode
            {
                DefaultValue = 1
            }
            public enum Address2_AddressTypeCode
            {
                DefaultValue = 1
            }
            public enum PreferredAppointmentTimeCode
            {
                Morning = 1,
                Afternoon = 2,
                Evening = 3
            }
            public enum PreferredAppointmentDayCode
            {
                Sunday = 0,
                Monday = 1,
                Tuesday = 2,
                Wednesday = 3,
                Thursday = 4,
                Friday = 5,
                Saturday = 6
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("kbarticle")]
	public class KbArticle : Entity
    {
        public const string EntityLogicalName = "kbarticle";
        public KbArticle() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("kbarticleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["kbarticleid"] = value;
            }
        }
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly string Content = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference SubjectId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Guid? KbArticleId = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Title = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? LanguageCode = null;
		
		public readonly string KeyWords = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string Description = null;
		
		public readonly string Number = null;
		
		public readonly string ArticleXml = null;
		
		public readonly EntityReference KbArticleTemplateId = null;
		
		public readonly string Comments = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly EntityReference CreatedBy = null;

        public new static class Options
        {
            public enum StateCode
            {
                Draft = 1,
                Unapproved = 2,
                Published = 3
            }
            public enum StatusCode
            {
                Draft = 1,
                Unapproved = 2,
                Published = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("importfile")]
	public class ImportFile : Entity
    {
        public const string EntityLogicalName = "importfile";
        public ImportFile() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("importfileid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["importfileid"] = value;
            }
        }
		
		public readonly string Source = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly string HeaderRow = null;
		
		public readonly EntityReference ImportMapId = null;
		
		public readonly bool? EnableDuplicateDetection = null;
		
		public readonly string Size = null;
		
		public readonly OptionSetValue FileTypeCode = null;
		
		public readonly bool? UseSystemMap = null;
		
		public readonly string Content = null;
		
		public readonly string ParsedTableName = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string AdditionalHeaderRow = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly OptionSetValue ProcessingStatus = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly string RelatedEntityColumns = null;
		
		public readonly int? PartialFailureCount = null;
		
		public readonly Guid? ImportFileId = null;
		
		public readonly DateTime? CreatedOn = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly DateTime? ModifiedOn = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly string SourceEntityName = null;
		
		public readonly int? ProgressCounter = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly OptionSetValue FieldDelimiterCode = null;
		
		public readonly EntityReference ImportId = null;
		
		public readonly int? TotalCount = null;
		
		public readonly OptionSetValue DataDelimiterCode = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? CompletedOn = null;
		
		public readonly OptionSetValue ProcessCode = null;
		
		public readonly bool? IsFirstRowHeader = null;
		
		public readonly string TargetEntityName = null;
		
		public readonly int? SuccessCount = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? ParsedTableColumnsNumber = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly int? FailureCount = null;
		
		public readonly EntityReference RecordsOwnerId = null;
		
		public readonly string ParsedTableColumnPrefix = null;

        public new static class Options
        {
            public enum FileTypeCode
            {
                CSV = 0,
                XMLSpreadsheet2003 = 1,
                Attachment = 2,
                XLSX = 3
            }
            public enum ProcessingStatus
            {
                NotStarted = 1,
                Parsing = 2,
                ParsingComplete = 3,
                ComplexTransformation = 4,
                LookupTransformation = 5,
                PicklistTransformation = 6,
                OwnerTransformation = 7,
                TransformationComplete = 8,
                ImportPass1 = 9,
                ImportPass2 = 10,
                ImportComplete = 11,
                PrimaryKeyTransformation = 12
            }
            public enum StateCode
            {
                Active = 0
            }
            public enum FieldDelimiterCode
            {
                Colon = 1,
                Comma = 2,
                Tab = 3,
                Semicolon = 4
            }
            public enum DataDelimiterCode
            {
                DoubleQuote = 1,
                None = 2,
                SingleQuote = 3
            }
            public enum StatusCode
            {
                Submitted = 0,
                Parsing = 1,
                Transforming = 2,
                Importing = 3,
                Completed = 4,
                Failed = 5
            }
            public enum ProcessCode
            {
                Process = 1,
                Ignore = 2,
                Internal = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("serviceappointment")]
	public class ServiceAppointment : Entity
    {
        public const string EntityLogicalName = "serviceappointment";
        public ServiceAppointment() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly bool? IsWorkflowCreated = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityCollection Customers = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly bool? IsAllDayEvent = null;
		
		public readonly DateTime? ActualStart = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityCollection Resources = null;
		
		public readonly int? ScheduledDurationMinutes = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? ActualDurationMinutes = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly EntityReference ServiceId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? IsMapiPrivate = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Subject = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly DateTime? ActualEnd = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly bool? IsRegularActivity = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly bool? IsBilled = null;
		
		public readonly string Location = null;
		
		public readonly EntityReference SiteId = null;
		
		public readonly Guid? SubscriptionId = null;
		
		public readonly string Category = null;
		
		public readonly string ActivityAdditionalParams = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly DateTime? SortDate = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly string Subcategory = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string Description = null;
		
		public readonly Guid? ActivityId = null;
		
		public readonly string ActivityTypeCode = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Requested = 1,
                Tentative = 2,
                Pending = 3,
                Reserved = 4,
                InProgress = 6,
                Arrived = 7,
                Completed = 8,
                Canceled = 9,
                NoShow = 10
            }
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum StateCode
            {
                Open = 0,
                Closed = 1,
                Canceled = 2,
                Scheduled = 3
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                ServiceActivity = 4214,
                OpportunityClose = 4208,
                OrderClose = 4209,
                QuoteClose = 4211,
                CaseResolution = 4206,
                Task = 4212,
                CampaignResponse = 4401,
                CampaignActivity = 4402,
                BulkOperation = 4406,
                RecurringAppointment = 4251
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("channelaccessprofileentityaccesslevel")]
	public class ChannelAccessProfileEntityAccessLevel : Entity
    {
        public const string EntityLogicalName = "channelaccessprofileentityaccesslevel";
        public ChannelAccessProfileEntityAccessLevel() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("channelaccessprofileentityaccesslevelid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["channelaccessprofileentityaccesslevelid"] = value;
            }
        }
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? ChannelAccessProfileEntityAccessLevelId = null;
		
		public readonly Guid? ChannelAccessProfileEntityAccessLevelIdUnique = null;
		
		public readonly Guid? EntityAccessLevelId = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly Guid? ChannelAccessProfileId = null;
		
		public readonly int? EntityAccessLevelDepthMask = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly OptionSetValue ComponentState = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("fieldpermission")]
	public class FieldPermission : Entity
    {
        public const string EntityLogicalName = "fieldpermission";
        public FieldPermission() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("fieldpermissionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["fieldpermissionid"] = value;
            }
        }
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly OptionSetValue CanCreate = null;
		
		public readonly Guid? FieldPermissionIdUnique = null;
		
		public readonly Guid? FieldPermissionId = null;
		
		public readonly OptionSetValue CanUpdate = null;
		
		public readonly OptionSetValue CanRead = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly string EntityName = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly string AttributeLogicalName = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference FieldSecurityProfileId = null;
		
		public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum CanCreate
            {
                NotAllowed = 0,
                Allowed = 4
            }
            public enum CanUpdate
            {
                NotAllowed = 0,
                Allowed = 4
            }
            public enum CanRead
            {
                NotAllowed = 0,
                Allowed = 4
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("bulkdeletefailure")]
	public class BulkDeleteFailure : Entity
    {
        public const string EntityLogicalName = "bulkdeletefailure";
        public BulkDeleteFailure() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("bulkdeletefailureid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["bulkdeletefailureid"] = value;
            }
        }
		
		public readonly string ErrorDescription = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly Guid? OwningBusinessUnit = null;
		
		public readonly Guid? BulkDeleteFailureId = null;
		
		public readonly int? OrderedQueryIndex = null;
		
		public readonly int? ErrorNumber = null;
		
		public readonly EntityReference BulkDeleteOperationId = null;
		
		public readonly Guid? OwningUser = null;
		
		public readonly EntityReference AsyncOperationId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("systemuser")]
	public class SystemUser : Entity
    {
        public const string EntityLogicalName = "systemuser";
        public SystemUser() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("systemuserid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["systemuserid"] = value;
            }
        }
		
		public readonly string Address2_StateOrProvince = null;
		
		public readonly string PersonalEMailAddress = null;
		
		public readonly int? Address1_UTCOffset = null;
		
		public readonly string MiddleName = null;
		
		public readonly string Address2_Line2 = null;
		
		public readonly string DefaultOdbFolderName = null;
		
		public readonly string DisabledReason = null;
		
		public readonly string Address2_Line3 = null;
		
		public readonly Guid? AzureActiveDirectoryObjectId = null;
		
		public readonly string Address2_Line1 = null;
		
		public readonly OptionSetValue EmailRouterAccessApproval = null;
		
		public readonly Guid? ApplicationId = null;
		
		public readonly string WindowsLiveID = null;
		
		public readonly string Address1_Line3 = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue PreferredPhoneCode = null;
		
		public readonly bool? IsEmailAddressApprovedByO365Admin = null;
		
		public readonly string Address2_Name = null;
		
		public readonly string Skills = null;
		
		public readonly bool? IsLicensed = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly string DomainName = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly string FirstName = null;
		
		public readonly string Address1_Line1 = null;
		
		public readonly OptionSetValue PreferredEmailCode = null;
		
		public readonly string YammerUserId = null;
		
		public readonly OptionSetValue PreferredAddressCode = null;
		
		public readonly int? PassportLo = null;
		
		public readonly bool? IsActiveDirectoryUser = null;
		
		public readonly string Address2_PostalCode = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly string Address1_StateOrProvince = null;
		
		public readonly string Address1_PostOfficeBox = null;
		
		public readonly string Address1_Line2 = null;
		
		public readonly string Address1_City = null;
		
		public readonly int? PassportHi = null;
		
		public readonly string Address1_County = null;
		
		public readonly string YomiMiddleName = null;
		
		public readonly string Address1_Name = null;
		
		public readonly string Address2_Fax = null;
		
		public readonly EntityReference TerritoryId = null;
		
		public readonly string Salutation = null;
		
		public readonly OptionSetValue Address2_ShippingMethodCode = null;
		
		public readonly string Title = null;
		
		public readonly string JobTitle = null;
		
		public readonly string Address1_UPSZone = null;
		
		public readonly Guid? ActiveDirectoryGuid = null;
		
		public readonly string Address2_County = null;
		
		public readonly OptionSetValue OutgoingEmailDeliveryMethod = null;
		
		public readonly string EmployeeId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? DefaultFiltersPopulated = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly OptionSetValue Address1_AddressTypeCode = null;
		
		public readonly string PhotoUrl = null;
		
		public readonly string Address1_Telephone3 = null;
		
		public readonly OptionSetValue InviteStatusCode = null;
		
		public readonly EntityReference SiteId = null;
		
		public readonly Guid? SystemUserId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string YomiFirstName = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string Address2_PostOfficeBox = null;
		
		public readonly string TraversedPath = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string FullName = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string YomiFullName = null;
		
		public readonly string Address1_Fax = null;
		
		public readonly string InternalEMailAddress = null;
		
		public readonly EntityReference DefaultMailbox = null;
		
		public readonly string NickName = null;
		
		public readonly string Address2_Composite = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly Guid? OrganizationId = null;
		
		public readonly string Address2_City = null;
		
		public readonly string SharePointEmailAddress = null;
		
		public readonly string Address2_UPSZone = null;
		
		public readonly string MobilePhone = null;
		
		public readonly string Address2_Telephone2 = null;
		
		public readonly OptionSetValue IncomingEmailDeliveryMethod = null;
		
		public readonly double? Address1_Longitude = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly bool? DisplayInServiceViews = null;
		
		public readonly string LastName = null;
		
		public readonly string Address2_Country = null;
		
		public readonly EntityReference QueueId = null;
		
		public readonly int? UserLicenseType = null;
		
		public readonly EntityReference ParentSystemUserId = null;
		
		public readonly string Address1_PostalCode = null;
		
		public readonly EntityReference PositionId = null;
		
		public readonly string Address1_Telephone1 = null;
		
		public readonly string YomiLastName = null;
		
		public readonly string YammerEmailAddress = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly bool? IsSyncWithDirectory = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly double? Address1_Latitude = null;
		
		public readonly OptionSetValue Address2_AddressTypeCode = null;
		
		public readonly double? Address2_Longitude = null;
		
		public readonly string GovernmentId = null;
		
		public readonly EntityReference MobileOfflineProfileId = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly int? Address2_UTCOffset = null;
		
		public readonly string MobileAlertEMail = null;
		
		public readonly string Address1_Country = null;
		
		public readonly string HomePhone = null;
		
		public readonly EntityReference CalendarId = null;
		
		public readonly OptionSetValue CALType = null;
		
		public readonly string Address1_Composite = null;
		
		public readonly OptionSetValue AccessMode = null;
		
		public readonly Guid? Address2_AddressId = null;
		
		public readonly string Address1_Telephone2 = null;
		
		public readonly string ApplicationIdUri = null;
		
		public readonly string Address2_Telephone1 = null;
		
		public readonly OptionSetValue Address1_ShippingMethodCode = null;
		
		public readonly bool? SetupUser = null;
		
		public readonly EntityReference BusinessUnitId = null;
		
		public readonly string Address2_Telephone3 = null;
		
		public readonly bool? IsDisabled = null;
		
		public readonly bool? IsIntegrationUser = null;
		
		public readonly Guid? Address1_AddressId = null;
		
		public readonly double? Address2_Latitude = null;
		
		public readonly Guid? StageId = null;

        public new static class Options
        {
            public enum EmailRouterAccessApproval
            {
                Empty = 0,
                Approved = 1,
                PendingApproval = 2,
                Rejected = 3
            }
            public enum PreferredPhoneCode
            {
                MainPhone = 1,
                OtherPhone = 2,
                HomePhone = 3,
                MobilePhone = 4
            }
            public enum PreferredEmailCode
            {
                DefaultValue = 1
            }
            public enum PreferredAddressCode
            {
                MailingAddress = 1,
                OtherAddress = 2
            }
            public enum Address2_ShippingMethodCode
            {
                DefaultValue = 1
            }
            public enum OutgoingEmailDeliveryMethod
            {
                None = 0,
                MicrosoftDynamics365ForOutlook = 1,
                ServerSideSynchronizationOrEmailRouter = 2
            }
            public enum Address1_AddressTypeCode
            {
                DefaultValue = 1
            }
            public enum InviteStatusCode
            {
                InvitationNotSent = 0,
                Invited = 1,
                InvitationNearExpired = 2,
                InvitationExpired = 3,
                InvitationAccepted = 4,
                InvitationRejected = 5,
                InvitationRevoked = 6
            }
            public enum IncomingEmailDeliveryMethod
            {
                None = 0,
                MicrosoftDynamics365ForOutlook = 1,
                ServerSideSynchronizationOrEmailRouter = 2,
                ForwardMailbox = 3
            }
            public enum Address2_AddressTypeCode
            {
                DefaultValue = 1
            }
            public enum CALType
            {
                Professional = 0,
                Administrative = 1,
                Basic = 2,
                DeviceProfessional = 3,
                DeviceBasic = 4,
                Essential = 5,
                DeviceEssential = 6,
                Enterprise = 7,
                DeviceEnterprise = 8,
                Sales = 9,
                Service = 10,
                FieldService = 11,
                ProjectService = 12
            }
            public enum AccessMode
            {
                ReadWrite = 0,
                Administrative = 1,
                Read = 2,
                SupportUser = 3,
                NonInteractive = 4,
                DelegatedAdmin = 5
            }
            public enum Address1_ShippingMethodCode
            {
                DefaultValue = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("task")]
	public class Task : Entity
    {
        public const string EntityLogicalName = "task";
        public Task() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly int? ScheduledDurationMinutes = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly DateTime? SortDate = null;
		
		public readonly DateTime? ActualStart = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly int? ActualDurationMinutes = null;
		
		public readonly bool? IsRegularActivity = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly string Category = null;
		
		public readonly int? PercentComplete = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly string TraversedPath = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? StageId = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? CrmTaskAssignedUniqueId = null;
		
		public readonly bool? IsWorkflowCreated = null;
		
		public readonly string ActivityTypeCode = null;
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly Guid? ActivityId = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string ActivityAdditionalParams = null;
		
		public readonly string Subcategory = null;
		
		public readonly DateTime? ActualEnd = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Subject = null;
		
		public readonly Guid? SubscriptionId = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference ServiceId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly bool? IsBilled = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;

        public new static class Options
        {
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum StatusCode
            {
                NotStarted = 2,
                InProgress = 3,
                WaitingOnSomeoneElse = 4,
                Completed = 5,
                Canceled = 6,
                Deferred = 7
            }
            public enum StateCode
            {
                Open = 0,
                Completed = 1,
                Canceled = 2
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                ServiceActivity = 4214,
                OpportunityClose = 4208,
                OrderClose = 4209,
                QuoteClose = 4211,
                CaseResolution = 4206,
                Task = 4212,
                CampaignResponse = 4401,
                CampaignActivity = 4402,
                BulkOperation = 4406,
                RecurringAppointment = 4251
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("syncattributemappingprofile")]
	public class SyncAttributeMappingProfile : Entity
    {
        public const string EntityLogicalName = "syncattributemappingprofile";
        public SyncAttributeMappingProfile() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("syncattributemappingprofileid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["syncattributemappingprofileid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly Guid? SyncAttributeMappingProfileId = null;
		
		public readonly Guid? SyncAttributeMappingProfileIdUnique = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string Description = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("connectionrole")]
	public class ConnectionRole : Entity
    {
        public const string EntityLogicalName = "connectionrole";
        public ConnectionRole() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("connectionroleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["connectionroleid"] = value;
            }
        }
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? ConnectionRoleId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly string Description = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly OptionSetValue Category = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly Guid? ConnectionRoleIdUnique = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly EntityReference ModifiedBy = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly EntityReference CreatedBy = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum Category
            {
                Business = 1,
                Family = 2,
                Social = 3,
                Sales = 4,
                Other = 5,
                Stakeholder = 1000,
                SalesTeam = 1001,
                Service = 1002
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("syncattributemapping")]
	public class SyncAttributeMapping : Entity
    {
        public const string EntityLogicalName = "syncattributemapping";
        public SyncAttributeMapping() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("syncattributemappingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["syncattributemappingid"] = value;
            }
        }
		
		public readonly EntityReference SyncAttributeMappingProfileId = null;
		
		public readonly OptionSetValue DefaultSyncDirection = null;
		
		public readonly string MappingName = null;
		
		public readonly Guid? SyncAttributeMappingId = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly string EntityTypeCode = null;
		
		public readonly EntityReference ParentSyncAttributeMappingId = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly int? AllowedSyncDirection = null;
		
		public readonly OptionSetValue SyncDirection = null;
		
		public readonly bool? IsComputed = null;
		
		public readonly string ComputedProperties = null;
		
		public readonly string AttributeCRMName = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly Guid? SyncAttributeMappingIdUnique = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly string AttributeExchangeName = null;

        public new static class Options
        {
            public enum DefaultSyncDirection
            {
                None = 0,
                ToExchange = 1,
                ToCRM = 2,
                Bidirectional = 3
            }
            public enum SyncDirection
            {
                None = 0,
                ToExchange = 1,
                ToCRM = 2,
                Bidirectional = 3
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("productassociation")]
	public class ProductAssociation : Entity
    {
        public const string EntityLogicalName = "productassociation";
        public ProductAssociation() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("productassociationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["productassociationid"] = value;
            }
        }
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference UoMId = null;
		
		public readonly DateTime? ModifiedOn = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue statecode = null;
		
		public readonly EntityReference AssociatedProduct = null;
		
		public readonly EntityReference ProductId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly OptionSetValue ProductIsRequired = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue statuscode = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly Guid? ProductAssociationId = null;
		
		public readonly int? DMTImportState = null;
		
		public readonly decimal? Quantity = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly OptionSetValue PropertyCustomizationStatus = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1,
                Draft = 2,
                UnderRevision = 3
            }
            public enum ProductIsRequired
            {
                Optional = 0,
                Required = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2,
                Draft = 0,
                DraftActive = 3
            }
            public enum PropertyCustomizationStatus
            {
                NotAvailable = 0,
                Available = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("dependencyfeature")]
	public class DependencyFeature : Entity
    {
        public const string EntityLogicalName = "dependencyfeature";
        public DependencyFeature() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("dependencyfeatureid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["dependencyfeatureid"] = value;
            }
        }
		
		public readonly Guid? DependencyFeatureIdUnique = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly Guid? DependencyFeatureId = null;
		
		public readonly Guid? SupportingSolutionId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("processsession")]
	public class ProcessSession : Entity
    {
        public const string EntityLogicalName = "processsession";
        public ProcessSession() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("processsessionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["processsessionid"] = value;
            }
        }
		
		public readonly EntityReference CompletedBy = null;
		
		public readonly string Comments = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? ErrorCode = null;
		
		public readonly EntityReference ExecutedBy = null;
		
		public readonly DateTime? ExecutedOn = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly EntityReference NextLinkedSessionId = null;
		
		public readonly EntityReference OriginatingSessionId = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference PreviousLinkedSessionId = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly DateTime? StartedOn = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CompletedOn = null;
		
		public readonly EntityReference ProcessId = null;
		
		public readonly Guid? ProcessSessionId = null;
		
		public readonly string ProcessStageName = null;
		
		public readonly string ActivityName = null;
		
		public readonly DateTime? CanceledOn = null;
		
		public readonly string StepName = null;
		
		public readonly string ProtectionKey = null;
		
		public readonly EntityReference StartedBy = null;
		
		public readonly string InputArguments = null;
		
		public readonly string ProcessState = null;
		
		public readonly EntityReference CanceledBy = null;

        public new static class Options
        {
            public enum StateCode
            {
                Incomplete = 0,
                Complete = 1
            }
            public enum StatusCode
            {
                NotStarted = 1,
                InProgress = 2,
                Paused = 3,
                Completed = 4,
                Canceled = 5,
                Failed = 6
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("competitorsalesliterature")]
	public class CompetitorSalesLiterature : Entity
    {
        public const string EntityLogicalName = "competitorsalesliterature";
        public CompetitorSalesLiterature() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("competitorsalesliteratureid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["competitorsalesliteratureid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? CompetitorId = null;
		
		public readonly Guid? SalesLiteratureId = null;
		
		public readonly Guid? CompetitorSalesLiteratureId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("timezonelocalizedname")]
	public class TimeZoneLocalizedName : Entity
    {
        public const string EntityLogicalName = "timezonelocalizedname";
        public TimeZoneLocalizedName() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("timezonelocalizednameid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["timezonelocalizednameid"] = value;
            }
        }
		
		public readonly Guid? TimeZoneLocalizedNameId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string DaylightName = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? CultureId = null;
		
		public readonly EntityReference TimeZoneDefinitionId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string StandardName = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string UserInterfaceName = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("systemuserprincipals")]
	public class SystemUserPrincipals : Entity
    {
        public const string EntityLogicalName = "systemuserprincipals";
        public SystemUserPrincipals() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("systemuserprincipalid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["systemuserprincipalid"] = value;
            }
        }
		
		public readonly Guid? SystemUserPrincipalId = null;
		
		public readonly Guid? SystemUserId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? PrincipalId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("quote")]
	public class Quote : Entity
    {
        public const string EntityLogicalName = "quote";
        public Quote() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("quoteid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["quoteid"] = value;
            }
        }
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Money TotalAmountLessFreight_Base = null;
		
		public readonly string ShipTo_ContactName = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly string ShipTo_Line1 = null;
		
		public readonly string BillTo_Line3 = null;
		
		public readonly EntityReference ContactId = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly string BillTo_Name = null;
		
		public readonly bool? WillCall = null;
		
		public readonly Money TotalAmountLessFreight = null;
		
		public readonly decimal? DiscountPercentage = null;
		
		public readonly DateTime? EffectiveFrom = null;
		
		public readonly Guid? StageId = null;
		
		public readonly string BillTo_PostalCode = null;
		
		public readonly string ShipTo_Composite = null;
		
		public readonly string QuoteNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? RevisionNumber = null;
		
		public readonly Money TotalDiscountAmount_Base = null;
		
		public readonly string ShipTo_PostalCode = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly Guid? ShipTo_AddressId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Money TotalLineItemDiscountAmount_Base = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Money DiscountAmount_Base = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string ShipTo_StateOrProvince = null;
		
		public readonly Money TotalDiscountAmount = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference CustomerId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string ShipTo_Line2 = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly Money TotalAmount_Base = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly string BillTo_Fax = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly Money TotalAmount = null;
		
		public readonly Money DiscountAmount = null;
		
		public readonly Money FreightAmount = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly string Description = null;
		
		public readonly string ShipTo_Name = null;
		
		public readonly string ShipTo_Country = null;
		
		public readonly Money TotalLineItemDiscountAmount = null;
		
		public readonly DateTime? RequestDeliveryBy = null;
		
		public readonly string ShipTo_City = null;
		
		public readonly string BillTo_Line2 = null;
		
		public readonly string ShipTo_Line3 = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly string BillTo_City = null;
		
		public readonly Money TotalTax = null;
		
		public readonly EntityReference CampaignId = null;
		
		public readonly DateTime? ExpiresOn = null;
		
		public readonly Money TotalTax_Base = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly OptionSetValue PricingErrorCode = null;
		
		public readonly OptionSetValue PaymentTermsCode = null;
		
		public readonly string BillTo_Country = null;
		
		public readonly EntityReference PriceLevelId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue ShippingMethodCode = null;
		
		public readonly Money TotalLineItemAmount_Base = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? BillTo_AddressId = null;
		
		public readonly EntityReference AccountId = null;
		
		public readonly Money TotalLineItemAmount = null;
		
		public readonly DateTime? EffectiveTo = null;
		
		public readonly string BillTo_StateOrProvince = null;
		
		public readonly string ShipTo_Telephone = null;
		
		public readonly string ShipTo_Fax = null;
		
		public readonly OptionSetValue ShipTo_FreightTermsCode = null;
		
		public readonly DateTime? ClosedOn = null;
		
		public readonly string BillTo_Telephone = null;
		
		public readonly Guid? QuoteId = null;
		
		public readonly string BillTo_ContactName = null;
		
		public readonly OptionSetValue FreightTermsCode = null;
		
		public readonly Guid? UniqueDscId = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly string TraversedPath = null;
		
		public readonly string BillTo_Composite = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":1}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly string BillTo_Line1 = null;
		
		public readonly EntityReference OpportunityId = null;
		
		public readonly Money FreightAmount_Base = null;

        public new static class Options
        {
            public enum StatusCode
            {
                InProgress = 2,
                Open = 3,
                Won = 4,
                Lost = 5,
                Canceled = 6,
                Revised = 7,
                InProgress1 = 1
            }
            public enum PricingErrorCode
            {
                None = 0,
                DetailError = 1,
                MissingPriceLevel = 2,
                InactivePriceLevel = 3,
                MissingQuantity = 4,
                MissingUnitPrice = 5,
                MissingProduct = 6,
                InvalidProduct = 7,
                MissingPricingCode = 8,
                InvalidPricingCode = 9,
                MissingUOM = 10,
                ProductNotInPriceLevel = 11,
                MissingPriceLevelAmount = 12,
                MissingPriceLevelPercentage = 13,
                MissingPrice = 14,
                MissingCurrentCost = 15,
                MissingStandardCost = 16,
                InvalidPriceLevelAmount = 17,
                InvalidPriceLevelPercentage = 18,
                InvalidPrice = 19,
                InvalidCurrentCost = 20,
                InvalidStandardCost = 21,
                InvalidRoundingPolicy = 22,
                InvalidRoundingOption = 23,
                InvalidRoundingAmount = 24,
                PriceCalculationError = 25,
                InvalidDiscountType = 26,
                DiscountTypeInvalidState = 27,
                InvalidDiscount = 28,
                InvalidQuantity = 29,
                InvalidPricingPrecision = 30,
                MissingProductDefaultUOM = 31,
                MissingProductUOMSchedule = 32,
                InactiveDiscountType = 33,
                InvalidPriceLevelCurrency = 34,
                PriceAttributeOutOfRange = 35,
                BaseCurrencyAttributeOverflow = 36,
                BaseCurrencyAttributeUnderflow = 37
            }
            public enum PaymentTermsCode
            {
                Net30 = 1,
                _210Net30 = 2,
                Net45 = 3,
                Net60 = 4
            }
            public enum ShippingMethodCode
            {
                Airborne = 1,
                DHL = 2,
                FedEx = 3,
                UPS = 4,
                PostalMail = 5,
                FullLoad = 6,
                WillCall = 7
            }
            public enum ShipTo_FreightTermsCode
            {
                DefaultValue = 1
            }
            public enum FreightTermsCode
            {
                FOB = 1,
                NoCharge = 2
            }
            public enum StateCode
            {
                Draft = 0,
                Active = 1,
                Won = 2,
                Closed = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("picklistmapping")]
	public class PickListMapping : Entity
    {
        public const string EntityLogicalName = "picklistmapping";
        public PickListMapping() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("picklistmappingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["picklistmappingid"] = value;
            }
        }
		
		public readonly EntityReference ColumnMappingId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? TargetValue = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly OptionSetValue ProcessCode = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string SourceValue = null;
		
		public readonly Guid? PickListMappingId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ModifiedBy = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Active = 0
            }
            public enum ProcessCode
            {
                Process = 1,
                Ignore = 2,
                Internal = 3,
                Unmapped = 4
            }
            public enum StateCode
            {
                Active = 0
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("activitymimeattachment")]
	public class ActivityMimeAttachment : Entity
    {
        public const string EntityLogicalName = "activitymimeattachment";
        public ActivityMimeAttachment() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activitymimeattachmentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activitymimeattachmentid"] = value;
            }
        }
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference ObjectId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? AttachmentNumber = null;
		
		public readonly bool? IsFollowed = null;
		
		public readonly string Subject = null;
		
		public readonly string Body = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly Guid? ActivityMimeAttachmentId = null;
		
		public readonly EntityReference AttachmentId = null;
		
		public readonly EntityReference ActivityId = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string FileName = null;
		
		public readonly string MimeType = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly string AttachmentContentId = null;
		
		public readonly Guid? ActivityMimeAttachmentIdUnique = null;
		
		public readonly string AnonymousLink = null;
		
		public readonly string ActivitySubject = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly int? FileSize = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly string ObjectTypeCode = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly Guid? SolutionId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum ObjectTypeCode
            {
                EmailTemplate = 2010,
                EmailActivity = 4200
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("letter")]
	public class Letter : Entity
    {
        public const string EntityLogicalName = "letter";
        public Letter() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }
		
		public readonly string Category = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly DateTime? CreatedOn = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Subject = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string Subcategory = null;
		
		public readonly string Address = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly string Description = null;
		
		public readonly DateTime? SortDate = null;
		
		public readonly Guid? ActivityId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? ActualDurationMinutes = null;
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly string TraversedPath = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly bool? IsWorkflowCreated = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityCollection bcc = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityCollection from = null;
		
		public readonly EntityReference ServiceId = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string ActivityTypeCode = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly DateTime? ActualStart = null;
		
		public readonly bool? IsRegularActivity = null;
		
		public readonly EntityCollection cc = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly Guid? SubscriptionId = null;
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly bool? IsBilled = null;
		
		public readonly bool? DirectionCode = null;
		
		public readonly EntityCollection to = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? ActualEnd = null;
		
		public readonly int? ScheduledDurationMinutes = null;
		
		public readonly Guid? StageId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Open = 1,
                Draft = 2,
                Received = 3,
                Sent = 4,
                Canceled = 5
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                ServiceActivity = 4214,
                OpportunityClose = 4208,
                OrderClose = 4209,
                QuoteClose = 4211,
                CaseResolution = 4206,
                Task = 4212,
                CampaignResponse = 4401,
                CampaignActivity = 4402,
                BulkOperation = 4406,
                RecurringAppointment = 4251
            }
            public enum StateCode
            {
                Open = 0,
                Completed = 1,
                Canceled = 2
            }
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("webwizard")]
	public class WebWizard : Entity
    {
        public const string EntityLogicalName = "webwizard";
        public WebWizard() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("webwizardid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["webwizardid"] = value;
            }
        }
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string TitleResourceString = null;
		
		public readonly int? WizardPageHeight = null;
		
		public readonly int? StartPageSequenceNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string AccessPrivileges = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? WebWizardId = null;
		
		public readonly bool? IsStaticPageSequence = null;
		
		public readonly int? WizardPageWidth = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("principalobjectaccess")]
	public class PrincipalObjectAccess : Entity
    {
        public const string EntityLogicalName = "principalobjectaccess";
        public PrincipalObjectAccess() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("principalobjectaccessid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["principalobjectaccessid"] = value;
            }
        }
		
		public readonly int? InheritedAccessRightsMask = null;
		
		public readonly int? AccessRightsMask = null;
		
		public readonly Guid? ObjectId = null;
		
		public readonly Guid? PrincipalObjectAccessId = null;
		
		public readonly string ObjectTypeCode = null;
		
		public readonly DateTime? ChangedOn = null;
		
		public readonly Guid? PrincipalId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string PrincipalTypeCode = null;
		
		public readonly int? VersionNumber = null;

        public new static class Options
        {
            public enum ObjectTypeCode
            {

            }
            public enum PrincipalTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("reportcategory")]
	public class ReportCategory : Entity
    {
        public const string EntityLogicalName = "reportcategory";
        public ReportCategory() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("reportcategoryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["reportcategoryid"] = value;
            }
        }
		
		public readonly EntityReference OwnerId = null;
		
		public readonly Guid? ReportCategoryIdUnique = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly OptionSetValue CategoryCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly Guid? OwningBusinessUnit = null;
		
		public readonly Guid? OwningUser = null;
		
		public readonly EntityReference ReportId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? ReportCategoryId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum CategoryCode
            {
                SalesReports = 1,
                ServiceReports = 2,
                MarketingReports = 3,
                AdministrativeReports = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("azureserviceconnection")]
	public class AzureServiceConnection : Entity
    {
        public const string EntityLogicalName = "azureserviceconnection";
        public AzureServiceConnection() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("azureserviceconnectionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["azureserviceconnectionid"] = value;
            }
        }
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string ServiceUri = null;
		
		public readonly string AccountKey = null;
		
		public readonly Guid? AzureServiceConnectionId = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? LastConnectionTime = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference ModifiedBy = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly string Description = null;
		
		public readonly OptionSetValue LastConnectionStatusCode = null;
		
		public readonly OptionSetValue ConnectionType = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum LastConnectionStatusCode
            {
                Success = 1,
                Failure = 2
            }
            public enum ConnectionType
            {
                Recommendation = 1,
                TextAnalytics = 2
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("principalobjectaccessreadsnapshot")]
	public class PrincipalObjectAccessReadSnapshot : Entity
    {
        public const string EntityLogicalName = "principalobjectaccessreadsnapshot";
        public PrincipalObjectAccessReadSnapshot() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("principalobjectaccessreadsnapshotid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["principalobjectaccessreadsnapshotid"] = value;
            }
        }
		
		public readonly int? Count = null;
		
		public readonly Guid? PrincipalId = null;
		
		public readonly int? TeamPrincipalsCount = null;
		
		public readonly int? CountPercentOfTotalRows = null;
		
		public readonly Guid? PrincipalObjectAccessReadSnapshotId = null;
		
		public readonly int? ObjectTypeCode = null;
		
		public readonly int? RecordCountForOwnerID = null;
		
		public readonly int? ChildUserPrincipalsCount = null;
		
		public readonly int? RecordCountForOwnerIDPercentOfTotalRows = null;
		
		public readonly int? RecordCountForOwningBUPercentOfTotalRows = null;
		
		public readonly int? RecordCountForOwningBU = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("syncerror")]
	public class SyncError : Entity
    {
        public const string EntityLogicalName = "syncerror";
        public SyncError() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("syncerrorid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["syncerrorid"] = value;
            }
        }
		
		public readonly string ErrorMessage = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? SyncErrorId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly string ErrorCode = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string RequestData = null;
		
		public readonly OptionSetValue ErrorType = null;
		
		public readonly string Action = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference OwningTeam = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly string ErrorDetail = null;
		
		public readonly DateTime? ErrorTime = null;
		
		public readonly string ActionData = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Active = 0,
                Fixed = 1
            }
            public enum ErrorType
            {
                Conflict = 0,
                RecordNotFound = 1,
                RecordAlreadyExists = 2,
                Others = 3
            }
            public enum StateCode
            {
                Active = 0,
                Resolved = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_postruleconfig")]
	public class msdyn_PostRuleConfig : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_postruleconfig";
        public msdyn_PostRuleConfig() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_postruleconfigid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_postruleconfigid"] = value;
            }
        }
		
		public readonly EntityReference OrganizationId = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string msdyn_name = null;
		
		public readonly string msdyn_RuleSource = null;
		
		public readonly EntityReference msdyn_PostConfigId = null;
		
		public readonly bool? msdyn_PostToYammer = null;
		
		public readonly Guid? msdyn_PostRuleConfigId = null;
		
		public readonly string msdyn_RuleId = null;
		
		public readonly string msdyn_StepId = null;
		
		public readonly string msdyn_FormatId = null;

        public new static class Options
        {
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("phonecall")]
	public class PhoneCall : Entity
    {
        public const string EntityLogicalName = "phonecall";
        public PhoneCall() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly bool? IsBilled = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? ActualStart = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? ActualDurationMinutes = null;
		
		public readonly string ActivityAdditionalParams = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly DateTime? ActualEnd = null;
		
		public readonly string ActivityTypeCode = null;
		
		public readonly string Category = null;
		
		public readonly string Subcategory = null;
		
		public readonly string PhoneNumber = null;
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly string TraversedPath = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Subject = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly DateTime? SortDate = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityCollection from = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly bool? DirectionCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? SubscriptionId = null;
		
		public readonly int? ScheduledDurationMinutes = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly EntityReference ServiceId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly bool? LeftVoiceMail = null;
		
		public readonly EntityCollection to = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? IsRegularActivity = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly Guid? StageId = null;
		
		public readonly bool? IsWorkflowCreated = null;
		
		public readonly Guid? ActivityId = null;

        public new static class Options
        {
            public enum StateCode
            {
                Open = 0,
                Completed = 1,
                Canceled = 2
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                ServiceActivity = 4214,
                OpportunityClose = 4208,
                OrderClose = 4209,
                QuoteClose = 4211,
                CaseResolution = 4206,
                Task = 4212,
                CampaignResponse = 4401,
                CampaignActivity = 4402,
                BulkOperation = 4406,
                RecurringAppointment = 4251
            }
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum StatusCode
            {
                Open = 1,
                Made = 2,
                Canceled = 3,
                Received = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("bulkoperationlog")]
	public class BulkOperationLog : Entity
    {
        public const string EntityLogicalName = "bulkoperationlog";
        public BulkOperationLog() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("bulkoperationlogid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["bulkoperationlogid"] = value;
            }
        }
		
		public readonly EntityReference OwnerId = null;
		
		public readonly Guid? OwningBusinessUnit = null;
		
		public readonly Guid? OwningUser = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly int? ErrorNumber = null;
		
		public readonly EntityReference BulkOperationId = null;
		
		public readonly EntityReference CreatedObjectId = null;
		
		public readonly Guid? BulkOperationLogId = null;
		
		public readonly string AdditionalInfo = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("convertrule")]
	public class ConvertRule : Entity
    {
        public const string EntityLogicalName = "convertrule";
        public ConvertRule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("convertruleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["convertruleid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference WorkflowId = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":1}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly bool? AllowUnknownSender = null;
		
		public readonly Guid? ConvertRuleIdUnique = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? ResolvedSince = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly string SourceChannelTypeCode = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly string RecordVersion = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly OptionSetValue SourceTypeCode = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly Guid? ConvertRuleId = null;
		
		public readonly bool? CheckBlockedSocialProfile = null;
		
		public readonly bool? CheckDirectMessages = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference QueueId = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference ResponseTemplateId = null;
		
		public readonly bool? SendAutomaticResponse = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly bool? CheckActiveEntitlement = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly bool? CheckIfResolved = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference ChannelPropertyGroupId = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? CreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Draft = 0,
                Active = 1
            }
            public enum SourceChannelTypeCode
            {
                PhoneCall = 4210,
                Email = 4202,
                Appointment = 4201,
                ServiceActivity = 4214,
                Task = 4212,
                SocialActivity = 4216
            }
            public enum SourceTypeCode
            {
                SocialMonitoring = 1,
                Email = 2
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum StatusCode
            {
                Draft = 1,
                Active = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("workflowdependency")]
	public class WorkflowDependency : Entity
    {
        public const string EntityLogicalName = "workflowdependency";
        public WorkflowDependency() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("workflowdependencyid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["workflowdependencyid"] = value;
            }
        }
		
		public readonly string DependentAttributeName = null;
		
		public readonly string DependentEntityName = null;
		
		public readonly string CustomEntityName = null;
		
		public readonly string RelatedEntityName = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? OwningUser = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string ParameterType = null;
		
		public readonly Guid? WorkflowDependencyId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference WorkflowId = null;
		
		public readonly EntityReference SdkMessageId = null;
		
		public readonly string RelatedAttributeName = null;
		
		public readonly OptionSetValue Type = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string ParameterName = null;
		
		public readonly string EntityAttributes = null;
		
		public readonly Guid? OwningBusinessUnit = null;

        public new static class Options
        {
            public enum Type
            {
                SdkAssociation = 1,
                LocalParameter = 2,
                PrimaryEntity = 3,
                PrimaryEntityBeforeSDKOperation = 4,
                PrimaryEntityAfterSDKOperation = 5,
                RelatedEntity = 6,
                CustomEntityDefinitionThatWorkflowDependsOn = 7,
                AttributeDefinitionThatWorkflowDependsOn = 8,
                ArgumentEntityThatWorkflowDependsOn = 9
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("contactquotes")]
	public class ContactQuotes : Entity
    {
        public const string EntityLogicalName = "contactquotes";
        public ContactQuotes() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("contactquoteid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["contactquoteid"] = value;
            }
        }
		
		public readonly Guid? ContactId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? QuoteId = null;
		
		public readonly Guid? ContactQuoteId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("dynamicpropertyassociation")]
	public class DynamicPropertyAssociation : Entity
    {
        public const string EntityLogicalName = "dynamicpropertyassociation";
        public DynamicPropertyAssociation() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("dynamicpropertyassociationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["dynamicpropertyassociationid"] = value;
            }
        }
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference DynamicPropertyId = null;
		
		public readonly OptionSetValue InheritanceState = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly OptionSetValue AssociationStatus = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference RegardingObjectid = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly int? DMTImportState = null;
		
		public readonly Guid? DynamicPropertyAssociationId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;

        public new static class Options
        {
            public enum InheritanceState
            {
                Inherited = 0,
                Overridden = 1,
                Owned = 2
            }
            public enum AssociationStatus
            {
                Active = 0,
                Deleted = 1,
                Draft = 2,
                DraftAdded = 3,
                DraftDeleted = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("pricelevel")]
	public class PriceLevel : Entity
    {
        public const string EntityLogicalName = "pricelevel";
        public PriceLevel() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("pricelevelid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["pricelevelid"] = value;
            }
        }
		
		public readonly Guid? PriceLevelId = null;
		
		public readonly OptionSetValue ShippingMethodCode = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? ImportSequenceNumber = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? EndDate = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue PaymentMethodCode = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? BeginDate = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly OptionSetValue FreightTermsCode = null;

        public new static class Options
        {
            public enum ShippingMethodCode
            {
                DefaultValue = 1
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum PaymentMethodCode
            {
                DefaultValue = 1
            }
            public enum StatusCode
            {
                Active = 100001,
                Inactive = 100002
            }
            public enum FreightTermsCode
            {
                DefaultValue = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("notification")]
	public class Notification : Entity
    {
        public const string EntityLogicalName = "notification";
        public Notification() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("notificationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["notificationid"] = value;
            }
        }
		
		public readonly Guid? NotificationId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? EventId = null;
		
		public readonly string EventData = null;
		
		public readonly string CreatedOnString = null;
		
		public readonly Guid? OrganizationId = null;
		
		public readonly int? NotificationNumber = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sdkmessagerequest")]
	public class SdkMessageRequest : Entity
    {
        public const string EntityLogicalName = "sdkmessagerequest";
        public SdkMessageRequest() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sdkmessagerequestid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sdkmessagerequestid"] = value;
            }
        }
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? SdkMessageRequestIdUnique = null;
		
		public readonly Guid? SdkMessageRequestId = null;
		
		public readonly EntityReference SdkMessagePairId = null;
		
		public readonly int? CustomizationLevel = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string Name = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string PrimaryObjectTypeCode = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;

        public new static class Options
        {
            public enum PrimaryObjectTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("clientupdate")]
	public class ClientUpdate : Entity
    {
        public const string EntityLogicalName = "clientupdate";
        public ClientUpdate() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("clientupdateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["clientupdateid"] = value;
            }
        }
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly OptionSetValue WhenExecute = null;
		
		public readonly bool? WasExecuted = null;
		
		public readonly string SqlScript = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? ClientUpdateId = null;
		
		public readonly string Description = null;

        public new static class Options
        {
            public enum WhenExecute
            {
                BeforeSchemaChanges = 1,
                AfterSchemaChangesButBeforeDownloadData = 2,
                AfterDownloadData = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("activitypointer")]
	public class ActivityPointer : Entity
    {
        public const string EntityLogicalName = "activitypointer";
        public ActivityPointer() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }
		
		public readonly bool? IsRegularActivity = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly Guid? StageId = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly Guid? ActivityId = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference ServiceId = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly DateTime? DeliveryLastAttemptedOn = null;
		
		public readonly string Description = null;
		
		public readonly string ExchangeWebLink = null;
		
		public readonly OptionSetValue DeliveryPriorityCode = null;
		
		public readonly DateTime? ActualStart = null;
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly int? ActualDurationMinutes = null;
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly bool? LeftVoiceMail = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? ActualEnd = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly bool? IsBilled = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Subject = null;
		
		public readonly EntityReference SenderMailboxId = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly bool? IsWorkflowCreated = null;
		
		public readonly string ExchangeItemId = null;
		
		public readonly string ActivityAdditionalParams = null;
		
		public readonly string ActivityTypeCode = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? PostponeActivityProcessingUntil = null;
		
		public readonly EntityCollection allparties = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? SentOn = null;
		
		public readonly DateTime? SortDate = null;
		
		public readonly bool? IsMapiPrivate = null;
		
		public readonly OptionSetValue InstanceTypeCode = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly Guid? SeriesId = null;
		
		public readonly string TraversedPath = null;
		
		public readonly OptionSetValue Community = null;
		
		public readonly int? ScheduledDurationMinutes = null;
		
		public readonly DateTime? CreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Open = 0,
                Completed = 1,
                Canceled = 2,
                Scheduled = 3
            }
            public enum DeliveryPriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                ServiceActivity = 4214,
                OpportunityClose = 4208,
                OrderClose = 4209,
                QuoteClose = 4211,
                CaseResolution = 4206,
                Task = 4212,
                CampaignResponse = 4401,
                CampaignActivity = 4402,
                BulkOperation = 4406,
                RecurringAppointment = 4251
            }
            public enum InstanceTypeCode
            {
                NotRecurring = 0,
                RecurringMaster = 1,
                RecurringInstance = 2,
                RecurringException = 3,
                RecurringFutureException = 4
            }
            public enum StatusCode
            {
                Open = 1,
                Completed = 2,
                Canceled = 3,
                Scheduled = 4
            }
            public enum Community
            {
                Facebook = 1,
                Twitter = 2,
                Other = 0
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("customeropportunityrole")]
	public class CustomerOpportunityRole : Entity
    {
        public const string EntityLogicalName = "customeropportunityrole";
        public CustomerOpportunityRole() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("customeropportunityroleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["customeropportunityroleid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly Guid? UniqueDscId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CustomerId = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OpportunityRoleId = null;
		
		public readonly int? OpportunityStatusCode = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference OpportunityId = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly Guid? CustomerOpportunityRoleId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? OpportunityStateCode = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("bookableresourcecategoryassn")]
	public class BookableResourceCategoryAssn : Entity
    {
        public const string EntityLogicalName = "bookableresourcecategoryassn";
        public BookableResourceCategoryAssn() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("bookableresourcecategoryassnid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["bookableresourcecategoryassnid"] = value;
            }
        }
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly Guid? BookableResourceCategoryAssnId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference OwnerId = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference ResourceCategory = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference Resource = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("listmember")]
	public class ListMember : Entity
    {
        public const string EntityLogicalName = "listmember";
        public ListMember() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("listmemberid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["listmemberid"] = value;
            }
        }
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? OwningUser = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference ListId = null;
		
		public readonly EntityReference EntityId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string EntityType = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Guid? ListMemberId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? OwningBusinessUnit = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? CreatedOn = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("languagelocale")]
	public class LanguageLocale : Entity
    {
        public const string EntityLogicalName = "languagelocale";
        public LanguageLocale() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("languagelocaleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["languagelocaleid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly OptionSetValue statuscode = null;
		
		public readonly string Region = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue statecode = null;
		
		public readonly Guid? LanguageLocaleId = null;
		
		public readonly string Code = null;
		
		public readonly int? LocaleId = null;
		
		public readonly string Language = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("actioncard")]
	public class ActionCard : Entity
    {
        public const string EntityLogicalName = "actioncard";
        public ActionCard() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("actioncardid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["actioncardid"] = value;
            }
        }
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference RecordId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly DateTime? ExpiryDate = null;
		
		public readonly string Data = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly Guid? ActionCardId = null;
		
		public readonly OptionSetValue Source = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? Priority = null;
		
		public readonly string ReferenceTokens = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly bool? Visibility = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly OptionSetValue State = null;
		
		public readonly int? CardType = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? ImportSequenceNumber = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Title = null;
		
		public readonly EntityReference CardTypeId = null;
		
		public readonly DateTime? StartDate = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string Description = null;
		
		public readonly int? VersionNumber = null;

        public new static class Options
        {
            public enum Source
            {
                CRM = 1,
                Exchange = 2
            }
            public enum State
            {
                Active = 0,
                Dismissed = 1,
                Completed = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("bookableresourcebooking")]
	public class BookableResourceBooking : Entity
    {
        public const string EntityLogicalName = "bookableresourcebooking";
        public BookableResourceBooking() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("bookableresourcebookingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["bookableresourcebookingid"] = value;
            }
        }
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly Guid? StageId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? ImportSequenceNumber = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly EntityReference Resource = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly OptionSetValue BookingType = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly DateTime? StartTime = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? EndTime = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference BookingStatus = null;
		
		public readonly EntityReference Header = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly int? Duration = null;
		
		public readonly Guid? BookableResourceBookingId = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly string TraversedPath = null;
		
		public readonly DateTime? ModifiedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum BookingType
            {
                Liquid = 2,
                Solid = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("campaignactivityitem")]
	public class CampaignActivityItem : Entity
    {
        public const string EntityLogicalName = "campaignactivityitem";
        public CampaignActivityItem() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("campaignactivityitemid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["campaignactivityitemid"] = value;
            }
        }
		
		public readonly EntityReference OwnerId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? OwningBusinessUnit = null;
		
		public readonly Guid? CampaignActivityItemId = null;
		
		public readonly Guid? ItemId = null;
		
		public readonly Guid? OwningUser = null;
		
		public readonly EntityReference CampaignActivityId = null;
		
		public readonly string ItemObjectTypeCode = null;

        public new static class Options
        {
            public enum ItemObjectTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("orderclose")]
	public class OrderClose : Entity
    {
        public const string EntityLogicalName = "orderclose";
        public OrderClose() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }
		
		public readonly DateTime? ActualStart = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference ModifiedByExternalParty = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? Revision = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference CreatedByExternalParty = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? ActivityId = null;
		
		public readonly EntityReference ServiceId = null;
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly int? ScheduledDurationMinutes = null;
		
		public readonly bool? IsWorkflowCreated = null;
		
		public readonly DateTime? ActualEnd = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string Category = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? ActualDurationMinutes = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Subject = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly EntityReference SalesOrderId = null;
		
		public readonly bool? IsBilled = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly string ActivityTypeCode = null;
		
		public readonly string Subcategory = null;
		
		public readonly string OrderNumber = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly string Description = null;
		
		public readonly bool? IsRegularActivity = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Open = 1,
                Completed = 2,
                Canceled = 3
            }
            public enum StateCode
            {
                Open = 0,
                Completed = 1,
                Canceled = 2
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                ServiceActivity = 4214,
                OpportunityClose = 4208,
                OrderClose = 4209,
                QuoteClose = 4211,
                CaseResolution = 4206,
                Task = 4212,
                CampaignResponse = 4401,
                CampaignActivity = 4402,
                BulkOperation = 4406,
                RecurringAppointment = 4251
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("customeraddress")]
	public class CustomerAddress : Entity
    {
        public const string EntityLogicalName = "customeraddress";
        public CustomerAddress() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("customeraddressid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["customeraddressid"] = value;
            }
        }
		
		public readonly string Line3 = null;
		
		public readonly double? Longitude = null;
		
		public readonly string PostalCode = null;
		
		public readonly string County = null;
		
		public readonly string Telephone2 = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? UTCOffset = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string Line1 = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly string PostOfficeBox = null;
		
		public readonly OptionSetValue ShippingMethodCode = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly OptionSetValue FreightTermsCode = null;
		
		public readonly string City = null;
		
		public readonly OptionSetValue AddressTypeCode = null;
		
		public readonly string UPSZone = null;
		
		public readonly string StateOrProvince = null;
		
		public readonly string Country = null;
		
		public readonly string Line2 = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference ParentId = null;
		
		public readonly string Telephone1 = null;
		
		public readonly string Telephone3 = null;
		
		public readonly string PrimaryContactName = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? AddressNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly string ObjectTypeCode = null;
		
		public readonly double? Latitude = null;
		
		public readonly string Fax = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string Composite = null;
		
		public readonly Guid? CustomerAddressId = null;

        public new static class Options
        {
            public enum ShippingMethodCode
            {
                Airborne = 1,
                DHL = 2,
                FedEx = 3,
                UPS = 4,
                PostalMail = 5,
                FullLoad = 6,
                WillCall = 7
            }
            public enum FreightTermsCode
            {
                FOB = 1,
                NoCharge = 2
            }
            public enum AddressTypeCode
            {
                BillTo = 1,
                ShipTo = 2,
                Primary = 3,
                Other = 4
            }
            public enum ObjectTypeCode
            {
                Account = 1,
                Contact = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("knowledgearticlescategories")]
	public class KnowledgeArticlesCategories : Entity
    {
        public const string EntityLogicalName = "knowledgearticlescategories";
        public KnowledgeArticlesCategories() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("knowledgearticlecategoryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["knowledgearticlecategoryid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? KnowledgeArticleCategoryId = null;
		
		public readonly Guid? CategoryId = null;
		
		public readonly Guid? KnowledgeArticleId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("lead")]
	public class Lead : Entity
    {
        public const string EntityLogicalName = "lead";
        public Lead() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("leadid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["leadid"] = value;
            }
        }
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly string Address1_Telephone1 = null;
		
		public readonly bool? ConfirmInterest = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string FullName = null;
		
		public readonly string MobilePhone = null;
		
		public readonly string Address1_Composite = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly OptionSetValue LeadSourceCode = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly string Address1_StateOrProvince = null;
		
		public readonly string YomiLastName = null;
		
		public readonly EntityReference AccountId = null;
		
		public readonly Guid? Address1_AddressId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly bool? IsAutoCreate = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? NumberOfEmployees = null;
		
		public readonly string Address2_Telephone2 = null;
		
		public readonly string Address1_County = null;
		
		public readonly bool? DoNotSendMM = null;
		
		public readonly EntityReference QualifyingOpportunityId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly OptionSetValue PurchaseProcess = null;
		
		public readonly string Telephone2 = null;
		
		public readonly string Address1_Line1 = null;
		
		public readonly DateTime? ScheduleFollowUp_Prospect = null;
		
		public readonly Money Revenue = null;
		
		public readonly EntityReference ParentContactId = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly string Address2_Country = null;
		
		public readonly bool? IsPrivate = null;
		
		public readonly OptionSetValue SalesStageCode = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly OptionSetValue InitialCommunication = null;
		
		public readonly string TimeSpentByMeOnEmailAndMeetings = null;
		
		public readonly double? EstimatedValue = null;
		
		public readonly EntityReference OriginatingCaseId = null;
		
		public readonly string Address2_StateOrProvince = null;
		
		public readonly string Address2_Line1 = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly Guid? Address2_AddressId = null;
		
		public readonly double? Address2_Longitude = null;
		
		public readonly Money BudgetAmount = null;
		
		public readonly Money BudgetAmount_Base = null;
		
		public readonly string Fax = null;
		
		public readonly string YomiCompanyName = null;
		
		public readonly string Pager = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly DateTime? LastUsedInCampaign = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ParentAccountId = null;
		
		public readonly string Address1_PostOfficeBox = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly string Address1_Telephone3 = null;
		
		public readonly string Address1_Line3 = null;
		
		public readonly Money EstimatedAmount_Base = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly Money Revenue_Base = null;
		
		public readonly OptionSetValue PurchaseTimeFrame = null;
		
		public readonly string Address2_PostalCode = null;
		
		public readonly OptionSetValue BudgetStatus = null;
		
		public readonly bool? DoNotPostalMail = null;
		
		public readonly string Address2_Name = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly OptionSetValue Address2_AddressTypeCode = null;
		
		public readonly string MiddleName = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly string Address2_UPSZone = null;
		
		public readonly OptionSetValue Address1_ShippingMethodCode = null;
		
		public readonly Guid? StageId = null;
		
		public readonly int? Address1_UTCOffset = null;
		
		public readonly int? Address2_UTCOffset = null;
		
		public readonly string Address2_Line2 = null;
		
		public readonly EntityReference ContactId = null;
		
		public readonly bool? DoNotBulkEMail = null;
		
		public readonly EntityReference RelatedObjectId = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly EntityReference CustomerId = null;
		
		public readonly string Address1_Telephone2 = null;
		
		public readonly string Address1_Name = null;
		
		public readonly string CompanyName = null;
		
		public readonly string LastName = null;
		
		public readonly string WebSiteUrl = null;
		
		public readonly OptionSetValue LeadQualityCode = null;
		
		public readonly string Salutation = null;
		
		public readonly string FirstName = null;
		
		public readonly EntityReference MasterId = null;
		
		public readonly DateTime? ScheduleFollowUp_Qualify = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string Address2_City = null;
		
		public readonly string JobTitle = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string YomiFirstName = null;
		
		public readonly OptionSetValue IndustryCode = null;
		
		public readonly string Address2_Composite = null;
		
		public readonly OptionSetValue Need = null;
		
		public readonly bool? DoNotFax = null;
		
		public readonly string EMailAddress2 = null;
		
		public readonly string Telephone3 = null;
		
		public readonly OptionSetValue SalesStage = null;
		
		public readonly bool? EvaluateFit = null;
		
		public readonly string Address1_UPSZone = null;
		
		public readonly bool? DoNotEMail = null;
		
		public readonly DateTime? EstimatedCloseDate = null;
		
		public readonly bool? Merged = null;
		
		public readonly string TraversedPath = null;
		
		public readonly string Address1_Fax = null;
		
		public readonly string YomiFullName = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference CampaignId = null;
		
		public readonly string Telephone1 = null;
		
		public readonly double? Address1_Latitude = null;
		
		public readonly Money EstimatedAmount = null;
		
		public readonly string Address2_Line3 = null;
		
		public readonly bool? DoNotPhone = null;
		
		public readonly string Address1_PostalCode = null;
		
		public readonly string Address2_Telephone1 = null;
		
		public readonly string Address2_Fax = null;
		
		public readonly OptionSetValue Address1_AddressTypeCode = null;
		
		public readonly double? Address1_Longitude = null;
		
		public readonly string EMailAddress1 = null;
		
		public readonly string YomiMiddleName = null;
		
		public readonly bool? ParticipatesInWorkflow = null;
		
		public readonly string Address2_County = null;
		
		public readonly string Address1_Country = null;
		
		public readonly bool? DecisionMaker = null;
		
		public readonly string Address2_Telephone3 = null;
		
		public readonly string Address1_Line2 = null;
		
		public readonly string SIC = null;
		
		public readonly OptionSetValue Address2_ShippingMethodCode = null;
		
		public readonly string QualificationComments = null;
		
		public readonly string Description = null;
		
		public readonly string Address1_City = null;
		
		public readonly OptionSetValue PreferredContactMethodCode = null;
		
		public readonly double? Address2_Latitude = null;
		
		public readonly string Subject = null;
		
		public readonly string Address2_PostOfficeBox = null;
		
		public readonly bool? FollowEmail = null;
		
		public readonly string EMailAddress3 = null;
		
		public readonly Guid? LeadId = null;
		
		public readonly EntityReference OwningUser = null;

        public new static class Options
        {
            public enum StateCode
            {
                Open = 0,
                Qualified = 1,
                Disqualified = 2
            }
            public enum LeadSourceCode
            {
                Advertisement = 1,
                EmployeeReferral = 2,
                ExternalReferral = 3,
                Partner = 4,
                PublicRelations = 5,
                Seminar = 6,
                TradeShow = 7,
                Web = 8,
                WordOfMouth = 9,
                Other = 10
            }
            public enum PurchaseProcess
            {
                Individual = 0,
                Committee = 1,
                Unknown = 2
            }
            public enum SalesStageCode
            {
                DefaultValue = 1
            }
            public enum InitialCommunication
            {
                Contacted = 0,
                NotContacted = 1
            }
            public enum PriorityCode
            {
                DefaultValue = 1
            }
            public enum PurchaseTimeFrame
            {
                Immediate = 0,
                ThisQuarter = 1,
                NextQuarter = 2,
                ThisYear = 3,
                Unknown = 4
            }
            public enum BudgetStatus
            {
                NoCommittedBudget = 0,
                MayBuy = 1,
                CanBuy = 2,
                WillBuy = 3
            }
            public enum Address2_AddressTypeCode
            {
                DefaultValue = 1
            }
            public enum StatusCode
            {
                New = 1,
                Contacted = 2,
                Qualified = 3,
                Lost = 4,
                CannotContact = 5,
                NoLongerInterested = 6,
                Canceled = 7
            }
            public enum Address1_ShippingMethodCode
            {
                DefaultValue = 1
            }
            public enum LeadQualityCode
            {
                Hot = 1,
                Warm = 2,
                Cold = 3
            }
            public enum IndustryCode
            {
                Accounting = 1,
                AgricultureAndNonPetrolNaturalResourceExtraction = 2,
                BroadcastingPrintingAndPublishing = 3,
                Brokers = 4,
                BuildingSupplyRetail = 5,
                BusinessServices = 6,
                Consulting = 7,
                ConsumerServices = 8,
                DesignDirectionAndCreativeManagement = 9,
                DistributorsDispatchersAndProcessors = 10,
                DoctorSOfficesAndClinics = 11,
                DurableManufacturing = 12,
                EatingAndDrinkingPlaces = 13,
                EntertainmentRetail = 14,
                EquipmentRentalAndLeasing = 15,
                Financial = 16,
                FoodAndTobaccoProcessing = 17,
                InboundCapitalIntensiveProcessing = 18,
                InboundRepairAndServices = 19,
                Insurance = 20,
                LegalServices = 21,
                NonDurableMerchandiseRetail = 22,
                OutboundConsumerService = 23,
                PetrochemicalExtractionAndDistribution = 24,
                ServiceRetail = 25,
                SIGAffiliations = 26,
                SocialServices = 27,
                SpecialOutboundTradeContractors = 28,
                SpecialtyRealty = 29,
                Transportation = 30,
                UtilityCreationAndDistribution = 31,
                VehicleRetail = 32,
                Wholesale = 33
            }
            public enum Need
            {
                MustHave = 0,
                ShouldHave = 1,
                GoodToHave = 2,
                NoNeed = 3
            }
            public enum SalesStage
            {
                Qualify = 0
            }
            public enum Address1_AddressTypeCode
            {
                DefaultValue = 1
            }
            public enum Address2_ShippingMethodCode
            {
                DefaultValue = 1
            }
            public enum PreferredContactMethodCode
            {
                Any = 1,
                Email = 2,
                Phone = 3,
                Fax = 4,
                Mail = 5
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("translationprocess")]
	public class TranslationProcess : Entity
    {
        public const string EntityLogicalName = "translationprocess";
        public TranslationProcess() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("businessprocessflowinstanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["businessprocessflowinstanceid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string TraversedPath = null;
		
		public readonly EntityReference ProcessId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ActiveStageId = null;
		
		public readonly DateTime? ActiveStageStartedOn = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly int? Duration = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? BusinessProcessFlowInstanceId = null;
		
		public readonly EntityReference KnowledgeArticleId = null;
		
		public readonly DateTime? CompletedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Finished = 2,
                Aborted = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("workflow")]
	public class Workflow : Entity
    {
        public const string EntityLogicalName = "workflow";
        public Workflow() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("workflowid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["workflowid"] = value;
            }
        }
		
		public readonly bool? AsyncAutoDelete = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly bool? Subprocess = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly bool? TriggerOnDelete = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly string ClientData = null;
		
		public readonly int? ProcessOrder = null;
		
		public readonly int? LanguageCode = null;
		
		public readonly EntityReference SdkMessageId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly bool? TriggerOnCreate = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly string Description = null;
		
		public readonly OptionSetValue RunAs = null;
		
		public readonly string RendererObjectTypeCode = null;
		
		public readonly EntityReference ParentWorkflowId = null;
		
		public readonly Guid? WorkflowIdUnique = null;
		
		public readonly Guid? WorkflowId = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly string Xaml = null;
		
		public readonly OptionSetValue CreateStage = null;
		
		public readonly string UniqueName = null;
		
		public readonly int? Rank = null;
		
		public readonly string ProcessRoleAssignment = null;
		
		public readonly bool? IsCrmUIWorkflow = null;
		
		public readonly OptionSetValue DeleteStage = null;
		
		public readonly OptionSetValue Type = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly Guid? FormId = null;
		
		public readonly OptionSetValue Scope = null;
		
		public readonly bool? IsTransacted = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly EntityReference ActiveWorkflowId = null;
		
		public readonly OptionSetValue Mode = null;
		
		public readonly OptionSetValue BusinessProcessType = null;
		
		public readonly string InputParameters = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly bool? OnDemand = null;
		
		public readonly OptionSetValue UpdateStage = null;
		
		public readonly string PrimaryEntity = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly OptionSetValue Category = null;
		
		public readonly string TriggerOnUpdateAttributeList = null;
		
		public readonly bool? SyncWorkflowLogOnFailure = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference PluginTypeId = null;
		
		public readonly bool? IsCustomizable = null;

        public new static class Options
        {
            public enum RunAs
            {
                Owner = 0,
                CallingUser = 1
            }
            public enum StateCode
            {
                Draft = 0,
                Activated = 1
            }
            public enum CreateStage
            {
                PreOperation = 20,
                PostOperation = 40
            }
            public enum DeleteStage
            {
                PreOperation = 20,
                PostOperation = 40
            }
            public enum Type
            {
                Definition = 1,
                Activation = 2,
                Template = 3
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum Scope
            {
                User = 1,
                BusinessUnit = 2,
                ParentChildBusinessUnits = 3,
                Organization = 4
            }
            public enum StatusCode
            {
                Draft = 1,
                Activated = 2
            }
            public enum Mode
            {
                Background = 0,
                RealTime = 1
            }
            public enum BusinessProcessType
            {
                BusinessFlow = 0,
                TaskFlow = 1
            }
            public enum UpdateStage
            {
                PreOperation = 20,
                PostOperation = 40
            }
            public enum PrimaryEntity
            {

            }
            public enum Category
            {
                Workflow = 0,
                Dialog = 1,
                BusinessRule = 2,
                Action = 3,
                BusinessProcessFlow = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("resource")]
	public class Resource : Entity
    {
        public const string EntityLogicalName = "resource";
        public Resource() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("resourceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["resourceid"] = value;
            }
        }
		
		public readonly EntityReference SiteId = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly bool? IsDisabled = null;
		
		public readonly EntityReference BusinessUnitId = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly Guid? CalendarId = null;
		
		public readonly string ObjectTypeCode = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly bool? DisplayInServiceViews = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? ResourceId = null;

        public new static class Options
        {
            public enum ObjectTypeCode
            {
                DefaultValue = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("principalentitymap")]
	public class PrincipalEntityMap : Entity
    {
        public const string EntityLogicalName = "principalentitymap";
        public PrincipalEntityMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("principalentitymapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["principalentitymapid"] = value;
            }
        }
		
		public readonly Guid? PrincipalEntityMapId = null;
		
		public readonly Guid? PrincipalId = null;
		
		public readonly string ObjectTypeCode = null;
		
		public readonly int? VersionNumber = null;

        public new static class Options
        {
            public enum ObjectTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sdkmessagerequestfield")]
	public class SdkMessageRequestField : Entity
    {
        public const string EntityLogicalName = "sdkmessagerequestfield";
        public SdkMessageRequestField() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sdkmessagerequestfieldid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sdkmessagerequestfieldid"] = value;
            }
        }
		
		public readonly EntityReference SdkMessageRequestId = null;
		
		public readonly string Name = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? Position = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string Parser = null;
		
		public readonly int? CustomizationLevel = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string PublicName = null;
		
		public readonly int? FieldMask = null;
		
		public readonly Guid? SdkMessageRequestFieldId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly bool? Optional = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string ParameterBindingInformation = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly Guid? SdkMessageRequestFieldIdUnique = null;
		
		public readonly string ClrParser = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("systemusermanagermap")]
	public class SystemUserManagerMap : Entity
    {
        public const string EntityLogicalName = "systemusermanagermap";
        public SystemUserManagerMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("systemusermanagermapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["systemusermanagermapid"] = value;
            }
        }
		
		public readonly int? HierarchyLevel = null;
		
		public readonly Guid? SystemUserId = null;
		
		public readonly Guid? ParentSystemUserId = null;
		
		public readonly Guid? SystemUserManagerMapId = null;
		
		public readonly int? VersionNumber = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("relationshiprolemap")]
	public class RelationshipRoleMap : Entity
    {
        public const string EntityLogicalName = "relationshiprolemap";
        public RelationshipRoleMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("relationshiprolemapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["relationshiprolemapid"] = value;
            }
        }
		
		public readonly string PrimaryObjectTypeCode = null;
		
		public readonly Guid? OrganizationId = null;
		
		public readonly string AssociateObjectTypeCode = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference RelationshipRoleId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? RelationshipRoleMapId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference CreatedBy = null;

        public new static class Options
        {
            public enum PrimaryObjectTypeCode
            {

            }
            public enum AssociateObjectTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("reportvisibility")]
	public class ReportVisibility : Entity
    {
        public const string EntityLogicalName = "reportvisibility";
        public ReportVisibility() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("reportvisibilityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["reportvisibilityid"] = value;
            }
        }
		
		public readonly EntityReference OwnerId = null;
		
		public readonly Guid? ReportVisibilityId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? OwningUser = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue VisibilityCode = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly Guid? OwningBusinessUnit = null;
		
		public readonly Guid? ReportVisibilityIdUnique = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly EntityReference ReportId = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly EntityReference CreatedBy = null;

        public new static class Options
        {
            public enum VisibilityCode
            {
                ReportsArea = 1,
                FormsForRelatedRecordTypes = 2,
                ListsForRelatedRecordTypes = 3
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("contactinvoices")]
	public class ContactInvoices : Entity
    {
        public const string EntityLogicalName = "contactinvoices";
        public ContactInvoices() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("contactinvoiceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["contactinvoiceid"] = value;
            }
        }
		
		public readonly Guid? ContactId = null;
		
		public readonly Guid? ContactInvoiceId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? InvoiceId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("traceregarding")]
	public class TraceRegarding : Entity
    {
        public const string EntityLogicalName = "traceregarding";
        public TraceRegarding() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("traceregardingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["traceregardingid"] = value;
            }
        }
		
		public readonly EntityReference RegardingObjectOwnerId = null;
		
		public readonly string RegardingObjectTypeCodeForSharing = null;
		
		public readonly EntityReference RegardingObjectOwningBusinessUnit = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly Guid? TraceRegardingId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("recurringappointmentmaster")]
	public class RecurringAppointmentMaster : Entity
    {
        public const string EntityLogicalName = "recurringappointmentmaster";
        public RecurringAppointmentMaster() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly bool? IsWeekDayPattern = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly bool? IsAllDayEvent = null;
		
		public readonly Guid? ActivityId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? DayOfMonth = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly DateTime? EndTime = null;
		
		public readonly int? OutlookOwnerApptId = null;
		
		public readonly int? Interval = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly string Description = null;
		
		public readonly int? DaysOfWeekMask = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly OptionSetValue Instance = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly int? FirstDayOfWeek = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string Category = null;
		
		public readonly bool? IsRegenerate = null;
		
		public readonly OptionSetValue MonthOfYear = null;
		
		public readonly EntityCollection Organizer = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly string TraversedPath = null;
		
		public readonly EntityCollection OptionalAttendees = null;
		
		public readonly bool? IsWorkflowCreated = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly DateTime? LastExpandedInstanceDate = null;
		
		public readonly DateTime? NextExpansionInstanceDate = null;
		
		public readonly OptionSetValue InstanceTypeCode = null;
		
		public readonly EntityReference ServiceId = null;
		
		public readonly int? Occurrences = null;
		
		public readonly string GlobalObjectId = null;
		
		public readonly bool? IsNthYearly = null;
		
		public readonly DateTime? PatternEndDate = null;
		
		public readonly bool? IsNthMonthly = null;
		
		public readonly bool? IsBilled = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly DateTime? PatternStartDate = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Subject = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly bool? SeriesStatus = null;
		
		public readonly OptionSetValue PatternEndType = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly DateTime? EffectiveStartDate = null;
		
		public readonly DateTime? StartTime = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly string ActivityTypeCode = null;
		
		public readonly DateTime? SortDate = null;
		
		public readonly string DeletedExceptionsList = null;
		
		public readonly int? Duration = null;
		
		public readonly Guid? SubscriptionId = null;
		
		public readonly string Subcategory = null;
		
		public readonly OptionSetValue RecurrencePatternType = null;
		
		public readonly EntityCollection RequiredAttendees = null;
		
		public readonly EntityReference GroupId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? IsMapiPrivate = null;
		
		public readonly DateTime? EffectiveEndDate = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference RuleId = null;
		
		public readonly bool? IsRegularActivity = null;
		
		public readonly string Location = null;
		
		public readonly Guid? StageId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly OptionSetValue ExpansionStateCode = null;

        public new static class Options
        {
            public enum StateCode
            {
                Open = 0,
                Completed = 1,
                Canceled = 2,
                Scheduled = 3
            }
            public enum Instance
            {
                First = 1,
                Second = 2,
                Third = 3,
                Fourth = 4,
                Last = 5
            }
            public enum MonthOfYear
            {
                InvalidMonthOfYear = 0,
                January = 1,
                February = 2,
                March = 3,
                April = 4,
                May = 5,
                June = 6,
                July = 7,
                August = 8,
                September = 9,
                October = 10,
                November = 11,
                December = 12
            }
            public enum InstanceTypeCode
            {
                NotRecurring = 0,
                RecurringMaster = 1,
                RecurringInstance = 2,
                RecurringException = 3,
                RecurringFutureException = 4
            }
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum StatusCode
            {
                Free = 1,
                Tentative = 2,
                Completed = 3,
                Canceled = 4,
                Busy = 5,
                OutOfOffice = 6
            }
            public enum PatternEndType
            {
                NoEndDate = 1,
                Occurrences = 2,
                PatternEndDate = 3
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                ServiceActivity = 4214,
                OpportunityClose = 4208,
                OrderClose = 4209,
                QuoteClose = 4211,
                CaseResolution = 4206,
                Task = 4212,
                CampaignResponse = 4401,
                CampaignActivity = 4402,
                BulkOperation = 4406,
                RecurringAppointment = 4251
            }
            public enum RecurrencePatternType
            {
                Daily = 0,
                Weekly = 1,
                Monthly = 2,
                Yearly = 3
            }
            public enum ExpansionStateCode
            {
                Unexpanded = 0,
                Partial = 1,
                Full = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("importlog")]
	public class ImportLog : Entity
    {
        public const string EntityLogicalName = "importlog";
        public ImportLog() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("importlogid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["importlogid"] = value;
            }
        }
		
		public readonly int? ErrorNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? ImportLogId = null;
		
		public readonly int? LineNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly string HeaderColumn = null;
		
		public readonly string ColumnValue = null;
		
		public readonly string ErrorDescription = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly OptionSetValue LogPhaseCode = null;
		
		public readonly EntityReference ImportDataId = null;
		
		public readonly string AdditionalInfo = null;
		
		public readonly int? SequenceNumber = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference ImportFileId = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0
            }
            public enum StatusCode
            {
                Active = 0
            }
            public enum LogPhaseCode
            {
                Parse = 0,
                Transform = 1,
                ImportCreate = 2,
                ImportUpdate = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("externalpartyitem")]
	public class ExternalPartyItem : Entity
    {
        public const string EntityLogicalName = "externalpartyitem";
        public ExternalPartyItem() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("externalpartyitemid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["externalpartyitemid"] = value;
            }
        }
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly DateTime? LastEnabledOn = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly EntityReference ExternalPartyId = null;
		
		public readonly EntityReference ChannelAccessProfileId = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly DateTime? LastDisabledOn = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Guid? ExternalPartyItemId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference RegardingObjectId = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Enabled = 1,
                Disabled = 2
            }
            public enum StateCode
            {
                Enabled = 0,
                Disabled = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("template")]
	public class Template : Entity
    {
        public const string EntityLogicalName = "template";
        public Template() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("templateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["templateid"] = value;
            }
        }
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly int? LanguageCode = null;
		
		public readonly string TemplateTypeCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly bool? IsRecommended = null;
		
		public readonly string SubjectPresentationXml = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? ReplyRate = null;
		
		public readonly int? GenerationTypeCode = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly string Description = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? OpenCount = null;
		
		public readonly string MimeType = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly string Body = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string PresentationXml = null;
		
		public readonly Guid? TemplateId = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly string Subject = null;
		
		public readonly int? ReplyCount = null;
		
		public readonly int? UsedCount = null;
		
		public readonly Guid? TemplateIdUnique = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly int? OpenRate = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Title = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly bool? IsPersonal = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum TemplateTypeCode
            {
                Global = 8,
                Lead = 4,
                Opportunity = 3,
                Account = 1,
                Contact = 2,
                Quote = 1084,
                Order = 1088,
                Invoice = 1090,
                Case = 112,
                Contract = 1010,
                CampaignActivity = 4402,
                ServiceActivity = 4214,
                SystemJob = 4700
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sdkmessage")]
	public class SdkMessage : Entity
    {
        public const string EntityLogicalName = "sdkmessage";
        public SdkMessage() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sdkmessageid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sdkmessageid"] = value;
            }
        }
		
		public readonly Guid? SdkMessageIdUnique = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly int? Availability = null;
		
		public readonly int? CustomizationLevel = null;
		
		public readonly bool? AutoTransact = null;
		
		public readonly string CategoryName = null;
		
		public readonly Guid? SdkMessageId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly bool? IsReadOnly = null;
		
		public readonly bool? IsValidForExecuteAsync = null;
		
		public readonly bool? IsPrivate = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly bool? WorkflowSdkStepEnabled = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly bool? IsActive = null;
		
		public readonly string ThrottleSettings = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly bool? Template = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? Expand = null;
		
		public readonly EntityReference OrganizationId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("socialactivity")]
	public class SocialActivity : Entity
    {
        public const string EntityLogicalName = "socialactivity";
        public SocialActivity() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }
		
		public readonly DateTime? PostedOn = null;
		
		public readonly EntityCollection From = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly string ThreadId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly string InResponseTo = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly bool? IsRegularActivity = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly string ActivityTypeCode = null;
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly bool? IsWorkflowCreated = null;
		
		public readonly string TraversedPath = null;
		
		public readonly string PostURL = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Subject = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityCollection To = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly DateTime? ActualEnd = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly Guid? ActivityId = null;
		
		public readonly double? SentimentValue = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly bool? IsBilled = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference PostAuthor = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly int? ActualDurationMinutes = null;
		
		public readonly string SocialAdditionalParams = null;
		
		public readonly int? ScheduledDurationMinutes = null;
		
		public readonly DateTime? ActualStart = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityCollection Resources = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference PostFromProfileId = null;
		
		public readonly string PostToProfileId = null;
		
		public readonly EntityReference PostAuthorAccount = null;
		
		public readonly EntityReference ServiceId = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly string PostId = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly Guid? StageId = null;
		
		public readonly OptionSetValue PostMessageType = null;
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly string ActivityAdditionalParams = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly DateTime? SortDate = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly bool? DirectionCode = null;
		
		public readonly OptionSetValue Community = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Completed = 1,
                Failed = 2,
                Processing = 3,
                Open = 4,
                Canceled = 5
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                ServiceActivity = 4214,
                OpportunityClose = 4208,
                OrderClose = 4209,
                QuoteClose = 4211,
                CaseResolution = 4206,
                Task = 4212,
                CampaignResponse = 4401,
                CampaignActivity = 4402,
                BulkOperation = 4406,
                RecurringAppointment = 4251
            }
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }
            public enum PostMessageType
            {
                PublicMessage = 0,
                PrivateMessage = 1
            }
            public enum StateCode
            {
                Open = 0,
                Completed = 1,
                Canceled = 2
            }
            public enum Community
            {
                Facebook = 1,
                Twitter = 2,
                Other = 0
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("usersettings")]
	public class UserSettings : Entity
    {
        public const string EntityLogicalName = "usersettings";
        public UserSettings() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("systemuserid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["systemuserid"] = value;
            }
        }
		
		public readonly int? OutlookSyncInterval = null;
		
		public readonly int? OfflineSyncInterval = null;
		
		public readonly int? AddressBookSyncInterval = null;
		
		public readonly OptionSetValue EntityFormMode = null;
		
		public readonly bool? SplitViewState = null;
		
		public readonly int? TrackingTokenId = null;
		
		public readonly string HomepageLayout = null;
		
		public readonly string UserProfile = null;
		
		public readonly int? DateFormatCode = null;
		
		public readonly string TimeSeparator = null;
		
		public readonly int? PagingLimit = null;
		
		public readonly int? TimeZoneDaylightDay = null;
		
		public readonly int? NextTrackingNumber = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly bool? IsDefaultCountryCodeCheckEnabled = null;
		
		public readonly int? TimeZoneDaylightYear = null;
		
		public readonly int? HelpLanguageId = null;
		
		public readonly OptionSetValue IncomingEmailFilteringMethod = null;
		
		public readonly int? UILanguageId = null;
		
		public readonly int? TimeZoneDaylightBias = null;
		
		public readonly string HomepageArea = null;
		
		public readonly int? LongDateFormatCode = null;
		
		public readonly string WorkdayStartTime = null;
		
		public readonly int? TimeZoneDaylightDayOfWeek = null;
		
		public readonly string DateSeparator = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? AutoCreateContactOnPromote = null;
		
		public readonly bool? IsAutoDataCaptureEnabled = null;
		
		public readonly int? TimeZoneBias = null;
		
		public readonly int? PricingDecimalPrecision = null;
		
		public readonly int? DefaultCalendarView = null;
		
		public readonly int? ResourceBookingExchangeSyncVersion = null;
		
		public readonly string NumberSeparator = null;
		
		public readonly bool? ShowWeekNumber = null;
		
		public readonly string NumberGroupFormat = null;
		
		public readonly int? TimeZoneDaylightHour = null;
		
		public readonly bool? IsGuidedHelpEnabled = null;
		
		public readonly int? TimeZoneStandardDay = null;
		
		public readonly bool? IgnoreUnsolicitedEmail = null;
		
		public readonly bool? UseCrmFormForAppointment = null;
		
		public readonly Guid? BusinessUnitId = null;
		
		public readonly string AMDesignator = null;
		
		public readonly bool? AllowEmailCredentials = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue DefaultSearchExperience = null;
		
		public readonly bool? UseCrmFormForEmail = null;
		
		public readonly int? CurrencyFormatCode = null;
		
		public readonly int? TimeZoneDaylightMonth = null;
		
		public readonly int? TimeZoneCode = null;
		
		public readonly string CurrencySymbol = null;
		
		public readonly string DateFormatString = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string WorkdayStopTime = null;
		
		public readonly Guid? SystemUserId = null;
		
		public readonly string DefaultCountryCode = null;
		
		public readonly bool? UseImageStrips = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string PersonalizationSettings = null;
		
		public readonly int? TimeZoneStandardMonth = null;
		
		public readonly int? TimeZoneStandardSecond = null;
		
		public readonly int? TimeZoneStandardYear = null;
		
		public readonly int? TimeZoneStandardMinute = null;
		
		public readonly bool? GetStartedPaneContentEnabled = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly OptionSetValue ReportScriptErrors = null;
		
		public readonly int? NegativeFormatCode = null;
		
		public readonly int? FullNameConventionCode = null;
		
		public readonly DateTime? LastAlertsViewedTime = null;
		
		public readonly OptionSetValue DataValidationModeForExportToExcel = null;
		
		public readonly int? TimeZoneDaylightSecond = null;
		
		public readonly int? AdvancedFindStartupMode = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? CalendarType = null;
		
		public readonly int? TimeZoneStandardHour = null;
		
		public readonly int? LocaleId = null;
		
		public readonly string PMDesignator = null;
		
		public readonly bool? IsResourceBookingExchangeSyncEnabled = null;
		
		public readonly string EmailPassword = null;
		
		public readonly bool? IsAppsForCrmAlertDismissed = null;
		
		public readonly bool? IsDuplicateDetectionEnabledWhenGoingOnline = null;
		
		public readonly bool? IsSendAsAllowed = null;
		
		public readonly int? NegativeCurrencyFormatCode = null;
		
		public readonly bool? UseCrmFormForContact = null;
		
		public readonly int? TimeFormatCode = null;
		
		public readonly int? TimeZoneStandardDayOfWeek = null;
		
		public readonly string HomepageSubarea = null;
		
		public readonly int? TimeZoneStandardBias = null;
		
		public readonly Guid? DefaultDashboardId = null;
		
		public readonly string EmailUsername = null;
		
		public readonly OptionSetValue VisualizationPaneLayout = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly bool? UseCrmFormForTask = null;
		
		public readonly int? CurrencyDecimalPrecision = null;
		
		public readonly bool? SyncContactCompany = null;
		
		public readonly string DecimalSymbol = null;
		
		public readonly int? TimeZoneDaylightMinute = null;
		
		public readonly string TimeFormatString = null;

        public new static class Options
        {
            public enum EntityFormMode
            {
                OrganizationDefault = 0,
                ReadOptimized = 1,
                Edit = 2
            }
            public enum IncomingEmailFilteringMethod
            {
                AllEmailMessages = 0,
                EmailMessagesInResponseToDynamics365Email = 1,
                EmailMessagesFromDynamics365LeadsContactsAndAccounts = 2,
                EmailMessagesFromDynamics365RecordsThatAreEmailEnabled = 3
            }
            public enum DefaultSearchExperience
            {
                RelevanceSearch = 0,
                CategorizedSearch = 1,
                UseLastSearch = 2
            }
            public enum ReportScriptErrors
            {
                AskMeForPermissionToSendAnErrorReportToMicrosoft = 1,
                AutomaticallySendAnErrorReportToMicrosoftWithoutAskingMeForPermission = 2,
                NeverSendAnErrorReportToMicrosoftAboutMicrosoftDynamics365 = 3
            }
            public enum DataValidationModeForExportToExcel
            {
                Full = 0,
                None = 1
            }
            public enum VisualizationPaneLayout
            {
                TopBottom = 0,
                SideBySide = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("emailsignature")]
	public class EmailSignature : Entity
    {
        public const string EntityLogicalName = "emailsignature";
        public EmailSignature() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("emailsignatureid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["emailsignatureid"] = value;
            }
        }
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string Description = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? GenerationTypeCode = null;
		
		public readonly string MimeType = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? EmailSignatureId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly bool? IsDefault = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string PresentationXml = null;
		
		public readonly bool? IsPersonal = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly string Body = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Title = null;
		
		public readonly int? LanguageCode = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference OwningUser = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("channelproperty")]
	public class ChannelProperty : Entity
    {
        public const string EntityLogicalName = "channelproperty";
        public ChannelProperty() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("channelpropertyid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["channelpropertyid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly OptionSetValue statuscode = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue statecode = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string Description = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string Applicationsource = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly OptionSetValue DataType = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly Guid? ChannelPropertyId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? ChannelPropertyIdUnique = null;

        public new static class Options
        {
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum DataType
            {
                FloatingPointNumber = 0,
                SingleLineOfText = 1,
                WholeNumber = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("relationshiprole")]
	public class RelationshipRole : Entity
    {
        public const string EntityLogicalName = "relationshiprole";
        public RelationshipRole() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("relationshiproleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["relationshiproleid"] = value;
            }
        }
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OrganizationId = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly Guid? RelationshipRoleId = null;
		
		public readonly EntityReference CreatedBy = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string Description = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("hierarchysecurityconfiguration")]
	public class HierarchySecurityConfiguration : Entity
    {
        public const string EntityLogicalName = "hierarchysecurityconfiguration";
        public HierarchySecurityConfiguration() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("hierarchysecuritymodelingsettingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["hierarchysecuritymodelingsettingid"] = value;
            }
        }
		
		public readonly string ObjectTypeCode = null;
		
		public readonly Guid? HierarchySecurityModelingSettingId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string EntityName = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("duplicaterecord")]
	public class DuplicateRecord : Entity
    {
        public const string EntityLogicalName = "duplicaterecord";
        public DuplicateRecord() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("duplicateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["duplicateid"] = value;
            }
        }
		
		public readonly EntityReference OwnerId = null;
		
		public readonly Guid? OwningUser = null;
		
		public readonly EntityReference AsyncOperationId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference DuplicateRuleId = null;
		
		public readonly EntityReference BaseRecordId = null;
		
		public readonly Guid? DuplicateId = null;
		
		public readonly Guid? OwningBusinessUnit = null;
		
		public readonly EntityReference DuplicateRecordId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("interprocesslock")]
	public class InterProcessLock : Entity
    {
        public const string EntityLogicalName = "interprocesslock";
        public InterProcessLock() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("interprocesslockid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["interprocesslockid"] = value;
            }
        }
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? Token = null;
		
		public readonly Guid? InterProcessLockId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("calendar")]
	public class Calendar : Entity
    {
        public const string EntityLogicalName = "calendar";
        public Calendar() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("calendarid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["calendarid"] = value;
            }
        }
		
		public readonly bool? IsShared = null;
		
		public readonly EntityReference BusinessUnitId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference HolidayScheduleCalendarId = null;
		
		public readonly OptionSetValue Type = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? PrimaryUserId = null;
		
		public readonly string Description = null;
		
		public readonly DateTime? CreatedOn = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? CalendarId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? ModifiedOn = null;

        public new static class Options
        {
            public enum Type
            {
                Default = 0,
                CustomerService = 1,
                HolidaySchedule = 2,
                InnerCalendarType = -1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("recommendationmodelmapping")]
	public class RecommendationModelMapping : Entity
    {
        public const string EntityLogicalName = "recommendationmodelmapping";
        public RecommendationModelMapping() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("recommendationmodelmappingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["recommendationmodelmappingid"] = value;
            }
        }
		
		public readonly bool? IsManaged = null;
		
		public readonly string FilterXml = null;
		
		public readonly EntityReference SupportedMapId = null;
		
		public readonly OptionSetValue ProductFieldPickList = null;
		
		public readonly string TransactionField = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly string ProductLineItemRelationship = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly Guid? RecommendationModelMappingId = null;
		
		public readonly int? ErrorCount = null;
		
		public readonly string Entity = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string EntityDisplayName = null;
		
		public readonly string ProductLineItemRelationshipDisplayName = null;
		
		public readonly string DataFilter = null;
		
		public readonly OptionSetValue MappingType = null;
		
		public readonly int? SynchronizedCount = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly OptionSetValue AccountFieldPickList = null;
		
		public readonly EntityReference RecommendationModelId = null;
		
		public readonly Guid? RecommendationModelMappingIdUnique = null;
		
		public readonly EntityReference RecommendationModelVersionId = null;
		
		public readonly OptionSetValue EntityPickList = null;
		
		public readonly string TimeRangeFilter = null;
		
		public readonly string ProductField = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly OptionSetValue ProductLineItemRelationshipPickList = null;
		
		public readonly string ProductFieldDisplayName = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly string AccountField = null;
		
		public readonly string AccountFieldDisplayName = null;

        public new static class Options
        {
            public enum ProductFieldPickList
            {
                Yes = 1,
                No = 2
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum MappingType
            {
                BasketEntity = 1,
                RecommendationEntity = 2,
                CatalogEntity = 3
            }
            public enum AccountFieldPickList
            {
                Yes = 1,
                No = 2
            }
            public enum EntityPickList
            {
                Yes = 1,
                No = 2
            }
            public enum ProductLineItemRelationshipPickList
            {
                Yes = 1,
                No = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("fax")]
	public class Fax : Entity
    {
        public const string EntityLogicalName = "fax";
        public Fax() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly Guid? ActivityId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string ActivityTypeCode = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string Category = null;
		
		public readonly int? ScheduledDurationMinutes = null;
		
		public readonly int? NumberOfPages = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly Guid? StageId = null;
		
		public readonly EntityReference OwningUser = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Subject = null;
		
		public readonly bool? IsRegularActivity = null;
		
		public readonly DateTime? ActualEnd = null;
		
		public readonly string Tsid = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityCollection from = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly string CoverPageName = null;
		
		public readonly string Subcategory = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly bool? DirectionCode = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly string BillingCode = null;
		
		public readonly EntityReference ServiceId = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly Guid? SubscriptionId = null;
		
		public readonly EntityCollection to = null;
		
		public readonly DateTime? SortDate = null;
		
		public readonly bool? IsBilled = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly bool? IsWorkflowCreated = null;
		
		public readonly DateTime? ActualStart = null;
		
		public readonly string TraversedPath = null;
		
		public readonly string FaxNumber = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly int? ActualDurationMinutes = null;
		
		public readonly string Description = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;

        public new static class Options
        {
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                ServiceActivity = 4214,
                OpportunityClose = 4208,
                OrderClose = 4209,
                QuoteClose = 4211,
                CaseResolution = 4206,
                Task = 4212,
                CampaignResponse = 4401,
                CampaignActivity = 4402,
                BulkOperation = 4406,
                RecurringAppointment = 4251
            }
            public enum StateCode
            {
                Open = 0,
                Completed = 1,
                Canceled = 2
            }
            public enum StatusCode
            {
                Open = 1,
                Completed = 2,
                Sent = 3,
                Received = 4,
                Canceled = 5
            }
            public enum PriorityCode
            {
                Low = 0,
                Normal = 1,
                High = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("queuemembercount")]
	public class QueueMemberCount : Entity
    {
        public const string EntityLogicalName = "queuemembercount";
        public QueueMemberCount() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("queuemembercountid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["queuemembercountid"] = value;
            }
        }
		
		public readonly Guid? QueueId = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("queuemembercount")]
		public readonly string QueueMemberCount1 = null;
		
		public readonly Guid? QueueMemberCountId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("businessunitmap")]
	public class BusinessUnitMap : Entity
    {
        public const string EntityLogicalName = "businessunitmap";
        public BusinessUnitMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("businessunitmapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["businessunitmapid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? SubBusinessId = null;
		
		public readonly Guid? BusinessId = null;
		
		public readonly Guid? BusinessUnitMapId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("timezonerule")]
	public class TimeZoneRule : Entity
    {
        public const string EntityLogicalName = "timezonerule";
        public TimeZoneRule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("timezoneruleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["timezoneruleid"] = value;
            }
        }
		
		public readonly int? DaylightDayOfWeek = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly int? DaylightYear = null;
		
		public readonly int? DaylightSecond = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? StandardYear = null;
		
		public readonly int? DaylightDay = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? DaylightHour = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly int? StandardBias = null;
		
		public readonly int? StandardSecond = null;
		
		public readonly int? DaylightBias = null;
		
		public readonly EntityReference TimeZoneDefinitionId = null;
		
		public readonly int? StandardDayOfWeek = null;
		
		public readonly int? Bias = null;
		
		public readonly int? StandardHour = null;
		
		public readonly DateTime? EffectiveDateTime = null;
		
		public readonly int? DaylightMinute = null;
		
		public readonly int? StandardDay = null;
		
		public readonly Guid? TimeZoneRuleId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? StandardMinute = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? StandardMonth = null;
		
		public readonly int? DaylightMonth = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sdkmessagefilter")]
	public class SdkMessageFilter : Entity
    {
        public const string EntityLogicalName = "sdkmessagefilter";
        public SdkMessageFilter() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sdkmessagefilterid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sdkmessagefilterid"] = value;
            }
        }
		
		public readonly Guid? SdkMessageFilterIdUnique = null;
		
		public readonly Guid? SdkMessageFilterId = null;
		
		public readonly string SecondaryObjectTypeCode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly bool? IsCustomProcessingStepAllowed = null;
		
		public readonly int? CustomizationLevel = null;
		
		public readonly int? Availability = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly bool? WorkflowSdkStepEnabled = null;
		
		public readonly string PrimaryObjectTypeCode = null;
		
		public readonly bool? IsVisible = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference SdkMessageId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference CreatedBy = null;

        public new static class Options
        {
            public enum SecondaryObjectTypeCode
            {

            }
            public enum PrimaryObjectTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("ratingvalue")]
	public class RatingValue : Entity
    {
        public const string EntityLogicalName = "ratingvalue";
        public RatingValue() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("ratingvalueid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["ratingvalueid"] = value;
            }
        }
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly Guid? RatingValueId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference RatingModel = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OwningUser = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? Value = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sdkmessageprocessingstepimage")]
	public class SdkMessageProcessingStepImage : Entity
    {
        public const string EntityLogicalName = "sdkmessageprocessingstepimage";
        public SdkMessageProcessingStepImage() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sdkmessageprocessingstepimageid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sdkmessageprocessingstepimageid"] = value;
            }
        }
		
		public readonly string EntityAlias = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly string Attributes = null;
		
		public readonly Guid? SdkMessageProcessingStepImageId = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly OptionSetValue ImageType = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly string MessagePropertyName = null;
		
		public readonly EntityReference SdkMessageProcessingStepId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? CustomizationLevel = null;
		
		public readonly string Description = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly Guid? SdkMessageProcessingStepImageIdUnique = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly string RelatedAttributeName = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? CreatedOn = null;

        public new static class Options
        {
            public enum ImageType
            {
                PreImage = 0,
                PostImage = 1,
                Both = 2
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("contactorders")]
	public class ContactOrders : Entity
    {
        public const string EntityLogicalName = "contactorders";
        public ContactOrders() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("contactorderid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["contactorderid"] = value;
            }
        }
		
		public readonly Guid? ContactOrderId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? ContactId = null;
		
		public readonly Guid? SalesOrderId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("calendarrule")]
	public class CalendarRule : Entity
    {
        public const string EntityLogicalName = "calendarrule";
        public CalendarRule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("calendarruleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["calendarruleid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly bool? IsVaried = null;
		
		public readonly int? SubCode = null;
		
		public readonly int? Offset = null;
		
		public readonly bool? IsSimple = null;
		
		public readonly string Description = null;
		
		public readonly int? Rank = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string GroupDesignator = null;
		
		public readonly double? Effort = null;
		
		public readonly EntityReference InnerCalendarId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? EffectiveIntervalStart = null;
		
		public readonly int? ExtentCode = null;
		
		public readonly DateTime? StartTime = null;
		
		public readonly EntityReference ServiceId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly DateTime? EffectiveIntervalEnd = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? CalendarRuleId = null;
		
		public readonly string Pattern = null;
		
		public readonly DateTime? EndTime = null;
		
		public readonly Guid? BusinessUnitId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly Guid? OrganizationId = null;
		
		public readonly int? TimeCode = null;
		
		public readonly int? Duration = null;
		
		public readonly bool? IsSelected = null;
		
		public readonly EntityReference CalendarId = null;
		
		public readonly int? TimeZoneCode = null;
		
		public readonly bool? IsModified = null;
		
		public readonly DateTime? ModifiedOn = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sdkmessageresponse")]
	public class SdkMessageResponse : Entity
    {
        public const string EntityLogicalName = "sdkmessageresponse";
        public SdkMessageResponse() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sdkmessageresponseid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sdkmessageresponseid"] = value;
            }
        }
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? SdkMessageResponseIdUnique = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? SdkMessageResponseId = null;
		
		public readonly int? CustomizationLevel = null;
		
		public readonly EntityReference SdkMessageRequestId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("importjob")]
	public class ImportJob : Entity
    {
        public const string EntityLogicalName = "importjob";
        public ImportJob() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("importjobid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["importjobid"] = value;
            }
        }
		
		public readonly double? Progress = null;
		
		public readonly string Data = null;
		
		public readonly DateTime? CompletedOn = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? StartedOn = null;
		
		public readonly string Name = null;
		
		public readonly string SolutionName = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? ImportJobId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference OrganizationId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("bookableresourcebookingheader")]
	public class BookableResourceBookingHeader : Entity
    {
        public const string EntityLogicalName = "bookableresourcebookingheader";
        public BookableResourceBookingHeader() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("bookableresourcebookingheaderid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["bookableresourcebookingheaderid"] = value;
            }
        }
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference OwnerId = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Guid? BookableResourceBookingHeaderId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly DateTime? EndTime = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly Guid? StageId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string TraversedPath = null;
		
		public readonly DateTime? StartTime = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly int? Duration = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly DateTime? CreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("resourcespec")]
	public class ResourceSpec : Entity
    {
        public const string EntityLogicalName = "resourcespec";
        public ResourceSpec() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("resourcespecid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["resourcespecid"] = value;
            }
        }
		
		public readonly string ObjectTypeCode = null;
		
		public readonly double? EffortRequired = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? CreatedOn = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly string Constraints = null;
		
		public readonly EntityReference BusinessUnitId = null;
		
		public readonly Guid? ResourceSpecId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string ObjectiveExpression = null;
		
		public readonly int? RequiredCount = null;
		
		public readonly Guid? GroupObjectId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string Description = null;
		
		public readonly bool? SameSite = null;

        public new static class Options
        {
            public enum ObjectTypeCode
            {
                DefaultValue = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("contract")]
	public class Contract : Entity
    {
        public const string EntityLogicalName = "contract";
        public Contract() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("contractid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["contractid"] = value;
            }
        }
		
		public readonly EntityReference CustomerId = null;
		
		public readonly Money TotalDiscount = null;
		
		public readonly EntityReference BillingContactId = null;
		
		public readonly int? Duration = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly OptionSetValue BillingFrequencyCode = null;
		
		public readonly EntityReference ContractTemplateId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly string ContractLanguage = null;
		
		public readonly Guid? ContractId = null;
		
		public readonly DateTime? BillingEndOn = null;
		
		public readonly Money TotalPrice_Base = null;
		
		public readonly DateTime? ExpiresOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly OptionSetValue ContractServiceLevelCode = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Title = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly EntityReference OriginatingContract = null;
		
		public readonly EntityReference BillingCustomerId = null;
		
		public readonly Money NetPrice_Base = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference BillingAccountId = null;
		
		public readonly Money TotalPrice = null;
		
		public readonly string ContractTemplateAbbreviation = null;
		
		public readonly string EffectivityCalendar = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":2}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly DateTime? ActiveOn = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string ContractNumber = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly Money NetPrice = null;
		
		public readonly EntityReference ServiceAddress = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly OptionSetValue AllotmentTypeCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly DateTime? CancelOn = null;
		
		public readonly EntityReference BillToAddress = null;
		
		public readonly DateTime? BillingStartOn = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference ContactId = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly bool? UseDiscountAsPercentage = null;
		
		public readonly EntityReference AccountId = null;
		
		public readonly Money TotalDiscount_Base = null;
		
		public readonly decimal? ExchangeRate = null;

        public new static class Options
        {
            public enum BillingFrequencyCode
            {
                Monthly = 1,
                Bimonthly = 2,
                Quarterly = 3,
                Semiannually = 4,
                Annually = 5
            }
            public enum ContractServiceLevelCode
            {
                Gold = 1,
                Silver = 2,
                Bronze = 3
            }
            public enum StatusCode
            {
                Draft = 1,
                Invoiced = 2,
                Active = 3,
                OnHold = 4,
                Canceled = 5,
                Expired = 6
            }
            public enum StateCode
            {
                Draft = 0,
                Invoiced = 1,
                Active = 2,
                OnHold = 3,
                Canceled = 4,
                Expired = 5
            }
            public enum AllotmentTypeCode
            {
                NumberOfCases = 1,
                Time = 2,
                CoverageDates = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("site")]
	public class Site : Entity
    {
        public const string EntityLogicalName = "site";
        public Site() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("siteid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["siteid"] = value;
            }
        }
		
		public readonly string Address1_StateOrProvince = null;
		
		public readonly string Address2_Telephone2 = null;
		
		public readonly string Address1_Country = null;
		
		public readonly Guid? Address2_AddressId = null;
		
		public readonly Guid? OrganizationId = null;
		
		public readonly string Address1_Telephone3 = null;
		
		public readonly string Address2_PostOfficeBox = null;
		
		public readonly string Address1_Telephone1 = null;
		
		public readonly string Address2_City = null;
		
		public readonly Guid? SiteId = null;
		
		public readonly string Address2_Telephone1 = null;
		
		public readonly string Address1_Line2 = null;
		
		public readonly double? Address1_Latitude = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string EMailAddress = null;
		
		public readonly string Address2_County = null;
		
		public readonly int? TimeZoneCode = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly string Address2_Fax = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string Address1_Name = null;
		
		public readonly string Address1_Line3 = null;
		
		public readonly OptionSetValue Address1_ShippingMethodCode = null;
		
		public readonly string Address1_County = null;
		
		public readonly OptionSetValue Address2_AddressTypeCode = null;
		
		public readonly double? Address2_Longitude = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly double? Address2_Latitude = null;
		
		public readonly string Address2_Line1 = null;
		
		public readonly string Address1_Line1 = null;
		
		public readonly int? Address1_UTCOffset = null;
		
		public readonly string Address1_PostOfficeBox = null;
		
		public readonly OptionSetValue Address2_ShippingMethodCode = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string Address2_StateOrProvince = null;
		
		public readonly double? Address1_Longitude = null;
		
		public readonly int? Address2_UTCOffset = null;
		
		public readonly string Address1_Fax = null;
		
		public readonly string Address1_Telephone2 = null;
		
		public readonly Guid? Address1_AddressId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string Address1_PostalCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly OptionSetValue Address1_AddressTypeCode = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string Address2_Name = null;
		
		public readonly string Address2_Country = null;
		
		public readonly string Address1_UPSZone = null;
		
		public readonly string Address2_PostalCode = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string Address2_Line2 = null;
		
		public readonly string Address2_UPSZone = null;
		
		public readonly string Address2_Telephone3 = null;
		
		public readonly string Address1_City = null;
		
		public readonly string Address2_Line3 = null;

        public new static class Options
        {
            public enum Address1_ShippingMethodCode
            {
                DefaultValue = 1
            }
            public enum Address2_AddressTypeCode
            {
                DefaultValue = 1
            }
            public enum Address2_ShippingMethodCode
            {
                DefaultValue = 1
            }
            public enum Address1_AddressTypeCode
            {
                DefaultValue = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("mobileofflineprofileitemassociation")]
	public class MobileOfflineProfileItemAssociation : Entity
    {
        public const string EntityLogicalName = "mobileofflineprofileitemassociation";
        public MobileOfflineProfileItemAssociation() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("mobileofflineprofileitemassociationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["mobileofflineprofileitemassociationid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly Guid? StageId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? MobileOfflineProfileItemAssociationIdUnique = null;
		
		public readonly Guid? MobileOfflineProfileItemAssociationId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly bool? IsValidated = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? PublishedOn = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly bool? IsManaged = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? RelationshipId = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly string RelationshipData = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly string TraversedPath = null;
		
		public readonly EntityReference MobileOfflineProfileItemId = null;
		
		public readonly string RelationshipName = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string RelationshipDisplayName = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly OptionSetValue SelectedRelationShipsSchema = null;
		
		public readonly string ProfileItemAssociationEntityFilter = null;
		
		public readonly int? VersionNumber = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum SelectedRelationShipsSchema
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_wallsavedqueryusersettings")]
	public class msdyn_wallsavedqueryusersettings : UserOrTeamEntity
    {
        public const string EntityLogicalName = "msdyn_wallsavedqueryusersettings";
        public msdyn_wallsavedqueryusersettings() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_wallsavedqueryusersettingsid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_wallsavedqueryusersettingsid"] = value;
            }
        }
		
		public readonly int? msdyn_isvisiblebit = null;
		
		public readonly bool? msdyn_IsVirtual = null;
		
		public readonly EntityReference msdyn_wallsavedqueryid = null;
		
		public readonly bool? msdyn_includewallinresponse = null;
		
		public readonly int? msdyn_sortorder = null;
		
		public readonly bool? msdyn_isfollowing = null;
		
		public readonly EntityReference msdyn_userid = null;
		
		public readonly int? msdyn_type = null;
		
		public readonly string msdyn_savedqueryname = null;
		
		public readonly int? msdyn_default = null;
		
		public readonly int? msdyn_otc = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string msdyn_entityname = null;
		
		public readonly Guid? msdyn_wallsavedqueryusersettingsId = null;
		
		public readonly string msdyn_data = null;
		
		public readonly bool? msdyn_isvisible = null;
		
		public readonly string msdyn_entitydisplayname = null;

        public new static class Options
        {
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("plugintype")]
	public class PluginType : Entity
    {
        public const string EntityLogicalName = "plugintype";
        public PluginType() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("plugintypeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["plugintypeid"] = value;
            }
        }
		
		public readonly string FriendlyName = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly int? CustomizationLevel = null;
		
		public readonly string WorkflowActivityGroupName = null;
		
		public readonly string AssemblyName = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string Culture = null;
		
		public readonly Guid? PluginTypeIdUnique = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly string Description = null;
		
		public readonly Guid? PluginTypeId = null;
		
		public readonly EntityReference PluginAssemblyId = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly int? Major = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? Minor = null;
		
		public readonly bool? IsWorkflowActivity = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string TypeName = null;
		
		public readonly string CustomWorkflowActivityInfo = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string Version = null;
		
		public readonly string PublicKeyToken = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sdkmessageprocessingstep")]
	public class SdkMessageProcessingStep : Entity
    {
        public const string EntityLogicalName = "sdkmessageprocessingstep";
        public SdkMessageProcessingStep() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sdkmessageprocessingstepid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sdkmessageprocessingstepid"] = value;
            }
        }
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly bool? AsyncAutoDelete = null;
		
		public readonly int? CustomizationLevel = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly OptionSetValue Stage = null;
		
		public readonly Guid? SdkMessageProcessingStepIdUnique = null;
		
		public readonly EntityReference ImpersonatingUserId = null;
		
		public readonly int? Rank = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly EntityReference SdkMessageId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference SdkMessageFilterId = null;
		
		public readonly OptionSetValue Mode = null;
		
		public readonly EntityReference SdkMessageProcessingStepSecureConfigId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference PluginTypeId = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly string Description = null;
		
		public readonly string FilteringAttributes = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly bool? CanUseReadOnlyConnection = null;
		
		public readonly EntityReference EventHandler = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly Guid? SdkMessageProcessingStepId = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly OptionSetValue InvocationSource = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly OptionSetValue SupportedDeployment = null;
		
		public readonly bool? IsHidden = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly string Configuration = null;

        public new static class Options
        {
            public enum StateCode
            {
                Enabled = 0,
                Disabled = 1
            }
            public enum StatusCode
            {
                Enabled = 1,
                Disabled = 2
            }
            public enum Stage
            {
                InitialPreOperationForInternalUseOnly = 5,
                PreValidation = 10,
                InternalPreOperationBeforeExternalPluginsForInternalUseOnly = 15,
                PreOperation = 20,
                InternalPreOperationAfterExternalPluginsForInternalUseOnly = 25,
                MainOperationForInternalUseOnly = 30,
                InternalPostOperationBeforeExternalPluginsForInternalUseOnly = 35,
                PostOperation = 40,
                InternalPostOperationAfterExternalPluginsForInternalUseOnly = 45,
                PostOperationDeprecated = 50,
                FinalPostOperationForInternalUseOnly = 55
            }
            public enum Mode
            {
                Synchronous = 0,
                Asynchronous = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum InvocationSource
            {
                Internal = -1,
                Parent = 0,
                Child = 1
            }
            public enum SupportedDeployment
            {
                ServerOnly = 0,
                MicrosoftDynamics365ClientForOutlookOnly = 1,
                Both = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("duplicaterulecondition")]
	public class DuplicateRuleCondition : Entity
    {
        public const string EntityLogicalName = "duplicaterulecondition";
        public DuplicateRuleCondition() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("duplicateruleconditionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["duplicateruleconditionid"] = value;
            }
        }
		
		public readonly EntityReference OwnerId = null;
		
		public readonly Guid? OwningBusinessUnit = null;
		
		public readonly OptionSetValue OperatorCode = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? OwningUser = null;
		
		public readonly string MatchingAttributeName = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly bool? IgnoreBlankValues = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? DuplicateRuleConditionId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? OperatorParam = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string BaseAttributeName = null;

        public new static class Options
        {
            public enum OperatorCode
            {
                ExactMatch = 0,
                SameFirstCharacters = 1,
                SameLastCharacters = 2,
                SameDate = 3,
                SameDateAndTime = 4,
                ExactMatchPickListLabel = 5,
                ExactMatchPickListValue = 6
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("teamroles")]
	public class TeamRoles : Entity
    {
        public const string EntityLogicalName = "teamroles";
        public TeamRoles() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("teamroleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["teamroleid"] = value;
            }
        }
		
		public readonly Guid? RoleId = null;
		
		public readonly Guid? TeamId = null;
		
		public readonly Guid? TeamRoleId = null;
		
		public readonly int? VersionNumber = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("subscriptionmanuallytrackedobject")]
	public class SubscriptionManuallyTrackedObject : Entity
    {
        public const string EntityLogicalName = "subscriptionmanuallytrackedobject";
        public SubscriptionManuallyTrackedObject() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("subscriptionmanuallytrackedobjectid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["subscriptionmanuallytrackedobjectid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? SubscriptionManuallyTrackedObjectId = null;
		
		public readonly Guid? ObjectId = null;
		
		public readonly Guid? SubscriptionId = null;
		
		public readonly bool? Track = null;
		
		public readonly string ObjectTypeCode = null;

        public new static class Options
        {
            public enum ObjectTypeCode
            {
                Contact = 2,
                Task = 4212
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("incidentresolution")]
	public class IncidentResolution : Entity
    {
        public const string EntityLogicalName = "incidentresolution";
        public IncidentResolution() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ServiceId = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly string ActivityTypeCode = null;
		
		public readonly Guid? ActivityId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly string Subcategory = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly DateTime? ActualStart = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly bool? IsBilled = null;
		
		public readonly int? TimeSpent = null;
		
		public readonly int? ScheduledDurationMinutes = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Subject = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? ActualDurationMinutes = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? ActualEnd = null;
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly bool? IsWorkflowCreated = null;
		
		public readonly string Category = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly bool? IsRegularActivity = null;
		
		public readonly EntityReference IncidentId = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly string Description = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly EntityReference ModifiedByExternalParty = null;
		
		public readonly EntityReference CreatedByExternalParty = null;
		
		public readonly EntityReference OwningTeam = null;

        public new static class Options
        {
            public enum StateCode
            {
                Open = 0,
                Completed = 1,
                Canceled = 2
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                ServiceActivity = 4214,
                OpportunityClose = 4208,
                OrderClose = 4209,
                QuoteClose = 4211,
                CaseResolution = 4206,
                Task = 4212,
                CampaignResponse = 4401,
                CampaignActivity = 4402,
                BulkOperation = 4406,
                RecurringAppointment = 4251
            }
            public enum StatusCode
            {
                Open = 1,
                Closed = 2,
                Canceled = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sla")]
	public class SLA : Entity
    {
        public const string EntityLogicalName = "sla";
        public SLA() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("slaid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["slaid"] = value;
            }
        }
		
		public readonly bool? IsManaged = null;
		
		public readonly EntityReference BusinessHoursId = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? SLAIdUnique = null;
		
		public readonly int? PrimaryEntityOTC = null;
		
		public readonly bool? IsDefault = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly Guid? SLAId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference WorkflowId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly OptionSetValue ApplicableFromPickList = null;
		
		public readonly string ChangedAttributeList = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly string ApplicableFrom = null;
		
		public readonly bool? AllowPauseResume = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference OwningTeam = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":1}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly OptionSetValue SLAType = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly string Description = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly OptionSetValue ObjectTypeCode = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum ApplicableFromPickList
            {
                No = 1,
                Yes = 2
            }
            public enum StatusCode
            {
                Draft = 1,
                Active = 2
            }
            public enum StateCode
            {
                Draft = 0,
                Active = 1
            }
            public enum SLAType
            {
                Standard = 0,
                Enhanced = 1
            }
            public enum ObjectTypeCode
            {
                DefaultValue = 0
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("kbarticletemplate")]
	public class KbArticleTemplate : Entity
    {
        public const string EntityLogicalName = "kbarticletemplate";
        public KbArticleTemplate() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("kbarticletemplateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["kbarticletemplateid"] = value;
            }
        }
		
		public readonly OptionSetValue ComponentState = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Title = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly string StructureXml = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly bool? IsActive = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? KbArticleTemplateIdUnique = null;
		
		public readonly int? LanguageCode = null;
		
		public readonly string FormatXml = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string Description = null;
		
		public readonly Guid? KbArticleTemplateId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? OverwriteTime = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("dynamicpropertyinstance")]
	public class DynamicPropertyInstance : Entity
    {
        public const string EntityLogicalName = "dynamicpropertyinstance";
        public DynamicPropertyInstance() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("dynamicpropertyinstanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["dynamicpropertyinstanceid"] = value;
            }
        }
		
		public readonly double? ValueDouble = null;
		
		public readonly int? ValueInteger = null;
		
		public readonly int? DMTImportState = null;
		
		public readonly Guid? DynamicPropertyInstanceid = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly string ValueString = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference DynamicPropertyId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly decimal? ValueDecimal = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly bool? validationstatus = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? VersionNumber = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("quarterlyfiscalcalendar")]
	public class QuarterlyFiscalCalendar : Entity
    {
        public const string EntityLogicalName = "quarterlyfiscalcalendar";
        public QuarterlyFiscalCalendar() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("userfiscalcalendarid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["userfiscalcalendarid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Schema.Column("quarter2")]
		public readonly Money Period4 = null;
		
		public readonly EntityReference CreatedBy = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("quarter4_base")]
		public readonly Money Period10_Base = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference SalesPersonId = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("quarter2_base")]
		public readonly Money Period4_Base = null;
		
		public readonly EntityReference BusinessUnitId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? UserFiscalCalendarId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly DateTime? ModifiedOn = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("quarter3")]
		public readonly Money Period7 = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly int? FiscalPeriodType = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("quarter4")]
		public readonly Money Period10 = null;
		
		public readonly DateTime? EffectiveOn = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("quarter1")]
		public readonly Money Period1 = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("quarter1_base")]
		public readonly Money Period1_Base = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("quarter3_base")]
		public readonly Money Period7_Base = null;
		
		public readonly EntityReference TransactionCurrencyId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sharedobjectsforread")]
	public class SharedObjectsForRead : Entity
    {
        public const string EntityLogicalName = "sharedobjectsforread";
        public SharedObjectsForRead() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sharedobjectsforreadid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sharedobjectsforreadid"] = value;
            }
        }
		
		public readonly int? ObjectTypeCode = null;
		
		public readonly string UserIds = null;
		
		public readonly Guid? ObjectId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? SharedObjectsForReadId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("savedorginsightsconfiguration")]
	public class SavedOrgInsightsConfiguration : Entity
    {
        public const string EntityLogicalName = "savedorginsightsconfiguration";
        public SavedOrgInsightsConfiguration() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("savedorginsightsconfigurationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["savedorginsightsconfigurationid"] = value;
            }
        }
		
		public readonly OptionSetValue PlotOption = null;
		
		public readonly string Name = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly OptionSetValue MetricType = null;
		
		public readonly string Description = null;
		
		public readonly string Parameters = null;
		
		public readonly bool? IsDrilldown = null;
		
		public readonly Guid? SavedOrgInsightsConfigurationId = null;
		
		public readonly DateTime? JsonDataEndTime = null;
		
		public readonly OptionSetValue Lookback = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? JsonDataStartTime = null;
		
		public readonly bool? IsDefault = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string JsonData = null;

        public new static class Options
        {
            public enum PlotOption
            {
                Line = 1,
                Column = 2,
                Area = 3,
                Pie = 4,
                Bar = 5,
                Donut = 6,
                Infocard = 7,
                List = 8,
                DoubleDonut = 9,
                LinearGauge = 10,
                Bubble = 11
            }
            public enum MetricType
            {
                TimeSeries = 1,
                Category = 2
            }
            public enum Lookback
            {
                _2H = 1,
                _48H = 2,
                _7D = 3,
                _30D = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("socialinsightsconfiguration")]
	public class SocialInsightsConfiguration : Entity
    {
        public const string EntityLogicalName = "socialinsightsconfiguration";
        public SocialInsightsConfiguration() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("socialinsightsconfigurationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["socialinsightsconfigurationid"] = value;
            }
        }
		
		public readonly OptionSetValue SocialDataItemType = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string SocialDataItemId = null;
		
		public readonly string ControlId = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string SocialDataParameters = null;
		
		public readonly EntityReference FormId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? SocialInsightsConfigurationId = null;
		
		public readonly EntityReference OrganizationId = null;

        public new static class Options
        {
            public enum SocialDataItemType
            {
                SearchItem = 1,
                Class = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("businessdatalocalizedlabel")]
	public class BusinessDataLocalizedLabel : Entity
    {
        public const string EntityLogicalName = "businessdatalocalizedlabel";
        public BusinessDataLocalizedLabel() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("businessdatalocalizedlabelid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["businessdatalocalizedlabelid"] = value;
            }
        }
		
		public readonly EntityReference ObjectId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string ObjectColumnName = null;
		
		public readonly int? LanguageId = null;
		
		public readonly int? ObjectColumnNumber = null;
		
		public readonly string Label = null;
		
		public readonly Guid? BusinessDataLocalizedLabelId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("duplicaterule")]
	public class DuplicateRule : Entity
    {
        public const string EntityLogicalName = "duplicaterule";
        public DuplicateRule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("duplicateruleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["duplicateruleid"] = value;
            }
        }
		
		public readonly string MatchingEntityMatchCodeTable = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly string MatchingEntityName = null;
		
		public readonly string BaseEntityMatchCodeTable = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":1}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly string BaseEntityName = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly Guid? DuplicateRuleId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly OptionSetValue MatchingEntityTypeCode = null;
		
		public readonly OptionSetValue BaseEntityTypeCode = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly DateTime? ModifiedOn = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly bool? ExcludeInactiveRecords = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly bool? IsCaseSensitive = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Unpublished = 0,
                Publishing = 1,
                Published = 2
            }
            public enum StateCode
            {
                Inactive = 0,
                Active = 1
            }
            public enum MatchingEntityTypeCode
            {
                DefaultValue = 0
            }
            public enum BaseEntityTypeCode
            {
                DefaultValue = 0
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("leadproduct")]
	public class LeadProduct : Entity
    {
        public const string EntityLogicalName = "leadproduct";
        public LeadProduct() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("leadproductid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["leadproductid"] = value;
            }
        }
		
		public readonly Guid? LeadProductId = null;
		
		public readonly Guid? ProductId = null;
		
		public readonly Guid? LeadId = null;
		
		public readonly int? VersionNumber = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sharepointsite")]
	public class SharePointSite : Entity
    {
        public const string EntityLogicalName = "sharepointsite";
        public SharePointSite() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sharepointsiteid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sharepointsiteid"] = value;
            }
        }
		
		public readonly bool? IsGridPresent = null;
		
		public readonly bool? IsDefault = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly OptionSetValue ServiceType = null;
		
		public readonly string FolderStructureEntity = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string Description = null;
		
		public readonly string RelativeUrl = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly DateTime? LastValidated = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string AbsoluteURL = null;
		
		public readonly Guid? SiteCollectionId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly OptionSetValue ValidationStatus = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly OptionSetValue ValidationStatusErrorCode = null;
		
		public readonly DateTime? ModifiedOn = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly bool? IsPowerBISite = null;
		
		public readonly EntityReference ParentSite = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? SharePointSiteId = null;
		
		public readonly Guid? UserId = null;

        public new static class Options
        {
            public enum ServiceType
            {
                SharePoint = 0,
                OneDrive = 1,
                SharedWithMe = 2
            }
            public enum FolderStructureEntity
            {
                None = 0,
                Account = 1,
                Contact = 2
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum ValidationStatus
            {
                NotValidated = 1,
                InProgress = 2,
                Invalid = 3,
                Valid = 4,
                CouldNotValidate = 5
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ValidationStatusErrorCode
            {
                ThisRecordSURLHasNotBeenValidated = 1,
                ThisRecordSURLIsValid = 2,
                ThisRecordSURLIsNotValid = 3,
                TheURLSchemesOfMicrosoftDynamics365AndSharePointAreDifferent = 4,
                TheURLCouldNotBeAccessedBecauseOfInternetExplorerSecuritySettings = 5,
                AuthenticationFailure = 6,
                InvalidCertificates = 7
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("localconfigstore")]
	public class LocalConfigStore : Entity
    {
        public const string EntityLogicalName = "localconfigstore";
        public LocalConfigStore() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("id")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["id"] = value;
            }
        }
		
		public readonly string Value = null;
		
		public readonly string KeyName = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("id")]
		public readonly Guid? Id1 = null;
		
		public readonly string PublicToken = null;
		
		public readonly bool? IsValueSet = null;
		
		public readonly string AssemblyName = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("audit")]
	public class Audit : Entity
    {
        public const string EntityLogicalName = "audit";
        public Audit() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("auditid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["auditid"] = value;
            }
        }
		
		public readonly string UserAdditionalInfo = null;
		
		public readonly string AttributeMask = null;
		
		public readonly Guid? TransactionId = null;
		
		public readonly OptionSetValue Action = null;
		
		public readonly EntityReference CallingUserId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? AuditId = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly EntityReference UserId = null;
		
		public readonly OptionSetValue Operation = null;
		
		public readonly EntityReference ObjectId = null;
		
		public readonly string ChangeData = null;

        public new static class Options
        {
            public enum Action
            {
                Unknown = 0,
                Create = 1,
                Update = 2,
                Delete = 3,
                Activate = 4,
                Deactivate = 5,
                Cascade = 11,
                Merge = 12,
                Assign = 13,
                Share = 14,
                Retrieve = 15,
                Close = 16,
                Cancel = 17,
                Complete = 18,
                Resolve = 20,
                Reopen = 21,
                Fulfill = 22,
                Paid = 23,
                Qualify = 24,
                Disqualify = 25,
                Submit = 26,
                Reject = 27,
                Approve = 28,
                Invoice = 29,
                Hold = 30,
                AddMember = 31,
                RemoveMember = 32,
                AssociateEntities = 33,
                DisassociateEntities = 34,
                AddMembers = 35,
                RemoveMembers = 36,
                AddItem = 37,
                RemoveItem = 38,
                AddSubstitute = 39,
                RemoveSubstitute = 40,
                SetState = 41,
                Renew = 42,
                Revise = 43,
                Win = 44,
                Lose = 45,
                InternalProcessing = 46,
                Reschedule = 47,
                ModifyShare = 48,
                Unshare = 49,
                Book = 50,
                GenerateQuoteFromOpportunity = 51,
                AddToQueue = 52,
                AssignRoleToTeam = 53,
                RemoveRoleFromTeam = 54,
                AssignRoleToUser = 55,
                RemoveRoleFromUser = 56,
                AddPrivilegesToRole = 57,
                RemovePrivilegesFromRole = 58,
                ReplacePrivilegesInRole = 59,
                ImportMappings = 60,
                Clone = 61,
                SendDirectEmail = 62,
                EnabledForOrganization = 63,
                UserAccessViaWeb = 64,
                UserAccessViaWebServices = 65,
                DeleteEntity = 100,
                DeleteAttribute = 101,
                AuditChangeAtEntityLevel = 102,
                AuditChangeAtAttributeLevel = 103,
                AuditChangeAtOrgLevel = 104,
                EntityAuditStarted = 105,
                AttributeAuditStarted = 106,
                AuditEnabled = 107,
                EntityAuditStopped = 108,
                AttributeAuditStopped = 109,
                AuditDisabled = 110,
                AuditLogDeletion = 111,
                UserAccessAuditStarted = 112,
                UserAccessAuditStopped = 113
            }
            public enum Operation
            {
                Create = 1,
                Update = 2,
                Delete = 3,
                Access = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("processstage")]
	public class ProcessStage : Entity
    {
        public const string EntityLogicalName = "processstage";
        public ProcessStage() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("processstageid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["processstageid"] = value;
            }
        }
		
		public readonly EntityReference ProcessId = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly OptionSetValue StageCategory = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string StageName = null;
		
		public readonly string PrimaryEntityTypeCode = null;
		
		public readonly Guid? ProcessStageId = null;
		
		public readonly string ClientData = null;
		
		public readonly Guid? OwningBusinessUnit = null;

        public new static class Options
        {
            public enum StageCategory
            {
                Qualify = 0,
                Develop = 1,
                Propose = 2,
                Close = 3,
                Identify = 4,
                Research = 5,
                Resolve = 6,
                Approval = 7
            }
            public enum PrimaryEntityTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("teamsyncattributemappingprofiles")]
	public class TeamSyncAttributeMappingProfiles : Entity
    {
        public const string EntityLogicalName = "teamsyncattributemappingprofiles";
        public TeamSyncAttributeMappingProfiles() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("teamsyncattributemappingprofileid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["teamsyncattributemappingprofileid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? SyncAttributeMappingProfileId = null;
		
		public readonly Guid? TeamId = null;
		
		public readonly Guid? TeamSyncAttributeMappingProfileId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("semiannualfiscalcalendar")]
	public class SemiAnnualFiscalCalendar : Entity
    {
        public const string EntityLogicalName = "semiannualfiscalcalendar";
        public SemiAnnualFiscalCalendar() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("userfiscalcalendarid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["userfiscalcalendarid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Schema.Column("firsthalf_base")]
		public readonly Money Period1_Base = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference SalesPersonId = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("secondhalf_base")]
		public readonly Money Period7_Base = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("firsthalf")]
		public readonly Money Period1 = null;
		
		public readonly int? FiscalPeriodType = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly DateTime? EffectiveOn = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference BusinessUnitId = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("secondhalf")]
		public readonly Money Period7 = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? UserFiscalCalendarId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("servicecontractcontacts")]
	public class ServiceContractContacts : Entity
    {
        public const string EntityLogicalName = "servicecontractcontacts";
        public ServiceContractContacts() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("servicecontractcontactid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["servicecontractcontactid"] = value;
            }
        }
		
		public readonly Guid? ServiceContractContactId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? ContactId = null;
		
		public readonly int? ServiceLevel = null;
		
		public readonly Guid? ContractId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("queue")]
	public class Queue : Entity
    {
        public const string EntityLogicalName = "queue";
        public Queue() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("queueid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["queueid"] = value;
            }
        }
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference DefaultMailbox = null;
		
		public readonly Guid? QueueId = null;
		
		public readonly OptionSetValue EmailRouterAccessApproval = null;
		
		public readonly OptionSetValue OutgoingEmailDeliveryMethod = null;
		
		public readonly string EmailPassword = null;
		
		public readonly OptionSetValue IncomingEmailFilteringMethod = null;
		
		public readonly int? NumberOfMembers = null;
		
		public readonly OptionSetValue QueueViewType = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly bool? IsFaxQueue = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly bool? AllowEmailCredentials = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference BusinessUnitId = null;
		
		public readonly bool? IsEmailAddressApprovedByO365Admin = null;
		
		public readonly string EmailUsername = null;
		
		public readonly byte[] EntityImage = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly OptionSetValue IncomingEmailDeliveryMethod = null;
		
		public readonly string EMailAddress = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly OptionSetValue QueueTypeCode = null;
		
		public readonly bool? IgnoreUnsolicitedEmail = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference PrimaryUserId = null;
		
		public readonly string Description = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? NumberOfItems = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Inactive = 2,
                Active = 1
            }
            public enum EmailRouterAccessApproval
            {
                Empty = 0,
                Approved = 1,
                PendingApproval = 2,
                Rejected = 3
            }
            public enum OutgoingEmailDeliveryMethod
            {
                None = 0,
                ServerSideSynchronizationOrEmailRouter = 2
            }
            public enum IncomingEmailFilteringMethod
            {
                AllEmailMessages = 0,
                EmailMessagesInResponseToDynamics365Email = 1,
                EmailMessagesFromDynamics365LeadsContactsAndAccounts = 2,
                EmailMessagesFromDynamics365RecordsThatAreEmailEnabled = 3
            }
            public enum QueueViewType
            {
                Public = 0,
                Private = 1
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum IncomingEmailDeliveryMethod
            {
                None = 0,
                ServerSideSynchronizationOrEmailRouter = 2,
                ForwardMailbox = 3
            }
            public enum QueueTypeCode
            {
                DefaultValue = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("discounttype")]
	public class DiscountType : Entity
    {
        public const string EntityLogicalName = "discounttype";
        public DiscountType() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("discounttypeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["discounttypeid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? DiscountTypeId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly bool? IsAmountType = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Active = 100001,
                Inactive = 100002
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("userform")]
	public class UserForm : Entity
    {
        public const string EntityLogicalName = "userform";
        public UserForm() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("userformid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["userformid"] = value;
            }
        }
		
		public readonly EntityReference OwningUser = null;
		
		public readonly string ObjectTypeCode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? UserFormId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly OptionSetValue Type = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string Description = null;
		
		public readonly string FormXml = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly bool? IsTabletEnabled = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference OwningTeam = null;

        public new static class Options
        {
            public enum ObjectTypeCode
            {

            }
            public enum Type
            {
                Dashboard = 0,
                PowerBIDashboard = 103
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("privilege")]
	public class Privilege : Entity
    {
        public const string EntityLogicalName = "privilege";
        public Privilege() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("privilegeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["privilegeid"] = value;
            }
        }
		
		public readonly bool? CanBeLocal = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly bool? CanBeParentEntityReference = null;
		
		public readonly bool? CanBeGlobal = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly bool? CanBeBasic = null;
		
		public readonly Guid? PrivilegeId = null;
		
		public readonly int? AccessRight = null;
		
		public readonly bool? CanBeEntityReference = null;
		
		public readonly bool? IsDisabledWhenIntegrated = null;
		
		public readonly bool? CanBeDeep = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("knowledgesearchmodel")]
	public class KnowledgeSearchModel : Entity
    {
        public const string EntityLogicalName = "knowledgesearchmodel";
        public KnowledgeSearchModel() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("knowledgesearchmodelid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["knowledgesearchmodelid"] = value;
            }
        }
		
		public readonly string Description = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly int? NgramSize = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string Entity = null;
		
		public readonly string FetchXmlList = null;
		
		public readonly Guid? KnowledgeSearchModelId = null;
		
		public readonly string SourceEntity = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly int? MaxKeyWords = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? SupportingSolutionId = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference AzureServiceConnectionId = null;
		
		public readonly Guid? KnowledgeSearchModelIdUnique = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly bool? IsManaged = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum SourceEntity
            {
                Case = 112
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("subscriptionsyncentryoffline")]
	public class SubscriptionSyncEntryOffline : Entity
    {
        public const string EntityLogicalName = "subscriptionsyncentryoffline";
        public SubscriptionSyncEntryOffline() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("subscriptionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["subscriptionid"] = value;
            }
        }
		
		public readonly Guid? ObjectId = null;
		
		public readonly int? ObjectTypeCode = null;
		
		public readonly Guid? SubscriptionId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? SyncState = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_wallsavedquery")]
	public class msdyn_wallsavedquery : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_wallsavedquery";
        public msdyn_wallsavedquery() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_wallsavedqueryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_wallsavedqueryid"] = value;
            }
        }
		
		public readonly string msdyn_savedqueryname = null;
		
		public readonly int? msdyn_isvisiblebit = null;
		
		public readonly string msdyn_entitydisplayname = null;
		
		public readonly Guid? msdyn_wallsavedqueryId = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string msdyn_entityname = null;
		
		public readonly bool? msdyn_IsVisible = null;
		
		public readonly EntityReference msdyn_postconfigurationid = null;
		
		public readonly int? msdyn_otc = null;
		
		public readonly string msdyn_SavedQueryId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly bool? msdyn_IsVirtual = null;

        public new static class Options
        {
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("customcontrol")]
	public class CustomControl : Entity
    {
        public const string EntityLogicalName = "customcontrol";
        public CustomControl() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("customcontrolid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["customcontrolid"] = value;
            }
        }
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string Manifest = null;
		
		public readonly string CompatibleDataTypes = null;
		
		public readonly string Version = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? CustomControlIdUnique = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? CustomControlId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("importdata")]
	public class ImportData : Entity
    {
        public const string EntityLogicalName = "importdata";
        public ImportData() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("importdataid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["importdataid"] = value;
            }
        }
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ImportFileId = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly OptionSetValue ErrorType = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly Guid? ImportDataId = null;
		
		public readonly int? LineNumber = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Data = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly Guid? RecordId = null;
		
		public readonly bool? HasError = null;
		
		public readonly EntityReference OwnerId = null;

        public new static class Options
        {
            public enum ErrorType
            {
                Create = 0,
                Update = 1
            }
            public enum StateCode
            {
                Active = 0
            }
            public enum StatusCode
            {
                Active = 0
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("organizationui")]
	public class OrganizationUI : Entity
    {
        public const string EntityLogicalName = "organizationui";
        public OrganizationUI() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("formid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["formid"] = value;
            }
        }
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly string FormXml = null;
		
		public readonly string PreviewXml = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly string GridIcon = null;
		
		public readonly string ObjectTypeCode = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly string PreviewColumnsetXml = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly string FieldXml = null;
		
		public readonly Guid? FormIdUnique = null;
		
		public readonly Guid? FormId = null;
		
		public readonly string LargeEntityIcon = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly string OutlookShortcutIcon = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly int? Version = null;

        public new static class Options
        {
            public enum ObjectTypeCode
            {

            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("salesorder")]
	public class SalesOrder : Entity
    {
        public const string EntityLogicalName = "salesorder";
        public SalesOrder() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("salesorderid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["salesorderid"] = value;
            }
        }
		
		public readonly OptionSetValue ShipTo_FreightTermsCode = null;
		
		public readonly string BillTo_PostalCode = null;
		
		public readonly string SubmitStatusDescription = null;
		
		public readonly string ShipTo_Country = null;
		
		public readonly OptionSetValue PaymentTermsCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? SubmitDate = null;
		
		public readonly string BillTo_Line2 = null;
		
		public readonly string ShipTo_Name = null;
		
		public readonly Money TotalAmountLessFreight = null;
		
		public readonly Money TotalAmountLessFreight_Base = null;
		
		public readonly string BillTo_StateOrProvince = null;
		
		public readonly bool? WillCall = null;
		
		public readonly string ShipTo_Line2 = null;
		
		public readonly Money TotalAmount = null;
		
		public readonly EntityReference PriceLevelId = null;
		
		public readonly string BillTo_Line3 = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Money TotalDiscountAmount = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly string ShipTo_Composite = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference OpportunityId = null;
		
		public readonly Money DiscountAmount = null;
		
		public readonly string BillTo_Composite = null;
		
		public readonly Guid? BillTo_AddressId = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string BillTo_ContactName = null;
		
		public readonly Money TotalTax_Base = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly Money TotalDiscountAmount_Base = null;
		
		public readonly string BillTo_Line1 = null;
		
		public readonly DateTime? DateFulfilled = null;
		
		public readonly string Description = null;
		
		public readonly string BillTo_City = null;
		
		public readonly OptionSetValue PricingErrorCode = null;
		
		public readonly Money DiscountAmount_Base = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Money TotalTax = null;
		
		public readonly EntityReference AccountId = null;
		
		public readonly string ShipTo_Line1 = null;
		
		public readonly Money TotalLineItemAmount_Base = null;
		
		public readonly Guid? SalesOrderId = null;
		
		public readonly string ShipTo_Line3 = null;
		
		public readonly Money FreightAmount = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly Guid? StageId = null;
		
		public readonly string ShipTo_Telephone = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly Money TotalAmount_Base = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly bool? IsPriceLocked = null;
		
		public readonly EntityReference QuoteId = null;
		
		public readonly EntityReference CustomerId = null;
		
		public readonly OptionSetValue ShippingMethodCode = null;
		
		public readonly string OrderNumber = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly string BillTo_Country = null;
		
		public readonly Money FreightAmount_Base = null;
		
		public readonly string BillTo_Name = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string ShipTo_StateOrProvince = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue FreightTermsCode = null;
		
		public readonly Money TotalLineItemAmount = null;
		
		public readonly string BillTo_Fax = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly string ShipTo_Fax = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly Money TotalLineItemDiscountAmount = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly string ShipTo_City = null;
		
		public readonly string ShipTo_ContactName = null;
		
		public readonly string ShipTo_PostalCode = null;
		
		public readonly EntityReference ContactId = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly Guid? ShipTo_AddressId = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly Money TotalLineItemDiscountAmount_Base = null;
		
		public readonly EntityReference CampaignId = null;
		
		public readonly string BillTo_Telephone = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly decimal? DiscountPercentage = null;
		
		public readonly int? SubmitStatus = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string TraversedPath = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly DateTime? LastBackofficeSubmit = null;
		
		public readonly DateTime? RequestDeliveryBy = null;

        public new static class Options
        {
            public enum ShipTo_FreightTermsCode
            {
                DefaultValue = 1
            }
            public enum PaymentTermsCode
            {
                Net30 = 1,
                _210Net30 = 2,
                Net45 = 3,
                Net60 = 4
            }
            public enum PriorityCode
            {
                DefaultValue = 1
            }
            public enum PricingErrorCode
            {
                None = 0,
                DetailError = 1,
                MissingPriceLevel = 2,
                InactivePriceLevel = 3,
                MissingQuantity = 4,
                MissingUnitPrice = 5,
                MissingProduct = 6,
                InvalidProduct = 7,
                MissingPricingCode = 8,
                InvalidPricingCode = 9,
                MissingUOM = 10,
                ProductNotInPriceLevel = 11,
                MissingPriceLevelAmount = 12,
                MissingPriceLevelPercentage = 13,
                MissingPrice = 14,
                MissingCurrentCost = 15,
                MissingStandardCost = 16,
                InvalidPriceLevelAmount = 17,
                InvalidPriceLevelPercentage = 18,
                InvalidPrice = 19,
                InvalidCurrentCost = 20,
                InvalidStandardCost = 21,
                InvalidRoundingPolicy = 22,
                InvalidRoundingOption = 23,
                InvalidRoundingAmount = 24,
                PriceCalculationError = 25,
                InvalidDiscountType = 26,
                DiscountTypeInvalidState = 27,
                InvalidDiscount = 28,
                InvalidQuantity = 29,
                InvalidPricingPrecision = 30,
                MissingProductDefaultUOM = 31,
                MissingProductUOMSchedule = 32,
                InactiveDiscountType = 33,
                InvalidPriceLevelCurrency = 34,
                PriceAttributeOutOfRange = 35,
                BaseCurrencyAttributeOverflow = 36,
                BaseCurrencyAttributeUnderflow = 37
            }
            public enum StatusCode
            {
                InProgress = 3,
                NoMoney = 4,
                New = 1,
                Pending = 2,
                Complete = 100001,
                Partial = 100002,
                Invoiced = 100003
            }
            public enum ShippingMethodCode
            {
                Airborne = 1,
                DHL = 2,
                FedEx = 3,
                UPS = 4,
                PostalMail = 5,
                FullLoad = 6,
                WillCall = 7
            }
            public enum FreightTermsCode
            {
                FOB = 1,
                NoCharge = 2
            }
            public enum StateCode
            {
                Active = 0,
                Submitted = 1,
                Canceled = 2,
                Fulfilled = 3,
                Invoiced = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("incidentknowledgebaserecord")]
	public class IncidentKnowledgeBaseRecord : Entity
    {
        public const string EntityLogicalName = "incidentknowledgebaserecord";
        public IncidentKnowledgeBaseRecord() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("incidentknowledgebaserecordid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["incidentknowledgebaserecordid"] = value;
            }
        }
		
		public readonly Guid? IncidentId = null;
		
		public readonly Guid? KnowledgeBaseRecordId = null;
		
		public readonly Guid? IncidentKnowledgeBaseRecordId = null;
		
		public readonly int? VersionNumber = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("lookupmapping")]
	public class LookUpMapping : Entity
    {
        public const string EntityLogicalName = "lookupmapping";
        public LookUpMapping() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("lookupmappingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["lookupmappingid"] = value;
            }
        }
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? LookUpMappingId = null;
		
		public readonly OptionSetValue LookUpSourceCode = null;
		
		public readonly string LookUpEntityName = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue ProcessCode = null;
		
		public readonly EntityReference ColumnMappingId = null;
		
		public readonly EntityReference TransformationParameterMappingId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string LookUpAttributeName = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly OptionSetValue StatusCode = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0
            }
            public enum LookUpSourceCode
            {
                Source = 0,
                System = 1
            }
            public enum ProcessCode
            {
                Process = 1,
                Ignore = 2,
                Internal = 3
            }
            public enum StatusCode
            {
                Active = 0
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("ratingmodel")]
	public class RatingModel : Entity
    {
        public const string EntityLogicalName = "ratingmodel";
        public RatingModel() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("ratingmodelid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["ratingmodelid"] = value;
            }
        }
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly Guid? RatingModelId = null;
		
		public readonly int? MinRatingValue = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? MaxRatingValue = null;
		
		public readonly DateTime? CreatedOn = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("competitoraddress")]
	public class CompetitorAddress : Entity
    {
        public const string EntityLogicalName = "competitoraddress";
        public CompetitorAddress() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("competitoraddressid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["competitoraddressid"] = value;
            }
        }
		
		public readonly EntityReference ParentId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string Telephone3 = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Guid? CompetitorAddressId = null;
		
		public readonly string PostalCode = null;
		
		public readonly OptionSetValue AddressTypeCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly string Composite = null;
		
		public readonly string Line3 = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? UTCOffset = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string City = null;
		
		public readonly string County = null;
		
		public readonly double? Latitude = null;
		
		public readonly string Line2 = null;
		
		public readonly string PostOfficeBox = null;
		
		public readonly string StateOrProvince = null;
		
		public readonly double? Longitude = null;
		
		public readonly int? AddressNumber = null;
		
		public readonly string Telephone1 = null;
		
		public readonly string Line1 = null;
		
		public readonly OptionSetValue ShippingMethodCode = null;
		
		public readonly string Country = null;
		
		public readonly string UPSZone = null;
		
		public readonly string Fax = null;
		
		public readonly string Telephone2 = null;
		
		public readonly int? VersionNumber = null;

        public new static class Options
        {
            public enum AddressTypeCode
            {

            }
            public enum ShippingMethodCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("pluginassembly")]
	public class PluginAssembly : Entity
    {
        public const string EntityLogicalName = "pluginassembly";
        public PluginAssembly() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("pluginassemblyid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["pluginassemblyid"] = value;
            }
        }
		
		public readonly string Version = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? PluginAssemblyId = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly OptionSetValue SourceType = null;
		
		public readonly int? CustomizationLevel = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Guid? PluginAssemblyIdUnique = null;
		
		public readonly string Path = null;
		
		public readonly string PublicKeyToken = null;
		
		public readonly int? Minor = null;
		
		public readonly string Culture = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly int? Major = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string Content = null;
		
		public readonly OptionSetValue IsolationMode = null;
		
		public readonly string SourceHash = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly string Description = null;
		
		public readonly bool? IsHidden = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum SourceType
            {
                Database = 0,
                Disk = 1,
                Normal = 2
            }
            public enum IsolationMode
            {
                None = 1,
                Sandbox = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("resourcegroup")]
	public class ResourceGroup : Entity
    {
        public const string EntityLogicalName = "resourcegroup";
        public ResourceGroup() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("resourcegroupid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["resourcegroupid"] = value;
            }
        }
		
		public readonly Guid? ResourceGroupId = null;
		
		public readonly string ObjectTypeCode = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly OptionSetValue GroupTypeCode = null;
		
		public readonly EntityReference BusinessUnitId = null;
		
		public readonly int? VersionNumber = null;

        public new static class Options
        {
            public enum ObjectTypeCode
            {

            }
            public enum GroupTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("entitlementcontacts")]
	public class EntitlementContacts : Entity
    {
        public const string EntityLogicalName = "entitlementcontacts";
        public EntitlementContacts() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("entitlementcontactid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["entitlementcontactid"] = value;
            }
        }
		
		public readonly Guid? EntitlementContactId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? ContactId = null;
		
		public readonly Guid? EntitlementId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("commitment")]
	public class Commitment : Entity
    {
        public const string EntityLogicalName = "commitment";
        public Commitment() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("commitmentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["commitmentid"] = value;
            }
        }
		
		public readonly string ActivityTypeCode = null;
		
		public readonly Guid? ResourceSpecId = null;
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly Guid? CommitmentId = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly double? Effort = null;
		
		public readonly int? ParticipationTypeMask = null;
		
		public readonly Guid? ActivityId = null;
		
		public readonly EntityReference ServiceId = null;
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly Guid? PartyId = null;
		
		public readonly string Subject = null;

        public new static class Options
        {
            public enum StateCode
            {

            }
            public enum StatusCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("asyncoperation")]
	public class AsyncOperation : Entity
    {
        public const string EntityLogicalName = "asyncoperation";
        public AsyncOperation() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("asyncoperationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["asyncoperationid"] = value;
            }
        }
		
		public readonly DateTime? PostponeUntil = null;
		
		public readonly string WorkflowState = null;
		
		public readonly Guid? AsyncOperationId = null;
		
		public readonly int? Subtype = null;
		
		public readonly string Message = null;
		
		public readonly string WorkflowStageName = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly double? ExecutionTimeSpan = null;
		
		public readonly bool? WorkflowIsBlocked = null;
		
		public readonly DateTime? CompletedOn = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly int? RetryCount = null;
		
		public readonly DateTime? RecurrenceStartTime = null;
		
		public readonly string RecurrencePattern = null;
		
		public readonly DateTime? CorrelationUpdatedTime = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly int? Depth = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly string DependencyToken = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference WorkflowActivationId = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly string Data = null;
		
		public readonly bool? IsWaitingForEvent = null;
		
		public readonly int? ErrorCode = null;
		
		public readonly string MessageName = null;
		
		public readonly Guid? RequestId = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly OptionSetValue OperationType = null;
		
		public readonly int? Sequence = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly Guid? CorrelationId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly string HostId = null;
		
		public readonly Guid? ParentPluginExecutionId = null;
		
		public readonly EntityReference OwningExtensionId = null;
		
		public readonly string FriendlyMessage = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly string PrimaryEntityType = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? StartedOn = null;

        public new static class Options
        {
            public enum StatusCode
            {
                WaitingForResources = 0,
                Waiting = 10,
                InProgress = 20,
                Pausing = 21,
                Canceling = 22,
                Succeeded = 30,
                Failed = 31,
                Canceled = 32
            }
            public enum StateCode
            {
                Ready = 0,
                Suspended = 1,
                Locked = 2,
                Completed = 3
            }
            public enum OperationType
            {
                SystemEvent = 1,
                BulkEmail = 2,
                ImportFileParse = 3,
                TransformParseData = 4,
                Import = 5,
                ActivityPropagation = 6,
                DuplicateDetectionRulePublish = 7,
                BulkDuplicateDetection = 8,
                SQMDataCollection = 9,
                Workflow = 10,
                QuickCampaign = 11,
                MatchcodeUpdate = 12,
                BulkDelete = 13,
                DeletionService = 14,
                IndexManagement = 15,
                CollectOrganizationStatistics = 16,
                ImportSubprocess = 17,
                CalculateOrganizationStorageSize = 18,
                CollectOrganizationDatabaseStatistics = 19,
                CollectionOrganizationSizeStatistics = 20,
                DatabaseTuning = 21,
                CalculateOrganizationMaximumStorageSize = 22,
                BulkDeleteSubprocess = 23,
                UpdateStatisticIntervals = 24,
                OrganizationFullTextCatalogIndex = 25,
                DatabaseLogBackup = 26,
                UpdateContractStates = 27,
                DBCCSHRINKDATABASEMaintenanceJob = 28,
                DBCCSHRINKFILEMaintenanceJob = 29,
                ReindexAllIndicesMaintenanceJob = 30,
                StorageLimitNotification = 31,
                CleanupInactiveWorkflowAssemblies = 32,
                RecurringSeriesExpansion = 35,
                ImportSampleData = 38,
                GoalRollUp = 40,
                AuditPartitionCreation = 41,
                CheckForLanguagePackUpdates = 42,
                ProvisionLanguagePack = 43,
                UpdateOrganizationDatabase = 44,
                UpdateSolution = 45,
                RegenerateEntityRowCountSnapshotData = 46,
                RegenerateReadShareSnapshotData = 47,
                OutgoingActivity = 50,
                IncomingEmailProcessing = 51,
                MailboxTestAccess = 52,
                EncryptionHealthCheck = 53,
                ExecuteAsyncRequest = 54,
                PostToYammer = 49,
                UpdateEntitlementStates = 56,
                CalculateRollupField = 57,
                MassCalculateRollupField = 58,
                ImportTranslation = 59,
                ConvertDateAndTimeBehavior = 62,
                EntityKeyIndexCreation = 63,
                UpdateKnowledgeArticleStates = 65,
                ResourceBookingSync = 68,
                RelationshipAssistantCards = 69,
                CleanupSolutionComponents = 71,
                ALMAnomalyDetectionOperation = 73
            }
            public enum PrimaryEntityType
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("opportunitysalesprocess")]
	public class OpportunitySalesProcess : Entity
    {
        public const string EntityLogicalName = "opportunitysalesprocess";
        public OpportunitySalesProcess() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("businessprocessflowinstanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["businessprocessflowinstanceid"] = value;
            }
        }
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference QuoteId = null;
		
		public readonly EntityReference OpportunityId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly Guid? BusinessProcessFlowInstanceId = null;
		
		public readonly EntityReference ProcessId = null;
		
		public readonly int? Duration = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? CompletedOn = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string TraversedPath = null;
		
		public readonly DateTime? ActiveStageStartedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference SalesOrderId = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ActiveStageId = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Active = 1,
                Finished = 2,
                Aborted = 3
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("team")]
	public class Team : Entity
    {
        public const string EntityLogicalName = "team";
        public Team() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("teamid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["teamid"] = value;
            }
        }
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string EMailAddress = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly Guid? TeamId = null;
		
		public readonly string TraversedPath = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string Description = null;
		
		public readonly Guid? StageId = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference BusinessUnitId = null;
		
		public readonly EntityReference AdministratorId = null;
		
		public readonly EntityReference QueueId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly bool? SystemManaged = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly OptionSetValue TeamType = null;
		
		public readonly Guid? OrganizationId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly bool? IsDefault = null;
		
		public readonly EntityReference TeamTemplateId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly string YomiName = null;
		
		public readonly decimal? ExchangeRate = null;

        public new static class Options
        {
            public enum TeamType
            {
                Owner = 0,
                Access = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("territory")]
	public class Territory : Entity
    {
        public const string EntityLogicalName = "territory";
        public Territory() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("territoryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["territoryid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? TerritoryId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference ManagerId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly byte[] EntityImage = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("bookableresourcecharacteristic")]
	public class BookableResourceCharacteristic : Entity
    {
        public const string EntityLogicalName = "bookableresourcecharacteristic";
        public BookableResourceCharacteristic() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("bookableresourcecharacteristicid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["bookableresourcecharacteristicid"] = value;
            }
        }
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference RatingValue = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly string TraversedPath = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference Resource = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly Guid? StageId = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference Characteristic = null;
		
		public readonly Guid? BookableResourceCharacteristicId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("salesprocessinstance")]
	public class SalesProcessInstance : Entity
    {
        public const string EntityLogicalName = "salesprocessinstance";
        public SalesProcessInstance() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("salesprocessinstanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["salesprocessinstanceid"] = value;
            }
        }
		
		public readonly Guid? SalesProcessInstanceId = null;
		
		public readonly EntityReference BusinessUnitId = null;
		
		public readonly EntityReference OpportunityId = null;
		
		public readonly string SalesStageName = null;
		
		public readonly string SalesProcessName = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("recommendationmodel")]
	public class RecommendationModel : Entity
    {
        public const string EntityLogicalName = "recommendationmodel";
        public RecommendationModel() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("recommendationmodelid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["recommendationmodelid"] = value;
            }
        }
		
		public readonly string AzureModelId = null;
		
		public readonly int? MaxRecommendations = null;
		
		public readonly OptionSetValue CatalogLastSynchronizationStatus = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly string ProductCatalogName = null;
		
		public readonly decimal? ProductCatalogAccessoryLinkRating = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly OptionSetValue BasketDataLastSynchronizationStatus = null;
		
		public readonly EntityReference OrganizationId = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly DateTime? ValidUntil = null;
		
		public readonly DateTime? BasketDataLastSynchronizedOn = null;
		
		public readonly Guid? RecommendationModelId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? CatalogLastSynchronizedOn = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly EntityReference RecommendationModelVersionId = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly EntityReference AzureServiceConnectionId = null;
		
		public readonly int? MaximumVersions = null;
		
		public readonly string Description = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly decimal? MinRecommendationRating = null;
		
		public readonly int? RecommendationModelVersionCount = null;
		
		public readonly Guid? RecommendationModelIdUnique = null;
		
		public readonly decimal? ProductCatalogCrosssellLinkRating = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ModifiedBy = null;

        public new static class Options
        {
            public enum CatalogLastSynchronizationStatus
            {
                Failure = 1,
                Success = 2
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum BasketDataLastSynchronizationStatus
            {
                Failure = 1,
                Success = 2
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("integrationstatus")]
	public class IntegrationStatus : Entity
    {
        public const string EntityLogicalName = "integrationstatus";
        public IntegrationStatus() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("integrationentryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["integrationentryid"] = value;
            }
        }
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string ObjectTypeCode = null;
		
		public readonly string StatusDescription = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string SystemName = null;
		
		public readonly Guid? OrganizationId = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly Guid? IntegrationEntryId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string StateDescription = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly Guid? ObjectId = null;
		
		public readonly int? VersionNumber = null;

        public new static class Options
        {
            public enum ObjectTypeCode
            {

            }
            public enum StatusCode
            {

            }
            public enum StateCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("opportunityclose")]
	public class OpportunityClose : Entity
    {
        public const string EntityLogicalName = "opportunityclose";
        public OpportunityClose() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activityid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activityid"] = value;
            }
        }
		
		public readonly string Description = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ServiceId = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly Money ActualRevenue = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedByExternalParty = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly bool? IsRegularActivity = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference OpportunityId = null;
		
		public readonly bool? IsBilled = null;
		
		public readonly int? ActualDurationMinutes = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly Guid? ActivityId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly bool? IsWorkflowCreated = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Subject = null;
		
		public readonly int? ScheduledDurationMinutes = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly DateTime? ActualEnd = null;
		
		public readonly EntityReference CompetitorId = null;
		
		public readonly Money ActualRevenue_Base = null;
		
		public readonly string Category = null;
		
		public readonly string ActivityTypeCode = null;
		
		public readonly DateTime? ActualStart = null;
		
		public readonly string Subcategory = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference CreatedByExternalParty = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Open = 1,
                Completed = 2,
                Canceled = 3
            }
            public enum ActivityTypeCode
            {
                Fax = 4204,
                PhoneCall = 4210,
                Email = 4202,
                Letter = 4207,
                Appointment = 4201,
                ServiceActivity = 4214,
                OpportunityClose = 4208,
                OrderClose = 4209,
                QuoteClose = 4211,
                CaseResolution = 4206,
                Task = 4212,
                CampaignResponse = 4401,
                CampaignActivity = 4402,
                BulkOperation = 4406,
                RecurringAppointment = 4251
            }
            public enum StateCode
            {
                Open = 0,
                Completed = 1,
                Canceled = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("kbarticlecomment")]
	public class KbArticleComment : Entity
    {
        public const string EntityLogicalName = "kbarticlecomment";
        public KbArticleComment() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("kbarticlecommentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["kbarticlecommentid"] = value;
            }
        }
		
		public readonly EntityReference KbArticleId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly Guid? KbArticleCommentId = null;
		
		public readonly Guid? OrganizationId = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Title = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string CommentText = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sdkmessageresponsefield")]
	public class SdkMessageResponseField : Entity
    {
        public const string EntityLogicalName = "sdkmessageresponsefield";
        public SdkMessageResponseField() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sdkmessageresponsefieldid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sdkmessageresponsefieldid"] = value;
            }
        }
		
		public readonly int? Position = null;
		
		public readonly int? CustomizationLevel = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string Value = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string Name = null;
		
		public readonly string PublicName = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? SdkMessageResponseFieldId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string ParameterBindingInformation = null;
		
		public readonly Guid? SdkMessageResponseFieldIdUnique = null;
		
		public readonly string Formatter = null;
		
		public readonly string ClrFormatter = null;
		
		public readonly EntityReference SdkMessageResponseId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("fieldsecurityprofile")]
	public class FieldSecurityProfile : Entity
    {
        public const string EntityLogicalName = "fieldsecurityprofile";
        public FieldSecurityProfile() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("fieldsecurityprofileid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["fieldsecurityprofileid"] = value;
            }
        }
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly int? VersionNumber = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Guid? FieldSecurityProfileIdUnique = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? FieldSecurityProfileId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string Description = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("savedquery")]
	public class SavedQuery : Entity
    {
        public const string EntityLogicalName = "savedquery";
        public SavedQuery() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("savedqueryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["savedqueryid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly bool? IsPrivate = null;
		
		public readonly bool? IsQuickFindQuery = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly bool? IsDefault = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly bool? IsUserDefined = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? OrganizationTabOrder = null;
		
		public readonly string AdvancedGroupBy = null;
		
		public readonly string ColumnSetXml = null;
		
		public readonly string LayoutXml = null;
		
		public readonly int? QueryType = null;
		
		public readonly string ReturnedTypeCode = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly string ConditionalFormatting = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly int? QueryAppUsage = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? SavedQueryId = null;
		
		public readonly string QueryAPI = null;
		
		public readonly string FetchXml = null;
		
		public readonly bool? IsCustom = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SavedQueryIdUnique = null;
		
		public readonly bool? CanBeDeleted = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("entitlementproducts")]
	public class EntitlementProducts : Entity
    {
        public const string EntityLogicalName = "entitlementproducts";
        public EntitlementProducts() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("entitlementproductid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["entitlementproductid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? EntitlementId = null;
		
		public readonly Guid? ProductId = null;
		
		public readonly Guid? EntitlementProductId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("privilegeobjecttypecodes")]
	public class PrivilegeObjectTypeCodes : Entity
    {
        public const string EntityLogicalName = "privilegeobjecttypecodes";
        public PrivilegeObjectTypeCodes() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("privilegeobjecttypecodeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["privilegeobjecttypecodeid"] = value;
            }
        }
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? PrivilegeObjectTypeCodeId = null;
		
		public readonly string ObjectTypeCode = null;
		
		public readonly EntityReference PrivilegeId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("msdyn_postconfig")]
	public class msdyn_PostConfig : OrganizationEntity
    {
        public const string EntityLogicalName = "msdyn_postconfig";
        public msdyn_PostConfig() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("msdyn_postconfigid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["msdyn_postconfigid"] = value;
            }
        }
		
		public readonly string msdyn_Status = null;
		
		public readonly int? msdyn_Otc = null;
		
		public readonly string msdyn_FollowingViewId2 = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly bool? msdyn_ConfigureWall = null;
		
		public readonly string msdyn_FollowingViewId = null;
		
		public readonly string msdyn_EntityName = null;
		
		public readonly Guid? msdyn_PostConfigId = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string msdyn_EntityDisplayName = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("displaystringmap")]
	public class DisplayStringMap : Entity
    {
        public const string EntityLogicalName = "displaystringmap";
        public DisplayStringMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("displaystringmapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["displaystringmapid"] = value;
            }
        }
		
		public readonly Guid? DisplayStringMapId = null;
		
		public readonly string ObjectTypeCode = null;
		
		public readonly Guid? DisplayStringId = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly Guid? DisplayStringMapIdUnique = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("queueitemcount")]
	public class QueueItemCount : Entity
    {
        public const string EntityLogicalName = "queueitemcount";
        public QueueItemCount() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("queueitemcountid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["queueitemcountid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.Schema.Column("queueitemcount")]
		public readonly string QueueItemCount1 = null;
		
		public readonly Guid? QueueId = null;
		
		public readonly Guid? QueueItemCountId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("mobileofflineprofileitem")]
	public class MobileOfflineProfileItem : Entity
    {
        public const string EntityLogicalName = "mobileofflineprofileitem";
        public MobileOfflineProfileItem() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("mobileofflineprofileitemid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["mobileofflineprofileitemid"] = value;
            }
        }
		
		public readonly string IntroducedVersion = null;
		
		public readonly bool? CanBeFollowed = null;
		
		public readonly string ProfileItemEntityFilter = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly bool? IsVisibleInGrid = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly DateTime? PublishedOn = null;
		
		public readonly bool? RecordsOwnedByMyTeam = null;
		
		public readonly bool? GetRelatedEntityRecords = null;
		
		public readonly bool? RecordsOwnedByMe = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly string TraversedPath = null;
		
		public readonly int? EntityObjectTypeCode = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string SelectedEntityTypeCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly bool? RecordsOwnedByMyBusinessUnit = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly Guid? StageId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Guid? MobileOfflineProfileItemId = null;
		
		public readonly bool? IsValidated = null;
		
		public readonly EntityReference ProfileItemRule = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly string ViewQuery = null;
		
		public readonly string SelectedEntityMetadata = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly string RelationshipData = null;
		
		public readonly OptionSetValue RecordDistributionCriteria = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? MobileOfflineProfileItemIdUnique = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum SelectedEntityTypeCode
            {
                Account = 1,
                Contact = 2,
                Opportunity = 3,
                Lead = 4,
                Note = 5,
                User = 8,
                Team = 9,
                Case = 112,
                Competitor = 123,
                Attachment = 1001,
                CompetitorAddress = 1004,
                Product = 1024,
                OpportunityProduct = 1083,
                Queue = 2020,
                QueueItem = 2029,
                Appointment = 4201,
                Email = 4202,
                Task = 4212,
                Entitlement = 9700,
                SLAKPIInstance = 9752
            }
            public enum RecordDistributionCriteria
            {
                DownloadRelatedDataOnly = 0,
                AllRecords = 1,
                OtherDataFilter = 2,
                CustomDataFilter = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("appmodulecomponent")]
	public class AppModuleComponent : Entity
    {
        public const string EntityLogicalName = "appmodulecomponent";
        public AppModuleComponent() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("appmodulecomponentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["appmodulecomponentid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly bool? IsDefault = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly OptionSetValue RootComponentBehavior = null;
		
		public readonly Guid? AppModuleComponentId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? AppModuleComponentIdUnique = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly OptionSetValue ComponentType = null;
		
		public readonly Guid? ObjectId = null;
		
		public readonly EntityReference AppModuleIdUnique = null;
		
		public readonly Guid? RootAppModuleComponentId = null;
		
		public readonly bool? IsMetadata = null;
		
		public readonly string IntroducedVersion = null;

        public new static class Options
        {
            public enum RootComponentBehavior
            {
                IncludeSubcomponents = 0,
                DoNotIncludeSubcomponents = 1,
                IncludeAsShellOnly = 2
            }
            public enum ComponentType
            {
                Entities = 1,
                Views = 26,
                BusinessProcessFlows = 29,
                CommandRibbonForFormsGridsSubGrids = 48,
                Charts = 59,
                Forms = 60,
                Sitemap = 62
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sharepointdocumentlocation")]
	public class SharePointDocumentLocation : Entity
    {
        public const string EntityLogicalName = "sharepointdocumentlocation";
        public SharePointDocumentLocation() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sharepointdocumentlocationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sharepointdocumentlocationid"] = value;
            }
        }
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly OptionSetValue ServiceType = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference ParentSiteOrLocation = null;
		
		public readonly string Description = null;
		
		public readonly OptionSetValue LocationType = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly Guid? SharePointDocumentLocationId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly string RelativeUrl = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? UserId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly Guid? SiteCollectionId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string AbsoluteURL = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly DateTime? ModifiedOn = null;

        public new static class Options
        {
            public enum ServiceType
            {
                SharePoint = 0,
                OneDrive = 1,
                SharedWithMe = 2
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum LocationType
            {
                General = 0,
                DedicatedForOneNoteIntegration = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("import")]
	public class Import : Entity
    {
        public const string EntityLogicalName = "import";
        public Import() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("importid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["importid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly int? Sequence = null;
		
		public readonly bool? IsImport = null;
		
		public readonly Guid? ImportId = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly string EMailAddress = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly OptionSetValue ModeCode = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly bool? SendNotification = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedBy = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0
            }
            public enum StatusCode
            {
                Submitted = 0,
                Parsing = 1,
                Transforming = 2,
                Importing = 3,
                Completed = 4,
                Failed = 5
            }
            public enum ModeCode
            {
                Create = 0,
                Update = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("competitorproduct")]
	public class CompetitorProduct : Entity
    {
        public const string EntityLogicalName = "competitorproduct";
        public CompetitorProduct() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("competitorproductid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["competitorproductid"] = value;
            }
        }
		
		public readonly Guid? CompetitorId = null;
		
		public readonly Guid? CompetitorProductId = null;
		
		public readonly Guid? ProductId = null;
		
		public readonly int? VersionNumber = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("leadaddress")]
	public class LeadAddress : Entity
    {
        public const string EntityLogicalName = "leadaddress";
        public LeadAddress() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("leadaddressid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["leadaddressid"] = value;
            }
        }
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue ShippingMethodCode = null;
		
		public readonly Guid? LeadAddressId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string Composite = null;
		
		public readonly double? Longitude = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string County = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly string Fax = null;
		
		public readonly string PostOfficeBox = null;
		
		public readonly OptionSetValue AddressTypeCode = null;
		
		public readonly string Line2 = null;
		
		public readonly string PostalCode = null;
		
		public readonly string StateOrProvince = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ParentId = null;
		
		public readonly string Country = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string Telephone3 = null;
		
		public readonly string Line3 = null;
		
		public readonly string Line1 = null;
		
		public readonly string Name = null;
		
		public readonly Guid? OwningBusinessUnit = null;
		
		public readonly Guid? OwnerId = null;
		
		public readonly int? AddressNumber = null;
		
		public readonly int? UTCOffset = null;
		
		public readonly string Telephone2 = null;
		
		public readonly string Telephone1 = null;
		
		public readonly string UPSZone = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string City = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly double? Latitude = null;

        public new static class Options
        {
            public enum ShippingMethodCode
            {

            }
            public enum AddressTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("incident")]
	public class Incident : Entity
    {
        public const string EntityLogicalName = "incident";
        public Incident() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("incidentid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["incidentid"] = value;
            }
        }
		
		public readonly OptionSetValue FirstResponseSLAStatus = null;
		
		public readonly EntityReference SLAInvokedId = null;
		
		public readonly OptionSetValue ResolveBySLAStatus = null;
		
		public readonly EntityReference ContactId = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference MasterId = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference CustomerId = null;
		
		public readonly OptionSetValue PriorityCode = null;
		
		public readonly EntityReference ParentCaseId = null;
		
		public readonly double? SentimentValue = null;
		
		public readonly string TicketNumber = null;
		
		public readonly bool? FirstResponseSent = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference FirstResponseByKPIId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly DateTime? LastOnHoldTime = null;
		
		public readonly EntityReference AccountId = null;
		
		public readonly EntityReference SubjectId = null;
		
		public readonly DateTime? ResolveBy = null;
		
		public readonly Guid? StageId = null;
		
		public readonly DateTime? FollowupBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference ResolveByKPIId = null;
		
		public readonly bool? IsDecrementing = null;
		
		public readonly OptionSetValue CaseOriginCode = null;
		
		public readonly EntityReference ModifiedByExternalParty = null;
		
		public readonly int? NumberOfChildIncidents = null;
		
		public readonly string TraversedPath = null;
		
		public readonly bool? RouteCase = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference ContractDetailId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly OptionSetValue IncidentStageCode = null;
		
		public readonly EntityReference ContractId = null;
		
		public readonly double? InfluenceScore = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly EntityReference ProductId = null;
		
		public readonly EntityReference SocialProfileId = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly OptionSetValue SeverityCode = null;
		
		public readonly EntityReference ExistingCase = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly OptionSetValue CaseTypeCode = null;
		
		public readonly EntityReference PrimaryContactId = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference KbArticleId = null;
		
		public readonly int? OnHoldTime = null;
		
		public readonly bool? CustomerContacted = null;
		
		public readonly OptionSetValue CustomerSatisfactionCode = null;
		
		public readonly OptionSetValue MessageTypeCode = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Title = null;
		
		public readonly OptionSetValue ServiceStage = null;
		
		public readonly int? BilledServiceUnits = null;
		
		public readonly bool? Merged = null;
		
		public readonly DateTime? EscalatedOn = null;
		
		public readonly EntityReference EntitlementId = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly bool? FollowUpTaskCreated = null;
		
		public readonly bool? IsEscalated = null;
		
		public readonly EntityReference ResponsibleContactId = null;
		
		public readonly string ProductSerialNumber = null;
		
		public readonly int? ActualServiceUnits = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly EntityReference CreatedByExternalParty = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? IncidentId = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly bool? DecrementEntitlementTerm = null;
		
		public readonly bool? CheckEmail = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly bool? ActivitiesComplete = null;
		
		public readonly OptionSetValue ContractServiceLevelCode = null;
		
		public readonly bool? BlockedProfile = null;
		
		public readonly DateTime? ResponseBy = null;

        public new static class Options
        {
            public enum FirstResponseSLAStatus
            {
                InProgress = 1,
                NearingNoncompliance = 2,
                Succeeded = 3,
                Noncompliant = 4
            }
            public enum ResolveBySLAStatus
            {
                InProgress = 1,
                NearingNoncompliance = 2,
                Succeeded = 3,
                Noncompliant = 4
            }
            public enum PriorityCode
            {
                High = 1,
                Normal = 2,
                Low = 3
            }
            public enum CaseOriginCode
            {
                Phone = 1,
                Email = 2,
                Web = 3,
                Facebook = 2483,
                Twitter = 3986
            }
            public enum IncidentStageCode
            {
                DefaultValue = 1
            }
            public enum StateCode
            {
                Active = 0,
                Resolved = 1,
                Canceled = 2
            }
            public enum SeverityCode
            {
                DefaultValue = 1
            }
            public enum CaseTypeCode
            {
                Question = 1,
                Problem = 2,
                Request = 3
            }
            public enum StatusCode
            {
                ProblemSolved = 5,
                InformationProvided = 1000,
                Canceled = 6,
                Merged = 2000,
                InProgress = 1,
                OnHold = 2,
                WaitingForDetails = 3,
                Researching = 4
            }
            public enum CustomerSatisfactionCode
            {
                VerySatisfied = 5,
                Satisfied = 4,
                Neutral = 3,
                Dissatisfied = 2,
                VeryDissatisfied = 1
            }
            public enum MessageTypeCode
            {
                PublicMessage = 0,
                PrivateMessage = 1
            }
            public enum ServiceStage
            {
                Identify = 0,
                Research = 1,
                Resolve = 2
            }
            public enum ContractServiceLevelCode
            {
                Gold = 1,
                Silver = 2,
                Bronze = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("actioncardusersettings")]
	public class ActionCardUserSettings : Entity
    {
        public const string EntityLogicalName = "actioncardusersettings";
        public ActionCardUserSettings() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("actioncardusersettingsid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["actioncardusersettingsid"] = value;
            }
        }
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? IntCardOption = null;
		
		public readonly bool? BoolCardOption = null;
		
		public readonly Guid? ActionCardUserSettingsId = null;
		
		public readonly string StringCardOption = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference CardTypeId = null;
		
		public readonly bool? IsEnabled = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly int? CardType = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("emailhash")]
	public class EmailHash : Entity
    {
        public const string EntityLogicalName = "emailhash";
        public EmailHash() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("emailhashid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["emailhashid"] = value;
            }
        }
		
		public readonly EntityReference OwnerId = null;
		
		public readonly int? HashType = null;
		
		public readonly Guid? OwningUser = null;
		
		public readonly Guid? OwningBusinessUnit = null;
		
		public readonly Guid? EmailHashId = null;
		
		public readonly EntityReference ActivityId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? Hash = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("ins_salesorder")]
	public class ins_salesorder : UserOrTeamEntity
    {
        public const string EntityLogicalName = "ins_salesorder";
        public ins_salesorder() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("ins_salesorderid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["ins_salesorderid"] = value;
            }
        }
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly Guid? ins_salesorderId = null;
		
		public readonly Money ins_totalprice_Base = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string ins_salesordernumber = null;
		
		public readonly Money ins_totalprice = null;
		
		public readonly DateTime? ins_transactiondate = null;

        public new static class Options
        {
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("ins_salesorderline")]
	public class ins_salesorderline : UserOrTeamEntity
    {
        public const string EntityLogicalName = "ins_salesorderline";
        public ins_salesorderline() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("ins_salesorderlineid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["ins_salesorderlineid"] = value;
            }
        }
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference ins_productid = null;
		
		public readonly Money ins_totalprice_Base = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly Guid? ins_salesorderlineId = null;

        public readonly EntityReference ins_salesorderid = null;
		
		public readonly Money ins_priceamount_Base = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string ins_linenumber = null;
		
		public readonly int? ins_qty = null;
		
		public readonly Money ins_priceamount = null;
		
		public readonly Money ins_totalprice = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Inactive = 1
            }
            public enum statuscode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("opportunitycompetitors")]
	public class OpportunityCompetitors : Entity
    {
        public const string EntityLogicalName = "opportunitycompetitors";
        public OpportunityCompetitors() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("opportunitycompetitorid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["opportunitycompetitorid"] = value;
            }
        }
		
		public readonly Guid? OpportunityCompetitorId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? CompetitorId = null;
		
		public readonly Guid? OpportunityId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("personaldocumenttemplate")]
	public class PersonalDocumentTemplate : Entity
    {
        public const string EntityLogicalName = "personaldocumenttemplate";
        public PersonalDocumentTemplate() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("personaldocumenttemplateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["personaldocumenttemplateid"] = value;
            }
        }
		
		public readonly string AssociatedEntityTypeCode = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly OptionSetValue DocumentType = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference CreatedBy = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly Guid? PersonalDocumentTemplateId = null;
		
		public readonly bool? Status = null;
		
		public readonly string Content = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly int? LanguageCode = null;
		
		public readonly string ClientData = null;
		
		public readonly string Description = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly int? VersionNumber = null;

        public new static class Options
        {
            public enum AssociatedEntityTypeCode
            {

            }
            public enum DocumentType
            {
                MicrosoftExcel = 1,
                MicrosoftWord = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("leadtoopportunitysalesprocess")]
	public class LeadToOpportunitySalesProcess : Entity
    {
        public const string EntityLogicalName = "leadtoopportunitysalesprocess";
        public LeadToOpportunitySalesProcess() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("businessprocessflowinstanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["businessprocessflowinstanceid"] = value;
            }
        }
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly DateTime? CompletedOn = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly Guid? BusinessProcessFlowInstanceId = null;
		
		public readonly EntityReference LeadId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? ActiveStageStartedOn = null;
		
		public readonly int? Duration = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ActiveStageId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference OpportunityId = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ProcessId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string TraversedPath = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Active = 1,
                Finished = 2,
                Aborted = 3
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("fixedmonthlyfiscalcalendar")]
	public class FixedMonthlyFiscalCalendar : Entity
    {
        public const string EntityLogicalName = "fixedmonthlyfiscalcalendar";
        public FixedMonthlyFiscalCalendar() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("userfiscalcalendarid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["userfiscalcalendarid"] = value;
            }
        }
		
		public readonly Money Period1 = null;
		
		public readonly Money Period10 = null;
		
		public readonly Money Period13_Base = null;
		
		public readonly Money Period3_Base = null;
		
		public readonly Money Period6_Base = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly Money Period12_Base = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Money Period3 = null;
		
		public readonly Money Period2 = null;
		
		public readonly int? FiscalPeriodType = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Money Period5 = null;
		
		public readonly Money Period1_Base = null;
		
		public readonly Money Period9 = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Money Period9_Base = null;
		
		public readonly Money Period5_Base = null;
		
		public readonly Money Period7_Base = null;
		
		public readonly Money Period11_Base = null;
		
		public readonly DateTime? EffectiveOn = null;
		
		public readonly Money Period13 = null;
		
		public readonly Guid? UserFiscalCalendarId = null;
		
		public readonly Money Period2_Base = null;
		
		public readonly Money Period12 = null;
		
		public readonly Money Period11 = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly Money Period4 = null;
		
		public readonly Money Period6 = null;
		
		public readonly Money Period4_Base = null;
		
		public readonly Money Period8_Base = null;
		
		public readonly Money Period8 = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference BusinessUnitId = null;
		
		public readonly EntityReference SalesPersonId = null;
		
		public readonly Money Period7 = null;
		
		public readonly Money Period10_Base = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("displaystring")]
	public class DisplayString : Entity
    {
        public const string EntityLogicalName = "displaystring";
        public DisplayString() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("displaystringid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["displaystringid"] = value;
            }
        }
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly string CustomComment = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? LanguageCode = null;
		
		public readonly Guid? DisplayStringId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? FormatParameters = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly string PublishedDisplayString = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly string DisplayStringKey = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly Guid? DisplayStringIdUnique = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string CustomDisplayString = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("activityparty")]
	public class ActivityParty : Entity
    {
        public const string EntityLogicalName = "activityparty";
        public ActivityParty() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("activitypartyid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["activitypartyid"] = value;
            }
        }
		
		public readonly EntityReference OwnerId = null;
		
		public readonly Guid? ActivityPartyId = null;
		
		public readonly bool? DoNotPostalMail = null;
		
		public readonly DateTime? ScheduledEnd = null;
		
		public readonly bool? DoNotEmail = null;
		
		public readonly string AddressUsed = null;
		
		public readonly bool? IsPartyDeleted = null;
		
		public readonly bool? DoNotPhone = null;
		
		public readonly EntityReference PartyId = null;
		
		public readonly Guid? OwningUser = null;
		
		public readonly string ExchangeEntryId = null;
		
		public readonly bool? DoNotFax = null;
		
		public readonly int? AddressUsedEmailColumnNumber = null;
		
		public readonly EntityReference ActivityId = null;
		
		public readonly OptionSetValue InstanceTypeCode = null;
		
		public readonly DateTime? ScheduledStart = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? OwningBusinessUnit = null;
		
		public readonly double? Effort = null;
		
		public readonly EntityReference ResourceSpecId = null;
		
		public readonly OptionSetValue ParticipationTypeMask = null;

        public new static class Options
        {
            public enum InstanceTypeCode
            {
                NotRecurring = 0,
                RecurringMaster = 1,
                RecurringInstance = 2,
                RecurringException = 3,
                RecurringFutureException = 4
            }
            public enum ParticipationTypeMask
            {
                Sender = 1,
                ToRecipient = 2,
                CCRecipient = 3,
                BCCRecipient = 4,
                RequiredAttendee = 5,
                OptionalAttendee = 6,
                Organizer = 7,
                Regarding = 8,
                Owner = 9,
                Resource = 10,
                Customer = 11
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("roleprivileges")]
	public class RolePrivileges : Entity
    {
        public const string EntityLogicalName = "roleprivileges";
        public RolePrivileges() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("roleprivilegeid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["roleprivilegeid"] = value;
            }
        }
		
		public readonly Guid? RolePrivilegeId = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly int? PrivilegeDepthMask = null;
		
		public readonly Guid? RolePrivilegeIdUnique = null;
		
		public readonly Guid? PrivilegeId = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? RoleId = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly int? VersionNumber = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("organizationstatistic")]
	public class OrganizationStatistic : Entity
    {
        public const string EntityLogicalName = "organizationstatistic";
        public OrganizationStatistic() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("organizationstatisticid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["organizationstatisticid"] = value;
            }
        }
		
		public readonly int? Hour = null;
		
		public readonly string ServerName = null;
		
		public readonly int? StatisticType = null;
		
		public readonly int? StatisticValue = null;
		
		public readonly Guid? OrganizationStatisticId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("advancedsimilarityrule")]
	public class AdvancedSimilarityRule : Entity
    {
        public const string EntityLogicalName = "advancedsimilarityrule";
        public AdvancedSimilarityRule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("advancedsimilarityruleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["advancedsimilarityruleid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string name = null;
		
		public readonly DateTime? CreatedOn = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly int? NgramSize = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly Guid? AdvancedSimilarityRuleIdUnique = null;
		
		public readonly string SourceEntity = null;
		
		public readonly string Description = null;
		
		public readonly string FilterResultByStatus = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly bool? IsAzureMLRequired = null;
		
		public readonly string ExactMatchList = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string FilterResultByStatusDisplayName = null;
		
		public readonly EntityReference AzureServiceConnectionId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? MaxNumberKeyphrases = null;
		
		public readonly string Entity = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? AdvancedSimilarityRuleId = null;
		
		public readonly string FetchXmlList = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly OptionSetValue ComponentState = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum SourceEntity
            {
                Case = 112
            }
            public enum FilterResultByStatus
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("mobileofflineprofile")]
	public class MobileOfflineProfile : Entity
    {
        public const string EntityLogicalName = "mobileofflineprofile";
        public MobileOfflineProfile() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("mobileofflineprofileid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["mobileofflineprofileid"] = value;
            }
        }
		
		public readonly Guid? StageId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string Description = null;
		
		public readonly string SelectedEntityMetadata = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly bool? IsValidated = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? MobileOfflineProfileIdUnique = null;
		
		public readonly DateTime? ModifiedOn = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly string TraversedPath = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? MobileOfflineProfileId = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly DateTime? PublishedOn = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("bookableresourcegroup")]
	public class BookableResourceGroup : Entity
    {
        public const string EntityLogicalName = "bookableresourcegroup";
        public BookableResourceGroup() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("bookableresourcegroupid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["bookableresourcegroupid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly EntityReference ParentResource = null;
		
		public readonly DateTime? ToDate = null;
		
		public readonly DateTime? FromDate = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly Guid? BookableResourceGroupId = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference ChildResource = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("dynamicproperty")]
	public class DynamicProperty : Entity
    {
        public const string EntityLogicalName = "dynamicproperty";
        public DynamicProperty() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("dynamicpropertyid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["dynamicpropertyid"] = value;
            }
        }
		
		public readonly double? DefaultValueDouble = null;
		
		public readonly int? Precision = null;
		
		public readonly int? MaxLengthString = null;
		
		public readonly double? MinValueDouble = null;
		
		public readonly EntityReference OrganizationId = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue statecode = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly OptionSetValue DataType = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly decimal? MinValueDecimal = null;
		
		public readonly decimal? MaxValueDecimal = null;
		
		public readonly Guid? DynamicPropertyId = null;
		
		public readonly Guid? RootDynamicPropertyId = null;
		
		public readonly decimal? DefaultValueDecimal = null;
		
		public readonly int? DMTImportState = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly int? MaxValueInteger = null;
		
		public readonly string Description = null;
		
		public readonly int? DefaultValueInteger = null;
		
		public readonly string DefaultValueString = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly bool? IsRequired = null;
		
		public readonly int? MinValueInteger = null;
		
		public readonly OptionSetValue statuscode = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference BaseDynamicPropertyId = null;
		
		public readonly Guid? OverwrittenDynamicPropertyId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference ModifiedBy = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly bool? IsReadOnly = null;
		
		public readonly double? MaxValueDouble = null;
		
		public readonly EntityReference DefaultValueOptionSet = null;
		
		public readonly bool? IsHidden = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;

        public new static class Options
        {
            public enum statecode
            {
                Active = 0,
                Draft = 1,
                Retired = 2
            }
            public enum DataType
            {
                OptionSet = 0,
                Decimal = 1,
                FloatingPointNumber = 2,
                SingleLineOfText = 3,
                WholeNumber = 4
            }
            public enum statuscode
            {
                Active = 1,
                Draft = 0,
                Retired = 2
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("post")]
	public class Post : Entity
    {
        public const string EntityLogicalName = "post";
        public Post() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("postid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["postid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Text = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference PostRegardingId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly OptionSetValue Source = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly int? YammerPostState = null;
		
		public readonly Guid? PostId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly OptionSetValue Type = null;
		
		public readonly bool? PostToYammer = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference RegardingObjectOwnerId = null;
		
		public readonly EntityReference RegardingObjectOwningBusinessUnit = null;
		
		public readonly int? YammerRetryCount = null;

        public new static class Options
        {
            public enum Source
            {
                AutoPost = 1,
                ManualPost = 2,
                ActionHubPost = 3
            }
            public enum Type
            {
                CheckIn = 1,
                Idea = 2,
                News = 3,
                PrivateMessage = 4,
                Question = 5,
                RePost = 6,
                Status = 7
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("usersearchfacet")]
	public class UserSearchFacet : Entity
    {
        public const string EntityLogicalName = "usersearchfacet";
        public UserSearchFacet() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("usersearchfacetid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["usersearchfacetid"] = value;
            }
        }
		
		public readonly string AttributeName = null;
		
		public readonly Guid? SystemUserId = null;
		
		public readonly string EntityName = null;
		
		public readonly Guid? UserSearchFacetId = null;
		
		public readonly int? FacetOrder = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("subscription")]
	public class Subscription : Entity
    {
        public const string EntityLogicalName = "subscription";
        public Subscription() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("subscriptionid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["subscriptionid"] = value;
            }
        }
		
		public readonly string MachineName = null;
		
		public readonly Guid? SubscriptionId = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly int? CompletedSyncVersionNumber = null;
		
		public readonly string SyncEntryTableName = null;
		
		public readonly Guid? SystemUserId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly DateTime? CompletedSyncStartedOn = null;
		
		public readonly DateTime? LastSyncStartedOn = null;
		
		public readonly int? SubscriptionType = null;
		
		public readonly string ClientVersion = null;
		
		public readonly bool? ReInitialize = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("principalsyncattributemap")]
	public class PrincipalSyncAttributeMap : Entity
    {
        public const string EntityLogicalName = "principalsyncattributemap";
        public PrincipalSyncAttributeMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("principalsyncattributemapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["principalsyncattributemapid"] = value;
            }
        }
		
		public readonly string AttributeCRMDisplayName = null;
		
		public readonly string AttributeCRMName = null;
		
		public readonly string ComputedProperties = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly bool? IsComputed = null;
		
		public readonly string EntityTypeCode = null;
		
		public readonly Guid? PrincipalId = null;
		
		public readonly string AttributeExchangeName = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string MappingName = null;
		
		public readonly Guid? PrincipalSyncAttributeMapId = null;
		
		public readonly EntityReference ParentPrincipalSyncAttributeMappingId = null;
		
		public readonly int? AllowedSyncDirection = null;
		
		public readonly string AttributeExchangeDisplayName = null;
		
		public readonly OptionSetValue DefaultSyncDirection = null;
		
		public readonly OptionSetValue SyncDirection = null;

        public new static class Options
        {
            public enum DefaultSyncDirection
            {
                None = 0,
                ToExchange = 1,
                ToCRM = 2,
                Bidirectional = 3
            }
            public enum SyncDirection
            {
                None = 0,
                ToExchange = 1,
                ToCRM = 2,
                Bidirectional = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("systemuserprofiles")]
	public class SystemUserProfiles : Entity
    {
        public const string EntityLogicalName = "systemuserprofiles";
        public SystemUserProfiles() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("systemuserprofileid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["systemuserprofileid"] = value;
            }
        }
		
		public readonly Guid? SystemUserId = null;
		
		public readonly Guid? SystemUserProfileId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? FieldSecurityProfileId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("mailboxtrackingfolder")]
	public class MailboxTrackingFolder : Entity
    {
        public const string EntityLogicalName = "mailboxtrackingfolder";
        public MailboxTrackingFolder() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("mailboxtrackingfolderid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["mailboxtrackingfolderid"] = value;
            }
        }
		
		public readonly EntityReference OwnerId = null;
		
		public readonly string ExchangeFolderName = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly EntityReference MailboxId = null;
		
		public readonly string ExchangeFolderId = null;
		
		public readonly Guid? MailboxTrackingFolderId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? FolderOnboardingStatus = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("filtertemplate")]
	public class FilterTemplate : Entity
    {
        public const string EntityLogicalName = "filtertemplate";
        public FilterTemplate() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("filtertemplateid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["filtertemplateid"] = value;
            }
        }
		
		public readonly string ReturnedTypeCode = null;
		
		public readonly Guid? FilterTemplateId = null;
		
		public readonly string Description = null;
		
		public readonly int? QueryType = null;
		
		public readonly string Name = null;
		
		public readonly string FetchXml = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("internaladdress")]
	public class InternalAddress : Entity
    {
        public const string EntityLogicalName = "internaladdress";
        public InternalAddress() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("internaladdressid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["internaladdressid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly int? UTCOffset = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly string UPSZone = null;
		
		public readonly string StateOrProvince = null;
		
		public readonly string City = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly string Composite = null;
		
		public readonly string Telephone1 = null;
		
		public readonly OptionSetValue ShippingMethodCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string County = null;
		
		public readonly double? Longitude = null;
		
		public readonly OptionSetValue AddressTypeCode = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly double? Latitude = null;
		
		public readonly string Name = null;
		
		public readonly string Line2 = null;
		
		public readonly string Fax = null;
		
		public readonly string ObjectTypeCode = null;
		
		public readonly Guid? InternalAddressId = null;
		
		public readonly string Country = null;
		
		public readonly Guid? BusinessUnitId = null;
		
		public readonly string PostalCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly string Telephone2 = null;
		
		public readonly int? AddressNumber = null;
		
		public readonly Guid? ParentId = null;
		
		public readonly string PostOfficeBox = null;
		
		public readonly Guid? OrganizationId = null;
		
		public readonly string Telephone3 = null;
		
		public readonly string Line1 = null;
		
		public readonly string Line3 = null;

        public new static class Options
        {
            public enum ShippingMethodCode
            {

            }
            public enum AddressTypeCode
            {

            }
            public enum ObjectTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("bookableresourcecategory")]
	public class BookableResourceCategory : Entity
    {
        public const string EntityLogicalName = "bookableresourcecategory";
        public BookableResourceCategory() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("bookableresourcecategoryid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["bookableresourcecategoryid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly OptionSetValue StatusCode = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Guid? BookableResourceCategoryId = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string Description = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Active = 1,
                Inactive = 2
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("sharepointdata")]
	public class SharePointData : Entity
    {
        public const string EntityLogicalName = "sharepointdata";
        public SharePointData() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("sharepointdataid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["sharepointdataid"] = value;
            }
        }
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly string NextPageToken = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SharePointDataId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference Location = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string Data = null;
		
		public readonly string PreviousPageToken = null;
		
		public readonly bool? IsValid = null;
		
		public readonly string RegardingObjectId = null;
		
		public readonly EntityReference UserId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly int? PageNumber = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("userentityinstancedata")]
	public class UserEntityInstanceData : Entity
    {
        public const string EntityLogicalName = "userentityinstancedata";
        public UserEntityInstanceData() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("userentityinstancedataid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["userentityinstancedataid"] = value;
            }
        }
		
		public readonly string FlagRequest = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly string ToDoSubOrdinal = null;
		
		public readonly DateTime? DueDate = null;
		
		public readonly DateTime? CommonStart = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? ToDoItemFlags = null;
		
		public readonly DateTime? CommonEnd = null;
		
		public readonly int? FlagStatus = null;
		
		public readonly string PersonalCategories = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly int? ObjectTypeCode = null;
		
		public readonly EntityReference ObjectId = null;
		
		public readonly string ToDoTitle = null;
		
		public readonly DateTime? ReminderTime = null;
		
		public readonly DateTime? StartTime = null;
		
		public readonly bool? ReminderSet = null;
		
		public readonly Guid? UserEntityInstanceDataId = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly DateTime? FlagDueBy = null;
		
		public readonly DateTime? ToDoOrdinalDate = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("traceassociation")]
	public class TraceAssociation : Entity
    {
        public const string EntityLogicalName = "traceassociation";
        public TraceAssociation() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("traceassociationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["traceassociationid"] = value;
            }
        }
		
		public readonly Guid? TraceAssociationId = null;
		
		public readonly EntityReference TraceLogId = null;
		
		public readonly EntityReference RegardingObjectId = null;
		
		public readonly EntityReference OrganizationId = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("license")]
	public class License : Entity
    {
        public const string EntityLogicalName = "license";
        public License() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("licenseid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["licenseid"] = value;
            }
        }
		
		public readonly Guid? LicenseId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly Guid? LicenseType = null;
		
		public readonly string LicenseKey = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? InstalledOn = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("businessprocessflowinstance")]
	public class BusinessProcessFlowInstance : Entity
    {
        public const string EntityLogicalName = "businessprocessflowinstance";
        public BusinessProcessFlowInstance() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("businessprocessflowinstanceid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["businessprocessflowinstanceid"] = value;
            }
        }
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly string TraversedPath = null;
		
		public readonly string Entity3ObjectTypeCode = null;
		
		public readonly string Entity2ObjectTypeCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? Entity5Id = null;
		
		public readonly Guid? Entity3Id = null;
		
		public readonly string Entity4ObjectTypeCode = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly Guid? Entity4Id = null;
		
		public readonly string Name = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly string Entity1ObjectTypeCode = null;
		
		public readonly EntityReference ProcessId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? Entity1Id = null;
		
		public readonly DateTime? ActiveStageStartedOn = null;
		
		public readonly Guid? ProcessStageId = null;
		
		public readonly string Entity5ObjectTypeCode = null;
		
		public readonly Guid? Entity2Id = null;
		
		public readonly DateTime? CompletedOn = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly Guid? BusinessProcessFlowInstanceId = null;
		
		public readonly int? VersionNumber = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Active = 1,
                Finished = 2,
                Aborted = 3
            }
            public enum StateCode
            {
                Active = 0,
                Inactive = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("entitlementtemplatechannel")]
	public class EntitlementTemplateChannel : Entity
    {
        public const string EntityLogicalName = "entitlementtemplatechannel";
        public EntitlementTemplateChannel() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("entitlementtemplatechannelid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["entitlementtemplatechannelid"] = value;
            }
        }
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly decimal? TotalTerms = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? EntitlementTemplateChannelId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference EntitlementTemplateId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly OptionSetValue Channel = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly int? ImportSequenceNumber = null;

        public new static class Options
        {
            public enum Channel
            {
                Phone = 1,
                Email = 2,
                Web = 3,
                Facebook = 2483,
                Twitter = 3986
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("userqueryvisualization")]
	public class UserQueryVisualization : Entity
    {
        public const string EntityLogicalName = "userqueryvisualization";
        public UserQueryVisualization() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("userqueryvisualizationid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["userqueryvisualizationid"] = value;
            }
        }
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly bool? IsDefault = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly string DataDescription = null;
		
		public readonly OptionSetValue ChartType = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly string PresentationDescription = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly EntityReference WebResourceId = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string Description = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string PrimaryEntityTypeCode = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly Guid? UserQueryVisualizationId = null;
		
		public readonly EntityReference CreatedBy = null;

        public new static class Options
        {
            public enum ChartType
            {
                ASPNETCharts = 0,
                PowerBI = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("entitlement")]
	public class Entitlement : Entity
    {
        public const string EntityLogicalName = "entitlement";
        public Entitlement() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("entitlementid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["entitlementid"] = value;
            }
        }
		
		public readonly Guid? ProcessId = null;
		
		public readonly EntityReference AccountId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly OptionSetValue AllocationTypeCode = null;
		
		public readonly decimal? TotalTerms = null;
		
		public readonly DateTime? EndDate = null;
		
		public readonly EntityReference ContactId = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly string TraversedPath = null;
		
		public readonly EntityReference OwningTeam = null;
		
		public readonly EntityReference OwningUser = null;
		
		public readonly OptionSetValue DecreaseRemainingOn = null;
		
		public readonly EntityReference EntitlementTemplateId = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly Guid? StageId = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly DateTime? StartDate = null;
		
		public readonly bool? RestrictCaseCreation = null;
		
		public readonly bool? IsDefault = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly Guid? EntitlementId = null;
		
		public readonly OptionSetValue KbAccessLevel = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":1}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference CustomerId = null;
		
		public readonly string Description = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly decimal? RemainingTerms = null;
		
		public readonly EntityReference OwnerId = null;
		
		public readonly EntityReference OwningBusinessUnit = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly EntityReference SLAId = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly int? VersionNumber = null;

        public new static class Options
        {
            public enum AllocationTypeCode
            {
                NumberOfCases = 0,
                NumberOfHours = 1
            }
            public enum StatusCode
            {
                Draft = 0,
                Active = 1,
                Cancelled = 2,
                Expired = 3,
                Waiting = 1200
            }
            public enum DecreaseRemainingOn
            {
                CaseResolution = 0,
                CaseCreation = 1
            }
            public enum KbAccessLevel
            {
                Standard = 0,
                Premium = 1,
                None = 2
            }
            public enum StateCode
            {
                Draft = 0,
                Active = 1,
                Cancelled = 2,
                Expired = 3,
                Waiting = 4
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("importentitymapping")]
	public class ImportEntityMapping : Entity
    {
        public const string EntityLogicalName = "importentitymapping";
        public ImportEntityMapping() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("importentitymappingid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["importentitymappingid"] = value;
            }
        }
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly OptionSetValue ProcessCode = null;
		
		public readonly Guid? ImportEntityMappingId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference ImportMapId = null;
		
		public readonly string SourceEntityName = null;
		
		public readonly string TargetEntityName = null;
		
		public readonly OptionSetValue DeDupe = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly OptionSetValue StatusCode = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly DateTime? CreatedOn = null;

        public new static class Options
        {
            public enum ProcessCode
            {
                Process = 1,
                Ignore = 2,
                Internal = 3
            }
            public enum DeDupe
            {
                Ignore = 1,
                Eliminate = 2
            }
            public enum StateCode
            {
                Active = 0
            }
            public enum StatusCode
            {
                Active = 1
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("productsalesliterature")]
	public class ProductSalesLiterature : Entity
    {
        public const string EntityLogicalName = "productsalesliterature";
        public ProductSalesLiterature() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("productsalesliteratureid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["productsalesliteratureid"] = value;
            }
        }
		
		public readonly Guid? SalesLiteratureId = null;
		
		public readonly Guid? ProductSalesLiteratureId = null;
		
		public readonly Guid? ProductId = null;
		
		public readonly int? VersionNumber = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("annualfiscalcalendar")]
	public class AnnualFiscalCalendar : Entity
    {
        public const string EntityLogicalName = "annualfiscalcalendar";
        public AnnualFiscalCalendar() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("userfiscalcalendarid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["userfiscalcalendarid"] = value;
            }
        }
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly EntityReference BusinessUnitId = null;
		
		public readonly DateTime? EffectiveOn = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly Guid? UserFiscalCalendarId = null;
		
		public readonly int? FiscalPeriodType = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly EntityReference SalesPersonId = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("annual")]
		public readonly Money Period1 = null;
		[System.ComponentModel.DataAnnotations.Schema.Column("annual_base")]
		public readonly Money Period1_Base = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("hierarchyrule")]
	public class HierarchyRule : Entity
    {
        public const string EntityLogicalName = "hierarchyrule";
        public HierarchyRule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("hierarchyruleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["hierarchyruleid"] = value;
            }
        }
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly bool? ShowDisabled = null;
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly Guid? SortBy = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? PublishedOn = null;
		
		public readonly bool? IsCustomizable = null;
		
		public readonly Guid? HierarchyRuleIDUnique = null;
		
		public readonly string Description = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly string PrimaryEntityLogicalName = null;
		
		public readonly Guid? RelatedEntityFormId = null;
		
		public readonly string IntroducedVersion = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly string RelatedEntityLogicalName = null;
		
		public readonly Guid? PrimaryEntityFormID = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly Guid? HierarchyRuleID = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("product")]
	public class Product : Entity
    {
        public const string EntityLogicalName = "product";
        public Product() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("productid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["productid"] = value;
            }
        }
		[System.ComponentModel.DataAnnotations.KeyAttribute]
		public readonly string Name = null;
		
		public readonly DateTime? CreatedOn = null;
		
		public readonly EntityReference ParentProductId = null;
		
		public readonly Guid? StageId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly DateTime? ModifiedOn = null;
		
		public readonly decimal? StockVolume = null;
		
		public readonly decimal? ExchangeRate = null;
		
		public readonly Guid? ProductId = null;
		
		public readonly EntityReference TransactionCurrencyId = null;
		
		public readonly OptionSetValue StatusCode = null;
		[System.ComponentModel.DescriptionAttribute("{\"a\":0}")]
		public readonly OptionSetValue StateCode = null;
		
		public readonly EntityReference CreatedOnBehalfBy = null;
		
		public readonly EntityReference SubjectId = null;
		
		public readonly string ProductUrl = null;
		
		public readonly decimal? QuantityOnHand = null;
		
		public readonly EntityReference PriceLevelId = null;
		
		public readonly EntityReference ModifiedOnBehalfBy = null;
		
		public readonly string Description = null;
		
		public readonly bool? IsStockItem = null;
		
		public readonly EntityReference DefaultUoMScheduleId = null;
		
		public readonly OptionSetValue ProductTypeCode = null;
		
		public readonly byte[] EntityImage = null;
		
		public readonly int? TimeZoneRuleVersionNumber = null;
		
		public readonly DateTime? ValidToDate = null;
		
		public readonly bool? IsKit = null;
		
		public readonly string VendorPartNumber = null;
		
		public readonly Money StandardCost = null;
		
		public readonly string Size = null;
		
		public readonly string TraversedPath = null;
		
		public readonly int? ImportSequenceNumber = null;
		
		public readonly EntityReference CreatedByExternalParty = null;
		
		public readonly int? DMTImportState = null;
		
		public readonly EntityReference CreatedBy = null;
		
		public readonly Money Price_Base = null;
		
		public readonly decimal? StockWeight = null;
		
		public readonly string HierarchyPath = null;
		
		public readonly DateTime? OverriddenCreatedOn = null;
		
		public readonly Money Price = null;
		
		public readonly EntityReference ModifiedByExternalParty = null;
		
		public readonly EntityReference DefaultUoMId = null;
		
		public readonly string VendorName = null;
		
		public readonly string SupplierName = null;
		
		public readonly Money CurrentCost = null;
		
		public readonly Guid? ProcessId = null;
		
		public readonly int? QuantityDecimal = null;
		
		public readonly EntityReference ModifiedBy = null;
		
		public readonly string ProductNumber = null;
		
		public readonly Money StandardCost_Base = null;
		
		public readonly OptionSetValue ProductStructure = null;
		
		public readonly string VendorID = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly int? UTCConversionTimeZoneCode = null;
		
		public readonly Money CurrentCost_Base = null;
		
		public readonly DateTime? ValidFromDate = null;

        public new static class Options
        {
            public enum StatusCode
            {
                Active = 1,
                Retired = 2,
                Draft = 0,
                UnderRevision = 3
            }
            public enum StateCode
            {
                Active = 0,
                Retired = 1,
                Draft = 2,
                UnderRevision = 3
            }
            public enum ProductTypeCode
            {
                SalesInventory = 1,
                MiscellaneousCharges = 2,
                Services = 3,
                FlatFees = 4
            }
            public enum ProductStructure
            {
                Product = 1,
                ProductFamily = 2,
                ProductBundle = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("systemuserbusinessunitentitymap")]
	public class SystemUserBusinessUnitEntityMap : Entity
    {
        public const string EntityLogicalName = "systemuserbusinessunitentitymap";
        public SystemUserBusinessUnitEntityMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("systemuserbusinessunitentitymapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["systemuserbusinessunitentitymapid"] = value;
            }
        }
		
		public readonly Guid? SystemUserBusinessUnitEntityMapId = null;
		
		public readonly Guid? SystemUserId = null;
		
		public readonly Guid? BusinessUnitId = null;
		
		public readonly string ObjectTypeCode = null;
		
		public readonly int? ReadPrivilegeDepth = null;
		
		public readonly int? VersionNumber = null;

        public new static class Options
        {
            public enum ObjectTypeCode
            {

            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("contactleads")]
	public class ContactLeads : Entity
    {
        public const string EntityLogicalName = "contactleads";
        public ContactLeads() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("contactleadid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["contactleadid"] = value;
            }
        }
		
		public readonly Guid? ContactId = null;
		
		public readonly Guid? LeadId = null;
		
		public readonly Guid? ContactLeadId = null;
		
		public readonly int? VersionNumber = null;


    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("ribbontabtocommandmap")]
	public class RibbonTabToCommandMap : Entity
    {
        public const string EntityLogicalName = "ribbontabtocommandmap";
        public RibbonTabToCommandMap() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("ribbontabtocommandmapid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["ribbontabtocommandmapid"] = value;
            }
        }
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly string Entity = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly EntityReference RibbonDiffId = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly Guid? RibbonTabToCommandMapUniqueId = null;
		
		public readonly Guid? RibbonTabToCommandMapId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly string TabId = null;
		
		public readonly string Command = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly string ControlId = null;
		
		public readonly Guid? SolutionId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("ribboncontextgroup")]
	public class RibbonContextGroup : Entity
    {
        public const string EntityLogicalName = "ribboncontextgroup";
        public RibbonContextGroup() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("ribboncontextgroupid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["ribboncontextgroupid"] = value;
            }
        }
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly EntityReference RibbonCustomizationId = null;
		
		public readonly string Entity = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? RibbonContextGroupId = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly string ContextGroupId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly Guid? RibbonContextGroupUniqueId = null;
		
		public readonly string ContextGroupXml = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("ribboncommand")]
	public class RibbonCommand : Entity
    {
        public const string EntityLogicalName = "ribboncommand";
        public RibbonCommand() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("ribboncommandid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["ribboncommandid"] = value;
            }
        }
		
		public readonly bool? IsManaged = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly EntityReference RibbonCustomizationId = null;
		
		public readonly Guid? RibbonCommandId = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly string Command = null;
		
		public readonly string CommandDefinition = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly string Entity = null;
		
		public readonly Guid? RibbonCommandUniqueId = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("ribbonrule")]
	public class RibbonRule : Entity
    {
        public const string EntityLogicalName = "ribbonrule";
        public RibbonRule() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("ribbonruleid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["ribbonruleid"] = value;
            }
        }
		
		public readonly string Entity = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly OptionSetValue RuleType = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly Guid? RibbonRuleUniqueId = null;
		
		public readonly string RuleDefinition = null;
		
		public readonly Guid? SolutionId = null;
		
		public readonly Guid? RibbonRuleId = null;
		
		public readonly string RuleId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly EntityReference RibbonCustomizationId = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly int? VersionNumber = null;

        public new static class Options
        {
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }
            public enum RuleType
            {
                Enable = 1,
                Trim = 2,
                TabSelection = 3
            }

        }
    }
    [System.Runtime.Serialization.DataContractAttribute]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("ribbondiff")]
	public class RibbonDiff : Entity
    {
        public const string EntityLogicalName = "ribbondiff";
        public RibbonDiff() : base(EntityLogicalName)
        {
        }

        [System.ComponentModel.DataAnnotations.Schema.Column("ribbondiffid")]
        public override Guid Id
        {
            get { return base.Id; }
            set
            {
                base.Id = value;
                this["ribbondiffid"] = value;
            }
        }
		
		public readonly Guid? SolutionId = null;
		
		public readonly EntityReference RibbonCustomizationId = null;
		
		public readonly int? Sequence = null;
		
		public readonly bool? IsManaged = null;
		
		public readonly string Entity = null;
		
		public readonly OptionSetValue DiffType = null;
		
		public readonly string RDX = null;
		
		public readonly string TabId = null;
		
		public readonly Guid? RibbonDiffUniqueId = null;
		
		public readonly Guid? RibbonDiffId = null;
		
		public readonly EntityReference OrganizationId = null;
		
		public readonly Guid? ContextGroupId = null;
		
		public readonly OptionSetValue ComponentState = null;
		
		public readonly DateTime? OverwriteTime = null;
		
		public readonly int? VersionNumber = null;
		
		public readonly string DiffId = null;
		
		public readonly Guid? SupportingSolutionId = null;
		
		public readonly bool? IsAppAware = null;

        public new static class Options
        {
            public enum DiffType
            {
                Standard = 0,
                Tab = 1,
                LayoutTemplate = 2,
                LocalizedLabel = 3
            }
            public enum ComponentState
            {
                Published = 0,
                Unpublished = 1,
                Deleted = 2,
                DeletedUnpublished = 3
            }

        }
    }

}